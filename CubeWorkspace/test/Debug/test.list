
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0a8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d340  0800d340  0001d340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d360  0800d360  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d360  0800d360  0001d360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d368  0800d368  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d36c  0800d36c  0001d36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800d370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  0800d384  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  0800d3e4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000de8  240000d4  0800d444  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000ebc  0800d444  00020ebc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b215  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005091  00000000  00000000  0005b317  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002340  00000000  00000000  000603a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002170  00000000  00000000  000626e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ec82  00000000  00000000  00064858  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001fea8  00000000  00000000  000a34da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00188e00  00000000  00000000  000c3382  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024c182  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009b04  00000000  00000000  0024c200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d328 	.word	0x0800d328

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800d328 	.word	0x0800d328

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fe41 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f83b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fde3 	bl	80011b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ea:	f000 f965 	bl	80008b8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005ee:	f000 f9db 	bl	80009a8 <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005f2:	f000 fa11 	bl	8000a18 <MX_ETH_Init>
  MX_FMC_Init();
 80005f6:	f000 fcdf 	bl	8000fb8 <MX_FMC_Init>
  MX_I2C1_Init();
 80005fa:	f000 fa5f 	bl	8000abc <MX_I2C1_Init>
  MX_LTDC_Init();
 80005fe:	f000 fa9d 	bl	8000b3c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000602:	f000 fb1d 	bl	8000c40 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000606:	f000 fb43 	bl	8000c90 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800060a:	f000 fbff 	bl	8000e0c <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fc23 	bl	8000e58 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000612:	f000 fc6d 	bl	8000ef0 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000616:	f000 fc9d 	bl	8000f54 <MX_USB_OTG_HS_PCD_Init>
//	  *p_frameBuff = 0;
//	  p_frameBuff++;
//  }

  uint32_t a,b,c;
  a = 4294967040;
 800061a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800061e:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  a++;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]


	  for(int i = 0; i < num; i++) {
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	e009      	b.n	8000640 <main+0x68>
		  *(p_frameBuff++) = a;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1d1a      	adds	r2, r3, #4
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <main+0x80>)
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < num; i++) {
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4293      	cmp	r3, r2
 8000646:	dbf1      	blt.n	800062c <main+0x54>
	    }


	  if(a > 200) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2bc8      	cmp	r3, #200	; 0xc8
 800064c:	d9e8      	bls.n	8000620 <main+0x48>
		  a = 4294967040;
 800064e:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8000652:	607b      	str	r3, [r7, #4]
	  a++;
 8000654:	e7e4      	b.n	8000620 <main+0x48>
 8000656:	bf00      	nop
 8000658:	24000000 	.word	0x24000000

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0cc      	sub	sp, #304	; 0x130
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000666:	224c      	movs	r2, #76	; 0x4c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00c fe54 	bl	800d318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000674:	2220      	movs	r2, #32
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f00c fe4d 	bl	800d318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	23bc      	movs	r3, #188	; 0xbc
 8000686:	461a      	mov	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f00c fe45 	bl	800d318 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068e:	2002      	movs	r0, #2
 8000690:	f004 fd36 	bl	8005100 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4b83      	ldr	r3, [pc, #524]	; (80008a8 <SystemClock_Config+0x24c>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4a82      	ldr	r2, [pc, #520]	; (80008a8 <SystemClock_Config+0x24c>)
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a6:	4b80      	ldr	r3, [pc, #512]	; (80008a8 <SystemClock_Config+0x24c>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f003 0201 	and.w	r2, r3, #1
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	4b7e      	ldr	r3, [pc, #504]	; (80008ac <SystemClock_Config+0x250>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ba:	4a7c      	ldr	r2, [pc, #496]	; (80008ac <SystemClock_Config+0x250>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b7a      	ldr	r3, [pc, #488]	; (80008ac <SystemClock_Config+0x250>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d2:	bf00      	nop
 80006d4:	4b75      	ldr	r3, [pc, #468]	; (80008ac <SystemClock_Config+0x250>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e0:	d1f8      	bne.n	80006d4 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006e2:	4b73      	ldr	r3, [pc, #460]	; (80008b0 <SystemClock_Config+0x254>)
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	4a72      	ldr	r2, [pc, #456]	; (80008b0 <SystemClock_Config+0x254>)
 80006e8:	f023 0303 	bic.w	r3, r3, #3
 80006ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006ee:	2322      	movs	r3, #34	; 0x22
 80006f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000718:	230a      	movs	r3, #10
 800071a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000730:	230c      	movs	r3, #12
 8000732:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fdf2 	bl	8005330 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000752:	f000 fe5d 	bl	8001410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	233f      	movs	r3, #63	; 0x3f
 8000758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2303      	movs	r3, #3
 800075e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800077a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800077e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000788:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f005 f9a6 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x142>
  {
    Error_Handler();
 800079a:	f000 fe39 	bl	8001410 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4a44      	ldr	r2, [pc, #272]	; (80008b4 <SystemClock_Config+0x258>)
 80007a4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2204      	movs	r2, #4
 80007ac:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	220a      	movs	r2, #10
 80007b4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2201      	movs	r2, #1
 80007bc:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2202      	movs	r2, #2
 80007c4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2202      	movs	r2, #2
 80007cc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	22c0      	movs	r2, #192	; 0xc0
 80007d4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2220      	movs	r2, #32
 80007dc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2220      	movs	r2, #32
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2281      	movs	r2, #129	; 0x81
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2202      	movs	r2, #2
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2202      	movs	r2, #2
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 14;
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	220e      	movs	r2, #14
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2200      	movs	r2, #0
 800084e:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2200      	movs	r2, #0
 800085e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800086a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f005 fcf7 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x230>
  {
    Error_Handler();
 8000888:	f000 fdc2 	bl	8001410 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800088c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000890:	2100      	movs	r1, #0
 8000892:	2000      	movs	r0, #0
 8000894:	f005 fac8 	bl	8005e28 <HAL_RCC_MCOConfig>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000898:	f004 fc6c 	bl	8005174 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800089c:	bf00      	nop
 800089e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	58000400 	.word	0x58000400
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58024400 	.word	0x58024400
 80008b4:	232d0109 	.word	0x232d0109

080008b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <MX_ADC1_Init+0xe4>)
 80008e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_ADC1_Init+0xe0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000908:	2201      	movs	r2, #1
 800090a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_ADC1_Init+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0xe0>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ADC1_Init+0xe0>)
 800092c:	2200      	movs	r2, #0
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000938:	4817      	ldr	r0, [pc, #92]	; (8000998 <MX_ADC1_Init+0xe0>)
 800093a:	f001 fef9 	bl	8002730 <HAL_ADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 fd64 	bl	8001410 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000954:	f002 fcbe 	bl	80032d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800095e:	f000 fd57 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ADC1_Init+0xe8>)
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000966:	2306      	movs	r3, #6
 8000968:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000970:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000972:	2304      	movs	r3, #4
 8000974:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_ADC1_Init+0xe0>)
 8000980:	f002 f876 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800098a:	f000 fd41 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24000b78 	.word	0x24000b78
 800099c:	40022000 	.word	0x40022000
 80009a0:	04300002 	.word	0x04300002
 80009a4:	47ff0000 	.word	0x47ff0000

080009a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MX_DFSDM1_Init+0x6c>)
 80009b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009de:	2204      	movs	r2, #4
 80009e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009fc:	f002 fe54 	bl	80036a8 <HAL_DFSDM_ChannelInit>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a06:	f000 fd03 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	24000124 	.word	0x24000124
 8000a14:	40017020 	.word	0x40017020

08000a18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_ETH_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	22e1      	movs	r2, #225	; 0xe1
 8000a3c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	3303      	adds	r3, #3
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	3305      	adds	r3, #5
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_ETH_Init+0x98>)
 8000a66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_ETH_Init+0x9c>)
 8000a6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a78:	f002 ff2a 	bl	80038d0 <HAL_ETH_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fcc5 	bl	8001410 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_ETH_Init+0xa0>)
 8000a8c:	f00c fc44 	bl	800d318 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_ETH_Init+0xa0>)
 8000a92:	2221      	movs	r2, #33	; 0x21
 8000a94:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_ETH_Init+0xa0>)
 8000a98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a9c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_ETH_Init+0xa0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000dc8 	.word	0x24000dc8
 8000aac:	40028000 	.word	0x40028000
 8000ab0:	24000074 	.word	0x24000074
 8000ab4:	24000014 	.word	0x24000014
 8000ab8:	24000e38 	.word	0x24000e38

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f003 fcca 	bl	8004490 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 fc85 	bl	8001410 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f003 fd51 	bl	80045b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fc7c 	bl	8001410 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f003 fd93 	bl	8004646 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fc73 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000564 	.word	0x24000564
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10909cec 	.word	0x10909cec

08000b3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00c fbe5 	bl	800d318 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  //hltdc.Instance->GCR = LTDC_GCR_LTDCEN;
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <MX_LTDC_Init+0x100>)
 8000b52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b60:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b6e:	2207      	movs	r2, #7
 8000b70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b7a:	220e      	movs	r2, #14
 8000b7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b80:	2205      	movs	r2, #5
 8000b82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b86:	f240 228e 	movw	r2, #654	; 0x28e
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b8e:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b96:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000b9e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bbc:	481e      	ldr	r0, [pc, #120]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000bbe:	f003 fd8f 	bl	80046e0 <HAL_LTDC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bc8:	f000 fc22 	bl	8001410 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 640;
 8000bd0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000bd4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000bda:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bde:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8000be8:	23ff      	movs	r3, #255	; 0xff
 8000bea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 640;
 8000bfa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000c00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000c06:	23ff      	movs	r3, #255	; 0xff
 8000c08:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_LTDC_Init+0xfc>)
 8000c20:	f003 fef0 	bl	8004a04 <HAL_LTDC_ConfigLayer>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000c2a:	f000 fbf1 	bl	8001410 <Error_Handler>



  /* USER CODE END LTDC_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	; 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	24000a38 	.word	0x24000a38
 8000c3c:	50001000 	.word	0x50001000

08000c40 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_QUADSPI_Init+0x4c>)
 8000c48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_QUADSPI_Init+0x48>)
 8000c76:	f004 fa8d 	bl	8005194 <HAL_QSPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000c80:	f000 fbc6 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000e6c 	.word	0x24000e6c
 8000c8c:	52005000 	.word	0x52005000

08000c90 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000c96:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <MX_SAI1_Init+0x16c>)
 8000c98:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c9a:	4b57      	ldr	r3, [pc, #348]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ca0:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000ca6:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cac:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cb8:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cca:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <MX_SAI1_Init+0x170>)
 8000cd4:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <MX_SAI1_Init+0x168>)
 8000d3c:	f007 f968 	bl	8008010 <HAL_SAI_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000d46:	f000 fb63 	bl	8001410 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <MX_SAI1_Init+0x178>)
 8000d4e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d5e:	2240      	movs	r2, #64	; 0x40
 8000d60:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <MX_SAI1_Init+0x174>)
 8000de6:	f007 f913 	bl	8008010 <HAL_SAI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000df0:	f000 fb0e 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	24000cfc 	.word	0x24000cfc
 8000dfc:	40015804 	.word	0x40015804
 8000e00:	0002ee00 	.word	0x0002ee00
 8000e04:	24000ae0 	.word	0x24000ae0
 8000e08:	40015824 	.word	0x40015824

08000e0c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <MX_SDMMC1_SD_Init+0x48>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e28:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_SDMMC1_SD_Init+0x44>)
 8000e3e:	f007 fb9f 	bl	8008580 <HAL_SD_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000e48:	f000 fae2 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	240009b8 	.word	0x240009b8
 8000e54:	52007000 	.word	0x52007000

08000e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <MX_USART1_UART_Init+0x94>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ea2:	f008 fc4b 	bl	800973c <HAL_UART_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eac:	f000 fab0 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000eb4:	f00a ffb5 	bl	800be22 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ebe:	f000 faa7 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f00a ffea 	bl	800be9e <HAL_UARTEx_SetRxFifoThreshold>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed0:	f000 fa9e 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ed6:	f00a ff6b 	bl	800bdb0 <HAL_UARTEx_DisableFifoMode>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 fa96 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000bdc 	.word	0x24000bdc
 8000eec:	40011000 	.word	0x40011000

08000ef0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efc:	2209      	movs	r2, #9
 8000efe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f38:	f003 ff9a 	bl	8004e70 <HAL_PCD_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f42:	f000 fa65 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	240005b0 	.word	0x240005b0
 8000f50:	40080000 	.word	0x40080000

08000f54 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f60:	2209      	movs	r2, #9
 8000f62:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f9c:	f003 ff68 	bl	8004e70 <HAL_PCD_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fa6:	f000 fa33 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400015c 	.word	0x2400015c
 8000fb4:	40040000 	.word	0x40040000

08000fb8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_FMC_Init+0x1e0>)
 8000fe6:	4a6d      	ldr	r2, [pc, #436]	; (800119c <MX_FMC_Init+0x1e4>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fea:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <MX_FMC_Init+0x1e0>)
 8000fec:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <MX_FMC_Init+0x1e8>)
 8000fee:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <MX_FMC_Init+0x1e0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ff6:	4b68      	ldr	r3, [pc, #416]	; (8001198 <MX_FMC_Init+0x1e0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000ffc:	4b66      	ldr	r3, [pc, #408]	; (8001198 <MX_FMC_Init+0x1e0>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001002:	4b65      	ldr	r3, [pc, #404]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001004:	2210      	movs	r2, #16
 8001006:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001008:	4b63      	ldr	r3, [pc, #396]	; (8001198 <MX_FMC_Init+0x1e0>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001014:	4b60      	ldr	r3, [pc, #384]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800101a:	4b5f      	ldr	r3, [pc, #380]	; (8001198 <MX_FMC_Init+0x1e0>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001020:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001026:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 800102c:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <MX_FMC_Init+0x1e0>)
 800102e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <MX_FMC_Init+0x1e0>)
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001046:	4b54      	ldr	r3, [pc, #336]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001048:	2200      	movs	r2, #0
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001050:	230f      	movs	r3, #15
 8001052:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001054:	23ff      	movs	r3, #255	; 0xff
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001058:	230f      	movs	r3, #15
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800105c:	2310      	movs	r3, #16
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001060:	2311      	movs	r3, #17
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	4849      	ldr	r0, [pc, #292]	; (8001198 <MX_FMC_Init+0x1e0>)
 8001072:	f003 fe9f 	bl	8004db4 <HAL_NOR_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 800107c:	f000 f9c8 	bl	8001410 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001080:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <MX_FMC_Init+0x1ec>)
 8001082:	4a46      	ldr	r2, [pc, #280]	; (800119c <MX_FMC_Init+0x1e4>)
 8001084:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <MX_FMC_Init+0x1ec>)
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <MX_FMC_Init+0x1e8>)
 800108a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <MX_FMC_Init+0x1ec>)
 800108e:	2204      	movs	r2, #4
 8001090:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <MX_FMC_Init+0x1ec>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <MX_FMC_Init+0x1ec>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010a0:	2210      	movs	r2, #16
 80010a2:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_FMC_Init+0x1ec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010e8:	230f      	movs	r3, #15
 80010ea:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010ec:	230f      	movs	r3, #15
 80010ee:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80010f4:	230f      	movs	r3, #15
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010f8:	2310      	movs	r3, #16
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010fc:	2311      	movs	r3, #17
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4825      	ldr	r0, [pc, #148]	; (80011a4 <MX_FMC_Init+0x1ec>)
 800110e:	f008 fac5 	bl	800969c <HAL_SRAM_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 8001118:	f000 f97a 	bl	8001410 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_FMC_Init+0x1f0>)
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <MX_FMC_Init+0x1f4>)
 8001120:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001124:	2201      	movs	r2, #1
 8001126:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_FMC_Init+0x1f0>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001136:	2220      	movs	r2, #32
 8001138:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_FMC_Init+0x1f0>)
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_FMC_Init+0x1f0>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_FMC_Init+0x1f0>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800115e:	2310      	movs	r3, #16
 8001160:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001162:	2310      	movs	r3, #16
 8001164:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8001166:	2310      	movs	r3, #16
 8001168:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800116a:	2310      	movs	r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 800116e:	2310      	movs	r3, #16
 8001170:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001172:	2310      	movs	r3, #16
 8001174:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8001176:	2310      	movs	r3, #16
 8001178:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	480a      	ldr	r0, [pc, #40]	; (80011a8 <MX_FMC_Init+0x1f0>)
 8001180:	f008 fa2c 	bl	80095dc <HAL_SDRAM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 800118a:	f000 f941 	bl	8001410 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000c68 	.word	0x24000c68
 800119c:	52004000 	.word	0x52004000
 80011a0:	52004104 	.word	0x52004104
 80011a4:	24000cb0 	.word	0x24000cb0
 80011a8:	24000d94 	.word	0x24000d94
 80011ac:	52004140 	.word	0x52004140

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a89      	ldr	r2, [pc, #548]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b83      	ldr	r3, [pc, #524]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a82      	ldr	r2, [pc, #520]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <MX_GPIO_Init+0x244>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001202:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <MX_GPIO_Init+0x244>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	623b      	str	r3, [r7, #32]
 800121e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001220:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a6b      	ldr	r2, [pc, #428]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x244>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a64      	ldr	r2, [pc, #400]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <MX_GPIO_Init+0x244>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127a:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <MX_GPIO_Init+0x244>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <MX_GPIO_Init+0x244>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001298:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <MX_GPIO_Init+0x244>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a8:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <MX_GPIO_Init+0x244>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <MX_GPIO_Init+0x244>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2108      	movs	r1, #8
 8001314:	4838      	ldr	r0, [pc, #224]	; (80013f8 <MX_GPIO_Init+0x248>)
 8001316:	f003 f8a1 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001320:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x24c>)
 8001322:	f003 f89b 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	2140      	movs	r1, #64	; 0x40
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <MX_GPIO_Init+0x250>)
 800132c:	f003 f896 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RGB_GPIO_Port, LED3_RGB_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <MX_GPIO_Init+0x250>)
 8001336:	f003 f891 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 800133a:	2308      	movs	r3, #8
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	4829      	ldr	r0, [pc, #164]	; (80013f8 <MX_GPIO_Init+0x248>)
 8001352:	f002 fed3 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8001356:	2304      	movs	r3, #4
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001366:	230a      	movs	r3, #10
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	4824      	ldr	r0, [pc, #144]	; (8001404 <MX_GPIO_Init+0x254>)
 8001372:	f002 fec3 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_GPIO_Init+0x258>)
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <MX_GPIO_Init+0x25c>)
 800138c:	f002 feb6 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	4619      	mov	r1, r3
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_GPIO_Init+0x250>)
 80013ae:	f002 fea5 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_GPIO_Init+0x24c>)
 80013cc:	f002 fe96 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 80013d0:	2350      	movs	r3, #80	; 0x50
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_GPIO_Init+0x250>)
 80013e8:	f002 fe88 	bl	80040fc <HAL_GPIO_Init>

}
 80013ec:	bf00      	nop
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020c00 	.word	0x58020c00
 80013fc:	58021400 	.word	0x58021400
 8001400:	58020000 	.word	0x58020000
 8001404:	58021000 	.word	0x58021000
 8001408:	11110000 	.word	0x11110000
 800140c:	58022000 	.word	0x58022000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_MspInit+0x30>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x30>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x30>)
 8001438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58024400 	.word	0x58024400

08001454 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <HAL_ADC_MspInit+0x70>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d129      	bne.n	80014ba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_ADC_MspInit+0x74>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80014a2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80014a6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80014aa:	f000 ffab 	bl	8002404 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80014ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014b2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80014b6:	f000 ffa5 	bl	8002404 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	58024400 	.word	0x58024400

080014cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_DFSDM_ChannelMspInit+0xa4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d13d      	bne.n	8001568 <HAL_DFSDM_ChannelMspInit+0x9c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_DFSDM_ChannelMspInit+0xa8>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001528:	2304      	movs	r3, #4
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001538:	2306      	movs	r3, #6
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <HAL_DFSDM_ChannelMspInit+0xac>)
 8001544:	f002 fdda 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001548:	2308      	movs	r3, #8
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001558:	2303      	movs	r3, #3
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_DFSDM_ChannelMspInit+0xac>)
 8001564:	f002 fdca 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	240000f0 	.word	0x240000f0
 8001574:	58024400 	.word	0x58024400
 8001578:	58020800 	.word	0x58020800

0800157c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_ETH_MspInit+0x144>)
 800159a:	4293      	cmp	r3, r2
 800159c:	f040 808b 	bne.w	80016b6 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015a0:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a6:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c4:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e2:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 8001602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_ETH_MspInit+0x148>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1 
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8001654:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001666:	230b      	movs	r3, #11
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4815      	ldr	r0, [pc, #84]	; (80016c8 <HAL_ETH_MspInit+0x14c>)
 8001672:	f002 fd43 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001676:	2332      	movs	r3, #50	; 0x32
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001686:	230b      	movs	r3, #11
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	480e      	ldr	r0, [pc, #56]	; (80016cc <HAL_ETH_MspInit+0x150>)
 8001692:	f002 fd33 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001696:	2386      	movs	r3, #134	; 0x86
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a6:	230b      	movs	r3, #11
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <HAL_ETH_MspInit+0x154>)
 80016b2:	f002 fd23 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3738      	adds	r7, #56	; 0x38
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40028000 	.word	0x40028000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58021800 	.word	0x58021800
 80016cc:	58020800 	.word	0x58020800
 80016d0:	58020000 	.word	0x58020000

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_I2C_MspInit+0x88>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12d      	bne.n	8001752 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001724:	2304      	movs	r3, #4
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <HAL_I2C_MspInit+0x90>)
 8001730:	f002 fce4 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 8001736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 800173c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001740:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 8001746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40005400 	.word	0x40005400
 8001760:	58024400 	.word	0x58024400
 8001764:	58020400 	.word	0x58020400

08001768 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <HAL_LTDC_MspInit+0x128>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d17d      	bne.n	8001886 <HAL_LTDC_MspInit+0x11e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 800178c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001790:	4a40      	ldr	r2, [pc, #256]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 800179c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ae:	4a39      	ldr	r2, [pc, #228]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017cc:	4a31      	ldr	r2, [pc, #196]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_LTDC_MspInit+0x12c>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5 
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin 
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	61fb      	str	r3, [r7, #28]
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001812:	230e      	movs	r3, #14
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	481e      	ldr	r0, [pc, #120]	; (8001898 <HAL_LTDC_MspInit+0x130>)
 800181e:	f002 fc6d 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin 
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	61fb      	str	r3, [r7, #28]
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin 
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin 
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001834:	230e      	movs	r3, #14
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4817      	ldr	r0, [pc, #92]	; (800189c <HAL_LTDC_MspInit+0x134>)
 8001840:	f002 fc5c 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001844:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001856:	230e      	movs	r3, #14
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	480f      	ldr	r0, [pc, #60]	; (80018a0 <HAL_LTDC_MspInit+0x138>)
 8001862:	f002 fc4b 	bl	80040fc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2058      	movs	r0, #88	; 0x58
 800186c:	f001 fee7 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001870:	2058      	movs	r0, #88	; 0x58
 8001872:	f001 fefe 	bl	8003672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2059      	movs	r0, #89	; 0x59
 800187c:	f001 fedf 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001880:	2059      	movs	r0, #89	; 0x59
 8001882:	f001 fef6 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	50001000 	.word	0x50001000
 8001894:	58024400 	.word	0x58024400
 8001898:	58022800 	.word	0x58022800
 800189c:	58022400 	.word	0x58022400
 80018a0:	58022000 	.word	0x58022000

080018a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_QSPI_MspInit+0x188>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	f040 80ad 	bne.w	8001a22 <HAL_QSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 800192a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	4a3a      	ldr	r2, [pc, #232]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001950:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_QSPI_MspInit+0x18c>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK 
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 800195e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001970:	2309      	movs	r3, #9
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	482e      	ldr	r0, [pc, #184]	; (8001a34 <HAL_QSPI_MspInit+0x190>)
 800197c:	f002 fbbe 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001980:	2340      	movs	r3, #64	; 0x40
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001990:	230a      	movs	r3, #10
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <HAL_QSPI_MspInit+0x190>)
 800199c:	f002 fbae 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019b0:	2309      	movs	r3, #9
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	481f      	ldr	r0, [pc, #124]	; (8001a38 <HAL_QSPI_MspInit+0x194>)
 80019bc:	f002 fb9e 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80019c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019d2:	230a      	movs	r3, #10
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4816      	ldr	r0, [pc, #88]	; (8001a38 <HAL_QSPI_MspInit+0x194>)
 80019de:	f002 fb8d 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 80019e2:	230c      	movs	r3, #12
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019f2:	2309      	movs	r3, #9
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	480f      	ldr	r0, [pc, #60]	; (8001a3c <HAL_QSPI_MspInit+0x198>)
 80019fe:	f002 fb7d 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001a02:	2304      	movs	r3, #4
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a12:	2309      	movs	r3, #9
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <HAL_QSPI_MspInit+0x19c>)
 8001a1e:	f002 fb6d 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	52005000 	.word	0x52005000
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58021800 	.word	0x58021800
 8001a38:	58021400 	.word	0x58021400
 8001a3c:	58021c00 	.word	0x58021c00
 8001a40:	58020400 	.word	0x58020400

08001a44 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_SD_MspInit+0x128>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d17d      	bne.n	8001b62 <HAL_SD_MspInit+0x11e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a6c:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_SD_MspInit+0x12c>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR 
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin 
 8001ade:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ae2:	61fb      	str	r3, [r7, #28]
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001af0:	230c      	movs	r3, #12
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	481e      	ldr	r0, [pc, #120]	; (8001b74 <HAL_SD_MspInit+0x130>)
 8001afc:	f002 fafe 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001b00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001b12:	2307      	movs	r3, #7
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <HAL_SD_MspInit+0x134>)
 8001b1e:	f002 faed 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001b22:	2304      	movs	r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b32:	230c      	movs	r3, #12
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <HAL_SD_MspInit+0x138>)
 8001b3e:	f002 fadd 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8001b52:	2308      	movs	r3, #8
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_SD_MspInit+0x130>)
 8001b5e:	f002 facd 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	52007000 	.word	0x52007000
 8001b70:	58024400 	.word	0x58024400
 8001b74:	58020800 	.word	0x58020800
 8001b78:	58020400 	.word	0x58020400
 8001b7c:	58020c00 	.word	0x58020c00

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12e      	bne.n	8001c00 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001bfc:	f002 fa7e 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020400 	.word	0x58020400

08001c14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b090      	sub	sp, #64	; 0x40
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <HAL_PCD_MspInit+0x20c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12f      	bne.n	8001c96 <HAL_PCD_MspInit+0x82>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM 
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c66:	230a      	movs	r3, #10
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	486d      	ldr	r0, [pc, #436]	; (8001e28 <HAL_PCD_MspInit+0x214>)
 8001c72:	f002 fa43 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c76:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7c:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001c94:	e0c0      	b.n	8001e18 <HAL_PCD_MspInit+0x204>
  else if(hpcd->Instance==USB_OTG_HS)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <HAL_PCD_MspInit+0x218>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	f040 80bb 	bne.w	8001e18 <HAL_PCD_MspInit+0x204>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	4a5e      	ldr	r2, [pc, #376]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0c:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin 
 8001d38:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d46:	2302      	movs	r3, #2
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4836      	ldr	r0, [pc, #216]	; (8001e30 <HAL_PCD_MspInit+0x21c>)
 8001d56:	f002 f9d1 	bl	80040fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	482f      	ldr	r0, [pc, #188]	; (8001e34 <HAL_PCD_MspInit+0x220>)
 8001d78:	f002 f9c0 	bl	80040fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	4828      	ldr	r0, [pc, #160]	; (8001e38 <HAL_PCD_MspInit+0x224>)
 8001d98:	f002 f9b0 	bl	80040fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001dac:	230a      	movs	r3, #10
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4821      	ldr	r0, [pc, #132]	; (8001e3c <HAL_PCD_MspInit+0x228>)
 8001db8:	f002 f9a0 	bl	80040fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001dbc:	2328      	movs	r3, #40	; 0x28
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <HAL_PCD_MspInit+0x214>)
 8001dd8:	f002 f990 	bl	80040fc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001dfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001e02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_PCD_MspInit+0x210>)
 8001e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3740      	adds	r7, #64	; 0x40
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40080000 	.word	0x40080000
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58020000 	.word	0x58020000
 8001e2c:	40040000 	.word	0x40040000
 8001e30:	58020400 	.word	0x58020400
 8001e34:	58022000 	.word	0x58022000
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	58021c00 	.word	0x58021c00

08001e40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_FMC_MspInit+0x11c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d17a      	bne.n	8001f52 <HAL_FMC_MspInit+0x112>
    return;
  }
  FMC_Initialized = 1;
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_FMC_MspInit+0x11c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e62:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_FMC_MspInit+0x120>)
 8001e64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e68:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <HAL_FMC_MspInit+0x120>)
 8001e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_FMC_MspInit+0x120>)
 8001e74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin 
 8001e80:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001e84:	607b      	str	r3, [r7, #4]
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin 
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e92:	230c      	movs	r3, #12
 8001e94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4832      	ldr	r0, [pc, #200]	; (8001f64 <HAL_FMC_MspInit+0x124>)
 8001e9c:	f002 f92e 	bl	80040fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5 
 8001ea0:	f248 533f 	movw	r3, #34111	; 0x853f
 8001ea4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin 
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482b      	ldr	r0, [pc, #172]	; (8001f68 <HAL_FMC_MspInit+0x128>)
 8001ebc:	f002 f91e 	bl	80040fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin 
 8001ec0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001ec4:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin 
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin 
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4824      	ldr	r0, [pc, #144]	; (8001f6c <HAL_FMC_MspInit+0x12c>)
 8001edc:	f002 f90e 	bl	80040fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin 
 8001ee0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ee4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin 
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481d      	ldr	r0, [pc, #116]	; (8001f70 <HAL_FMC_MspInit+0x130>)
 8001efc:	f002 f8fe 	bl	80040fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin 
 8001f00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f04:	607b      	str	r3, [r7, #4]
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin 
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f12:	230c      	movs	r3, #12
 8001f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4816      	ldr	r0, [pc, #88]	; (8001f74 <HAL_FMC_MspInit+0x134>)
 8001f1c:	f002 f8ee 	bl	80040fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin 
 8001f20:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f24:	607b      	str	r3, [r7, #4]
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin 
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f32:	230c      	movs	r3, #12
 8001f34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480f      	ldr	r0, [pc, #60]	; (8001f78 <HAL_FMC_MspInit+0x138>)
 8001f3c:	f002 f8de 	bl	80040fc <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2030      	movs	r0, #48	; 0x30
 8001f46:	f001 fb7a 	bl	800363e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001f4a:	2030      	movs	r0, #48	; 0x30
 8001f4c:	f001 fb91 	bl	8003672 <HAL_NVIC_EnableIRQ>
 8001f50:	e000      	b.n	8001f54 <HAL_FMC_MspInit+0x114>
    return;
 8001f52:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	240000f4 	.word	0x240000f4
 8001f60:	58024400 	.word	0x58024400
 8001f64:	58022000 	.word	0x58022000
 8001f68:	58021800 	.word	0x58021800
 8001f6c:	58020c00 	.word	0x58020c00
 8001f70:	58021000 	.word	0x58021000
 8001f74:	58021c00 	.word	0x58021c00
 8001f78:	58021400 	.word	0x58021400

08001f7c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001f84:	f7ff ff5c 	bl	8001e40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f98:	f7ff ff52 	bl	8001e40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fac:	f7ff ff48 	bl	8001e40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_SAI_MspInit+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d137      	bne.n	800203a <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 8001fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd8:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 8001fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 8001fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 8001ff8:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 8001ffa:	2370      	movs	r3, #112	; 0x70
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800200a:	2306      	movs	r3, #6
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4824      	ldr	r0, [pc, #144]	; (80020a8 <HAL_SAI_MspInit+0xf0>)
 8002016:	f002 f871 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800202a:	2306      	movs	r3, #6
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <HAL_SAI_MspInit+0xf4>)
 8002036:	f002 f861 	bl	80040fc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_SAI_MspInit+0xf8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d127      	bne.n	8002094 <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10e      	bne.n	800206a <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 8002054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002058:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_SAI_MspInit+0xec>)
 800205e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_SAI_MspInit+0xe8>)
 8002072:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002074:	2308      	movs	r3, #8
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002084:	2306      	movs	r3, #6
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <HAL_SAI_MspInit+0xf0>)
 8002090:	f002 f834 	bl	80040fc <HAL_GPIO_Init>

    }
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40015804 	.word	0x40015804
 80020a0:	240000f8 	.word	0x240000f8
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58021000 	.word	0x58021000
 80020ac:	58021800 	.word	0x58021800
 80020b0:	40015824 	.word	0x40015824

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 f91a 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <FMC_IRQHandler+0x10>)
 8002116:	f007 fa9d 	bl	8009654 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	24000d94 	.word	0x24000d94

08002124 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <LTDC_IRQHandler+0x10>)
 800212a:	f002 fba9 	bl	8004880 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000a38 	.word	0x24000a38

08002138 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <LTDC_ER_IRQHandler+0x10>)
 800213e:	f002 fb9f 	bl	8004880 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000a38 	.word	0x24000a38

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <SystemInit+0xac>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <SystemInit+0xac>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <SystemInit+0xb0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <SystemInit+0xb0>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <SystemInit+0xb0>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <SystemInit+0xb0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4921      	ldr	r1, [pc, #132]	; (80021fc <SystemInit+0xb0>)
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <SystemInit+0xb4>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <SystemInit+0xb0>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <SystemInit+0xb0>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <SystemInit+0xb0>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <SystemInit+0xb0>)
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <SystemInit+0xb0>)
 8002198:	2200      	movs	r2, #0
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <SystemInit+0xb0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <SystemInit+0xb0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <SystemInit+0xb0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <SystemInit+0xb0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <SystemInit+0xb0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <SystemInit+0xb0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <SystemInit+0xb0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <SystemInit+0xb0>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <SystemInit+0xb0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <SystemInit+0xb8>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <SystemInit+0xbc>)
 80021d8:	4013      	ands	r3, r2
 80021da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021de:	d202      	bcs.n	80021e6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <SystemInit+0xc0>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SystemInit+0xac>)
 80021e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	58024400 	.word	0x58024400
 8002200:	eaf6ed7f 	.word	0xeaf6ed7f
 8002204:	5c001000 	.word	0x5c001000
 8002208:	ffff0000 	.word	0xffff0000
 800220c:	51008108 	.word	0x51008108

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
  ldr  r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800222e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223a:	f7ff ff87 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f00b f847 	bl	800d2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7fe f9c9 	bl	80005d8 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800224c:	0800d370 	.word	0x0800d370
  ldr  r0, =_sdata
 8002250:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002254:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8002258:	240000d4 	.word	0x240000d4
  ldr  r3, = _ebss
 800225c:	24000ebc 	.word	0x24000ebc

08002260 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC3_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f001 f9dd 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800226e:	f003 fe45 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_Init+0x60>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <HAL_Init+0x64>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	fa21 f303 	lsr.w	r3, r1, r3
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_Init+0x68>)
 800228c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_Init+0x68>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_Init+0x60>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490b      	ldr	r1, [pc, #44]	; (80022c8 <HAL_Init+0x64>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_Init+0x6c>)
 80022a8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f812 	bl	80022d4 <HAL_InitTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e002      	b.n	80022c0 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022ba:	f7ff f8b1 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58024400 	.word	0x58024400
 80022c8:	0800d350 	.word	0x0800d350
 80022cc:	24000004 	.word	0x24000004
 80022d0:	24000008 	.word	0x24000008

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e021      	b.n	800232c <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_InitTick+0x64>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_InitTick+0x60>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 f9c5 	bl	800368e <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f001 f98f 	bl	800363e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x68>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	24000010 	.word	0x24000010
 8002338:	24000004 	.word	0x24000004
 800233c:	2400000c 	.word	0x2400000c

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	24000010 	.word	0x24000010
 8002364:	24000eb8 	.word	0x24000eb8

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	24000eb8 	.word	0x24000eb8

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_Delay+0x40>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	24000010 	.word	0x24000010

080023c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_GetREVID+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0c1b      	lsrs	r3, r3, #16
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	5c001000 	.word	0x5c001000

080023dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	58000400 	.word	0x58000400

08002404 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	58000400 	.word	0x58000400

08002430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002498:	b490      	push	{r4, r7}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc90      	pop	{r4, r7}
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	611a      	str	r2, [r3, #16]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002504:	b490      	push	{r4, r7}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	6023      	str	r3, [r4, #0]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bc90      	pop	{r4, r7}
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002534:	b490      	push	{r4, r7}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3330      	adds	r3, #48	; 0x30
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	4413      	add	r3, r2
 8002552:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	211f      	movs	r1, #31
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 011f 	and.w	r1, r3, #31
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bc90      	pop	{r4, r7}
 8002584:	4770      	bx	lr

08002586 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002586:	b490      	push	{r4, r7}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3314      	adds	r3, #20
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	0e5b      	lsrs	r3, r3, #25
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0d1b      	lsrs	r3, r3, #20
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2107      	movs	r1, #7
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	401a      	ands	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	0d1b      	lsrs	r3, r3, #20
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc90      	pop	{r4, r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f0:	43db      	mvns	r3, r3
 80025f2:	401a      	ands	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0318 	and.w	r3, r3, #24
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <LL_ADC_SetChannelSingleDiff+0x44>)
 80025fc:	40d9      	lsrs	r1, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	400b      	ands	r3, r1
 8002602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	000fffff 	.word	0x000fffff

08002620 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <LL_ADC_DisableDeepPowerDown+0x20>)
 800262e:	4013      	ands	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6093      	str	r3, [r2, #8]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	5fffffc0 	.word	0x5fffffc0

08002644 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002658:	d101      	bne.n	800265e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <LL_ADC_EnableInternalRegulator+0x24>)
 800267a:	4013      	ands	r3, r2
 800267c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	6fffffc0 	.word	0x6fffffc0

08002694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <LL_ADC_IsEnabled+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_ADC_IsEnabled+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d101      	bne.n	80026fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b08      	cmp	r3, #8
 800271a:	d101      	bne.n	8002720 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e18e      	b.n	8002a68 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7fe fe7b 	bl	8001454 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff67 	bl	8002644 <LL_ADC_IsDeepPowerDownEnabled>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff4d 	bl	8002620 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff82 	bl	8002694 <LL_ADC_IsInternalRegulatorEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff66 	bl	800266c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <HAL_ADC_Init+0x2dc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	4a9a      	ldr	r2, [pc, #616]	; (8002a10 <HAL_ADC_Init+0x2e0>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff66 	bl	8002694 <LL_ADC_IsInternalRegulatorEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f043 0210 	orr.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff77 	bl	80026e2 <LL_ADC_REG_IsConversionOngoing>
 80027f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8129 	bne.w	8002a56 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8125 	bne.w	8002a56 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002814:	f043 0202 	orr.w	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff4b 	bl	80026bc <LL_ADC_IsEnabled>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d136      	bne.n	800289a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a78      	ldr	r2, [pc, #480]	; (8002a14 <HAL_ADC_Init+0x2e4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_ADC_Init+0x110>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a77      	ldr	r2, [pc, #476]	; (8002a18 <HAL_ADC_Init+0x2e8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10e      	bne.n	800285e <HAL_ADC_Init+0x12e>
 8002840:	4874      	ldr	r0, [pc, #464]	; (8002a14 <HAL_ADC_Init+0x2e4>)
 8002842:	f7ff ff3b 	bl	80026bc <LL_ADC_IsEnabled>
 8002846:	4604      	mov	r4, r0
 8002848:	4873      	ldr	r0, [pc, #460]	; (8002a18 <HAL_ADC_Init+0x2e8>)
 800284a:	f7ff ff37 	bl	80026bc <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	4323      	orrs	r3, r4
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e008      	b.n	8002870 <HAL_ADC_Init+0x140>
 800285e:	486f      	ldr	r0, [pc, #444]	; (8002a1c <HAL_ADC_Init+0x2ec>)
 8002860:	f7ff ff2c 	bl	80026bc <LL_ADC_IsEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a66      	ldr	r2, [pc, #408]	; (8002a14 <HAL_ADC_Init+0x2e4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_ADC_Init+0x158>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_ADC_Init+0x2e8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_ADC_Init+0x15c>
 8002888:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_ADC_Init+0x2f0>)
 800288a:	e000      	b.n	800288e <HAL_ADC_Init+0x15e>
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_ADC_Init+0x2f4>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7ff fdcb 	bl	8002430 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800289a:	f7ff fd93 	bl	80023c4 <HAL_GetREVID>
 800289e:	4602      	mov	r2, r0
 80028a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d914      	bls.n	80028d2 <HAL_ADC_Init+0x1a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d110      	bne.n	80028d2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7d5b      	ldrb	r3, [r3, #21]
 80028b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7f1b      	ldrb	r3, [r3, #28]
 80028c6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80028c8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ca:	f043 030c 	orr.w	r3, r3, #12
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e00d      	b.n	80028ee <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7d5b      	ldrb	r3, [r3, #21]
 80028d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7f1b      	ldrb	r3, [r3, #28]
 80028e8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7f1b      	ldrb	r3, [r3, #28]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	045b      	lsls	r3, r3, #17
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_ADC_Init+0x2f8>)
 8002928:	4013      	ands	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	430b      	orrs	r3, r1
 8002932:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fed2 	bl	80026e2 <LL_ADC_REG_IsConversionOngoing>
 800293e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fedf 	bl	8002708 <LL_ADC_INJ_IsConversionOngoing>
 800294a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d14a      	bne.n	80029e8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d147      	bne.n	80029e8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7d1b      	ldrb	r3, [r3, #20]
 800295c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_ADC_Init+0x2fc>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002980:	2b01      	cmp	r3, #1
 8002982:	d11b      	bne.n	80029bc <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_ADC_Init+0x300>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002998:	3a01      	subs	r2, #1
 800299a:	0411      	lsls	r1, r2, #16
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ac:	430a      	orrs	r2, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
 80029ba:	e007      	b.n	80029cc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fb58 	bl	8003098 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d121      	bne.n	8002a34 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f023 010f 	bic.w	r1, r3, #15
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	1e5a      	subs	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	e01c      	b.n	8002a44 <HAL_ADC_Init+0x314>
 8002a0a:	bf00      	nop
 8002a0c:	24000004 	.word	0x24000004
 8002a10:	053e2d63 	.word	0x053e2d63
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40022100 	.word	0x40022100
 8002a1c:	58026000 	.word	0x58026000
 8002a20:	40022300 	.word	0x40022300
 8002a24:	58026300 	.word	0x58026300
 8002a28:	fff0c003 	.word	0xfff0c003
 8002a2c:	ffffbffc 	.word	0xffffbffc
 8002a30:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020f 	bic.w	r2, r2, #15
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
 8002a54:	e007      	b.n	8002a66 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3724      	adds	r7, #36	; 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}

08002a70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b099      	sub	sp, #100	; 0x64
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a99      	ldr	r2, [pc, #612]	; (8002cf0 <HAL_ADC_ConfigChannel+0x280>)
 8002a8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x2a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e2e6      	b.n	8003068 <HAL_ADC_ConfigChannel+0x5f8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fe1b 	bl	80026e2 <LL_ADC_REG_IsConversionOngoing>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 82cb 	bne.w	800304a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d108      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x62>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2201      	movs	r2, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	e00f      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x82>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2201      	movs	r2, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	69d1      	ldr	r1, [r2, #28]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f7ff fd11 	bl	8002534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fde3 	bl	80026e2 <LL_ADC_REG_IsConversionOngoing>
 8002b1c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fdf0 	bl	8002708 <LL_ADC_INJ_IsConversionOngoing>
 8002b28:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80b3 	bne.w	8002c98 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 80af 	bne.w	8002c98 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f7ff fd1d 	bl	8002586 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b4c:	4b69      	ldr	r3, [pc, #420]	; (8002cf4 <HAL_ADC_ConfigChannel+0x284>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b58:	d10b      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x102>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	e01d      	b.n	8002bae <HAL_ADC_ConfigChannel+0x13e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x128>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	e00a      	b.n	8002bae <HAL_ADC_ConfigChannel+0x13e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d027      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6919      	ldr	r1, [r3, #16]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	f7ff fc67 	bl	8002498 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7e5b      	ldrb	r3, [r3, #25]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x170>
 8002bda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x172>
 8002be0:	2300      	movs	r3, #0
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff fc8e 	bl	8002504 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6919      	ldr	r1, [r3, #16]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	7e1b      	ldrb	r3, [r3, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x18e>
 8002bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x190>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	461a      	mov	r2, r3
 8002c02:	f7ff fc66 	bl	80024d2 <LL_ADC_SetDataRightShift>
 8002c06:	e047      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d107      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c2a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c72:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	069b      	lsls	r3, r3, #26
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fd0d 	bl	80026bc <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 81d9 	bne.w	800305c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff fc8e 	bl	80025d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_ADC_ConfigChannel+0x280>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f040 8101 	bne.w	8002eca <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x288>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e016      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x2ae>
 8002cf0:	47ff0000 	.word	0x47ff0000
 8002cf4:	5c001000 	.word	0x5c001000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	bf94      	ite	ls
 8002d18:	2301      	movls	r3, #1
 8002d1a:	2300      	movhi	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d064      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x2ce>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	069b      	lsls	r3, r3, #26
 8002d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3c:	e00e      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x2ec>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	069b      	lsls	r3, r3, #26
 8002d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x30c>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	e010      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x32e>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x354>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 021f 	and.w	r2, r3, #31
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	051b      	lsls	r3, r3, #20
 8002dc2:	e011      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x378>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	430b      	orrs	r3, r1
 8002dea:	e069      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x398>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	069b      	lsls	r3, r3, #26
 8002e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e06:	e00e      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x3b6>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	61fb      	str	r3, [r7, #28]
  return result;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	069b      	lsls	r3, r3, #26
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3d6>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	e010      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x3f8>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	617b      	str	r3, [r7, #20]
  return result;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2101      	movs	r1, #1
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	ea42 0103 	orr.w	r1, r2, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x424>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	051b      	lsls	r3, r3, #20
 8002e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e92:	e014      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x44e>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b1e      	subs	r3, #30
 8002eb8:	051b      	lsls	r3, r3, #20
 8002eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7ff fb5e 	bl	8002586 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f280 80c4 	bge.w	800305c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x478>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x47c>
 8002ee8:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_ADC_ConfigChannel+0x608>)
 8002eea:	e000      	b.n	8002eee <HAL_ADC_ConfigChannel+0x47e>
 8002eec:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_ADC_ConfigChannel+0x60c>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fac4 	bl	800247c <LL_ADC_GetCommonPathInternalCh>
 8002ef4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5d      	ldr	r2, [pc, #372]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x49a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10e      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x4b8>
 8002f0a:	4859      	ldr	r0, [pc, #356]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8002f0c:	f7ff fbd6 	bl	80026bc <LL_ADC_IsEnabled>
 8002f10:	4604      	mov	r4, r0
 8002f12:	4858      	ldr	r0, [pc, #352]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 8002f14:	f7ff fbd2 	bl	80026bc <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e008      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x4ca>
 8002f28:	4855      	ldr	r0, [pc, #340]	; (8003080 <HAL_ADC_ConfigChannel+0x610>)
 8002f2a:	f7ff fbc7 	bl	80026bc <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07b      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a50      	ldr	r2, [pc, #320]	; (8003084 <HAL_ADC_ConfigChannel+0x614>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d12e      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x536>
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d129      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_ADC_ConfigChannel+0x610>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d17f      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a43      	ldr	r2, [pc, #268]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_ADC_ConfigChannel+0x500>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a42      	ldr	r2, [pc, #264]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x504>
 8002f70:	4a41      	ldr	r2, [pc, #260]	; (8003078 <HAL_ADC_ConfigChannel+0x608>)
 8002f72:	e000      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x506>
 8002f74:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_ADC_ConfigChannel+0x60c>)
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7ff fa69 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <HAL_ADC_ConfigChannel+0x618>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <HAL_ADC_ConfigChannel+0x61c>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa4:	e05a      	b.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a39      	ldr	r2, [pc, #228]	; (8003090 <HAL_ADC_ConfigChannel+0x620>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d11e      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x57e>
 8002fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a30      	ldr	r2, [pc, #192]	; (8003080 <HAL_ADC_ConfigChannel+0x610>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d14b      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x568>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x56c>
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_ADC_ConfigChannel+0x608>)
 8002fda:	e000      	b.n	8002fde <HAL_ADC_ConfigChannel+0x56e>
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_ADC_ConfigChannel+0x60c>)
 8002fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7ff fa35 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fec:	e036      	b.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <HAL_ADC_ConfigChannel+0x624>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d131      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d12c      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_ADC_ConfigChannel+0x610>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d127      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_ADC_ConfigChannel+0x600>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x5b0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_ADC_ConfigChannel+0x604>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x5b4>
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <HAL_ADC_ConfigChannel+0x608>)
 8003022:	e000      	b.n	8003026 <HAL_ADC_ConfigChannel+0x5b6>
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_ADC_ConfigChannel+0x60c>)
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7ff fa11 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
 8003034:	e012      	b.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003048:	e008      	b.n	800305c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003068:	4618      	mov	r0, r3
 800306a:	3764      	adds	r7, #100	; 0x64
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}
 8003070:	40022000 	.word	0x40022000
 8003074:	40022100 	.word	0x40022100
 8003078:	40022300 	.word	0x40022300
 800307c:	58026300 	.word	0x58026300
 8003080:	58026000 	.word	0x58026000
 8003084:	cb840000 	.word	0xcb840000
 8003088:	24000004 	.word	0x24000004
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	c7520000 	.word	0xc7520000
 8003094:	cfb80000 	.word	0xcfb80000

08003098 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a70      	ldr	r2, [pc, #448]	; (8003268 <ADC_ConfigureBoostMode+0x1d0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <ADC_ConfigureBoostMode+0x1c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6f      	ldr	r2, [pc, #444]	; (800326c <ADC_ConfigureBoostMode+0x1d4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d109      	bne.n	80030c8 <ADC_ConfigureBoostMode+0x30>
 80030b4:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <ADC_ConfigureBoostMode+0x1d8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <ADC_ConfigureBoostMode+0x42>
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <ADC_ConfigureBoostMode+0x1dc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01a      	beq.n	8003114 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030de:	f003 f87f 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 80030e2:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ec:	d006      	beq.n	80030fc <ADC_ConfigureBoostMode+0x64>
 80030ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f2:	d00b      	beq.n	800310c <ADC_ConfigureBoostMode+0x74>
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d000      	beq.n	80030fc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80030fa:	e05d      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	60fb      	str	r3, [r7, #12]
        break;
 800310a:	e055      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	60fb      	str	r3, [r7, #12]
        break;
 8003112:	e051      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003114:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003118:	f003 ff88 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 800311c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003126:	d02a      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
 8003128:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800312c:	d813      	bhi.n	8003156 <ADC_ConfigureBoostMode+0xbe>
 800312e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003132:	d024      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
 8003134:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003138:	d806      	bhi.n	8003148 <ADC_ConfigureBoostMode+0xb0>
 800313a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313e:	d01e      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
 8003140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003144:	d01b      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003146:	e037      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314c:	d017      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
 800314e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003152:	d014      	beq.n	800317e <ADC_ConfigureBoostMode+0xe6>
        break;
 8003154:	e030      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003156:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800315a:	d021      	beq.n	80031a0 <ADC_ConfigureBoostMode+0x108>
 800315c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003160:	d806      	bhi.n	8003170 <ADC_ConfigureBoostMode+0xd8>
 8003162:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003166:	d013      	beq.n	8003190 <ADC_ConfigureBoostMode+0xf8>
 8003168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316c:	d014      	beq.n	8003198 <ADC_ConfigureBoostMode+0x100>
        break;
 800316e:	e023      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003170:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003174:	d018      	beq.n	80031a8 <ADC_ConfigureBoostMode+0x110>
 8003176:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800317a:	d019      	beq.n	80031b0 <ADC_ConfigureBoostMode+0x118>
        break;
 800317c:	e01c      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c9b      	lsrs	r3, r3, #18
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	60fb      	str	r3, [r7, #12]
        break;
 800318e:	e013      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
      break;
 8003196:	e00f      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	60fb      	str	r3, [r7, #12]
        break;
 800319e:	e00b      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	60fb      	str	r3, [r7, #12]
        break;
 80031a6:	e007      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	09db      	lsrs	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
        break;
 80031ae:	e003      	b.n	80031b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	60fb      	str	r3, [r7, #12]
        break;
 80031b6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80031b8:	f7ff f904 	bl	80023c4 <HAL_GetREVID>
 80031bc:	4602      	mov	r2, r0
 80031be:	f241 0303 	movw	r3, #4099	; 0x1003
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d815      	bhi.n	80031f2 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <ADC_ConfigureBoostMode+0x1e0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d908      	bls.n	80031e0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031dc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031de:	e03e      	b.n	800325e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	e035      	b.n	800325e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a20      	ldr	r2, [pc, #128]	; (800327c <ADC_ConfigureBoostMode+0x1e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d808      	bhi.n	8003212 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	e025      	b.n	800325e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <ADC_ConfigureBoostMode+0x1e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d80a      	bhi.n	8003230 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322c:	609a      	str	r2, [r3, #8]
}
 800322e:	e016      	b.n	800325e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <ADC_ConfigureBoostMode+0x1ec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d80a      	bhi.n	800324e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	e007      	b.n	800325e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800325c:	609a      	str	r2, [r3, #8]
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	40022100 	.word	0x40022100
 8003270:	40022300 	.word	0x40022300
 8003274:	58026300 	.word	0x58026300
 8003278:	01312d00 	.word	0x01312d00
 800327c:	005f5e10 	.word	0x005f5e10
 8003280:	00bebc20 	.word	0x00bebc20
 8003284:	017d7840 	.word	0x017d7840

08003288 <LL_ADC_IsEnabled>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <LL_ADC_IsEnabled+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_IsEnabled+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_REG_IsConversionOngoing>:
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d101      	bne.n	80032c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b09f      	sub	sp, #124	; 0x7c
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0ba      	b.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5c      	ldr	r2, [pc, #368]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d102      	bne.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	e001      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e09d      	b.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ffbd 	bl	80032ae <LL_ADC_REG_IsConversionOngoing>
 8003334:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ffb7 	bl	80032ae <LL_ADC_REG_IsConversionOngoing>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d17f      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003348:	2b00      	cmp	r3, #0
 800334a:	d17c      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a47      	ldr	r2, [pc, #284]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a46      	ldr	r2, [pc, #280]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003360:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003362:	e000      	b.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003364:	4b45      	ldr	r3, [pc, #276]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003366:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d039      	beq.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	431a      	orrs	r2, r3
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a38      	ldr	r2, [pc, #224]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10e      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003396:	4836      	ldr	r0, [pc, #216]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003398:	f7ff ff76 	bl	8003288 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	4835      	ldr	r0, [pc, #212]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033a0:	f7ff ff72 	bl	8003288 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e008      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80033b4:	4832      	ldr	r0, [pc, #200]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033b6:	f7ff ff67 	bl	8003288 <LL_ADC_IsEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d047      	beq.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6811      	ldr	r1, [r2, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	430a      	orrs	r2, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	e03a      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10e      	bne.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003406:	f7ff ff3f 	bl	8003288 <LL_ADC_IsEnabled>
 800340a:	4604      	mov	r4, r0
 800340c:	4819      	ldr	r0, [pc, #100]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800340e:	f7ff ff3b 	bl	8003288 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	4323      	orrs	r3, r4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e008      	b.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003422:	4817      	ldr	r0, [pc, #92]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003424:	f7ff ff30 	bl	8003288 <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800343e:	4013      	ands	r3, r2
 8003440:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003442:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003444:	e009      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003458:	e000      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003464:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003468:	4618      	mov	r0, r3
 800346a:	377c      	adds	r7, #124	; 0x7c
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40022000 	.word	0x40022000
 8003474:	40022100 	.word	0x40022100
 8003478:	40022300 	.word	0x40022300
 800347c:	58026300 	.word	0x58026300
 8003480:	58026000 	.word	0x58026000
 8003484:	fffff0e0 	.word	0xfffff0e0

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	05fa0000 	.word	0x05fa0000

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	; (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	; (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff29 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff40 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff90 	bl	800357c <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5f 	bl	8003528 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff33 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa4 	bl	80035e4 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0b4      	b.n	8003824 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_DFSDM_ChannelInit+0x184>)
 80036bc:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <HAL_DFSDM_ChannelInit+0x188>)
 80036c0:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <HAL_DFSDM_ChannelInit+0x18c>)
 80036c4:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8b4 	bl	8003838 <DFSDM_GetChannelFromInstance>
 80036d0:	4603      	mov	r3, r0
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0a0      	b.n	8003824 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fef2 	bl	80014cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d125      	bne.n	8003746 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	791b      	ldrb	r3, [r3, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	3b01      	subs	r3, #1
 8003732:	041b      	lsls	r3, r3, #16
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003754:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003764:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800376a:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 020f 	bic.w	r2, r2, #15
 8003782:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80037aa:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f002 0207 	and.w	r2, r2, #7
 80037d6:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003802:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f811 	bl	8003838 <DFSDM_GetChannelFromInstance>
 8003816:	4603      	mov	r3, r0
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	240000fc 	.word	0x240000fc
 8003830:	24000100 	.word	0x24000100
 8003834:	40017000 	.word	0x40017000

08003838 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d102      	bne.n	800384e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e02b      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d102      	bne.n	800385c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e024      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <DFSDM_GetChannelFromInstance+0x84>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003864:	2302      	movs	r3, #2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e01d      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <DFSDM_GetChannelFromInstance+0x88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d102      	bne.n	8003878 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003872:	2303      	movs	r3, #3
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e016      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d102      	bne.n	8003886 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003880:	2304      	movs	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e00f      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <DFSDM_GetChannelFromInstance+0x90>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d102      	bne.n	8003894 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800388e:	2305      	movs	r3, #5
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e008      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <DFSDM_GetChannelFromInstance+0x94>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800389c:	2306      	movs	r3, #6
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e001      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
      channel = 7;
 80038a2:	2307      	movs	r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40017000 	.word	0x40017000
 80038b8:	40017020 	.word	0x40017020
 80038bc:	40017040 	.word	0x40017040
 80038c0:	40017060 	.word	0x40017060
 80038c4:	40017080 	.word	0x40017080
 80038c8:	400170a0 	.word	0x400170a0
 80038cc:	400170c0 	.word	0x400170c0

080038d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0c6      	b.n	8003a70 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fe46 	bl	800157c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2223      	movs	r2, #35	; 0x23
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f6:	4b60      	ldr	r3, [pc, #384]	; (8003a78 <HAL_ETH_Init+0x1a8>)
 80038f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038fc:	4a5e      	ldr	r2, [pc, #376]	; (8003a78 <HAL_ETH_Init+0x1a8>)
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <HAL_ETH_Init+0x1a8>)
 8003908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7a1b      	ldrb	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fe fd5d 	bl	80023dc <HAL_SYSCFG_ETHInterfaceSelect>
 8003922:	e003      	b.n	800392c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003924:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003928:	f7fe fd58 	bl	80023dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003944:	f7fe fd10 	bl	8002368 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800394a:	e00f      	b.n	800396c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800394c:	f7fe fd0c 	bl	8002368 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800395a:	d907      	bls.n	800396c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	22e0      	movs	r2, #224	; 0xe0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e081      	b.n	8003a70 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e6      	bne.n	800394c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fac0 	bl	8003f04 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003984:	f002 fc2c 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <HAL_ETH_Init+0x1ac>)
 800398c:	fba3 2302 	umull	r2, r3, r3, r2
 8003990:	0c9a      	lsrs	r2, r3, #18
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3a01      	subs	r2, #1
 8003998:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa13 	bl	8003dc8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80039b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80039bc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	22e0      	movs	r2, #224	; 0xe0
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e04a      	b.n	8003a70 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f241 1308 	movw	r3, #4360	; 0x1108
 80039e2:	4413      	add	r3, r2
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_ETH_Init+0x1b0>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6952      	ldr	r2, [r2, #20]
 80039ee:	0052      	lsls	r2, r2, #1
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6809      	ldr	r1, [r1, #0]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80039fa:	440b      	add	r3, r1
 80039fc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fad8 	bl	8003fb4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb1c 	bl	8004042 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	3305      	adds	r3, #5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	3303      	adds	r3, #3
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	061a      	lsls	r2, r3, #24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	3302      	adds	r3, #2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3301      	adds	r3, #1
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a56:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2210      	movs	r2, #16
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	431bde83 	.word	0x431bde83
 8003a80:	ffff8001 	.word	0xffff8001

08003a84 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003a96:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	791b      	ldrb	r3, [r3, #4]
 8003a9c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003a9e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	7b1b      	ldrb	r3, [r3, #12]
 8003aa4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003aa6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7b5b      	ldrb	r3, [r3, #13]
 8003aac:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003aae:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	7b9b      	ldrb	r3, [r3, #14]
 8003ab4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ab6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	7bdb      	ldrb	r3, [r3, #15]
 8003abc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003abe:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	7c12      	ldrb	r2, [r2, #16]
 8003ac4:	2a00      	cmp	r2, #0
 8003ac6:	d102      	bne.n	8003ace <ETH_SetMACConfig+0x4a>
 8003ac8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003acc:	e000      	b.n	8003ad0 <ETH_SetMACConfig+0x4c>
 8003ace:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ad0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	7c52      	ldrb	r2, [r2, #17]
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d102      	bne.n	8003ae0 <ETH_SetMACConfig+0x5c>
 8003ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ade:	e000      	b.n	8003ae2 <ETH_SetMACConfig+0x5e>
 8003ae0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ae2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	7c9b      	ldrb	r3, [r3, #18]
 8003ae8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003aea:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003af0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003af6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	7f1b      	ldrb	r3, [r3, #28]
 8003afc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003afe:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	7f5b      	ldrb	r3, [r3, #29]
 8003b04:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003b06:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	7f92      	ldrb	r2, [r2, #30]
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d102      	bne.n	8003b16 <ETH_SetMACConfig+0x92>
 8003b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b14:	e000      	b.n	8003b18 <ETH_SetMACConfig+0x94>
 8003b16:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003b18:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7fdb      	ldrb	r3, [r3, #31]
 8003b1e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003b20:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d102      	bne.n	8003b32 <ETH_SetMACConfig+0xae>
 8003b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b30:	e000      	b.n	8003b34 <ETH_SetMACConfig+0xb0>
 8003b32:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003b34:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003b3a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b42:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003b44:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <ETH_SetMACConfig+0x22c>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b6e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b70:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b78:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003b7a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b82:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003b84:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d102      	bne.n	8003b96 <ETH_SetMACConfig+0x112>
 8003b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b94:	e000      	b.n	8003b98 <ETH_SetMACConfig+0x114>
 8003b96:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003b98:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <ETH_SetMACConfig+0x230>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	68f9      	ldr	r1, [r7, #12]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <ETH_SetMACConfig+0x234>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003be0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003be6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d101      	bne.n	8003bf6 <ETH_SetMACConfig+0x172>
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	e000      	b.n	8003bf8 <ETH_SetMACConfig+0x174>
 8003bf6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003bf8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c0a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003c20:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c28:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f023 0103 	bic.w	r1, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003c4e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d101      	bne.n	8003c72 <ETH_SetMACConfig+0x1ee>
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	e000      	b.n	8003c74 <ETH_SetMACConfig+0x1f0>
 8003c72:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003c74:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003c7c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c7e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003c86:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c94:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	00048083 	.word	0x00048083
 8003cb4:	c0f88000 	.word	0xc0f88000
 8003cb8:	fffffef0 	.word	0xfffffef0

08003cbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <ETH_SetDMAConfig+0xf8>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003ce2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	791b      	ldrb	r3, [r3, #4]
 8003ce8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	7b1b      	ldrb	r3, [r3, #12]
 8003cf4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f241 0304 	movw	r3, #4100	; 0x1004
 8003d02:	4413      	add	r3, r2
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <ETH_SetDMAConfig+0xfc>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	f241 0304 	movw	r3, #4100	; 0x1004
 8003d16:	440b      	add	r3, r1
 8003d18:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	7b5b      	ldrb	r3, [r3, #13]
 8003d1e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <ETH_SetDMAConfig+0x100>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003d42:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	7d1b      	ldrb	r3, [r3, #20]
 8003d4c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d4e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	7f5b      	ldrb	r3, [r3, #29]
 8003d54:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d62:	4413      	add	r3, r2
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <ETH_SetDMAConfig+0x104>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d76:	440b      	add	r3, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	7f1b      	ldrb	r3, [r3, #28]
 8003d7e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d90:	4413      	add	r3, r2
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <ETH_SetDMAConfig+0x108>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6811      	ldr	r1, [r2, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	f241 1308 	movw	r3, #4360	; 0x1108
 8003da4:	440b      	add	r3, r1
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	ffff87fd 	.word	0xffff87fd
 8003db8:	ffff2ffe 	.word	0xffff2ffe
 8003dbc:	fffec000 	.word	0xfffec000
 8003dc0:	ffc0efef 	.word	0xffc0efef
 8003dc4:	7fc0ffff 	.word	0x7fc0ffff

08003dc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0a4      	sub	sp, #144	; 0x90
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003e20:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e42:	2300      	movs	r3, #0
 8003e44:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003e60:	2320      	movs	r3, #32
 8003e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003e72:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003e84:	2302      	movs	r3, #2
 8003e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fde6 	bl	8003a84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ed2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ed6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003edc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ee0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003ee8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fee1 	bl	8003cbc <ETH_SetDMAConfig>
}
 8003efa:	bf00      	nop
 8003efc:	3790      	adds	r7, #144	; 0x90
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f1e:	f002 f95f 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8003f22:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d908      	bls.n	8003f3e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d804      	bhi.n	8003f3e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e027      	b.n	8003f8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d908      	bls.n	8003f58 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d804      	bhi.n	8003f58 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e01a      	b.n	8003f8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d903      	bls.n	8003f68 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d911      	bls.n	8003f8c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a10      	ldr	r2, [pc, #64]	; (8003fac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d908      	bls.n	8003f82 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d804      	bhi.n	8003f82 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e005      	b.n	8003f8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e000      	b.n	8003f8e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003f8c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	01312cff 	.word	0x01312cff
 8003fa4:	02160ebf 	.word	0x02160ebf
 8003fa8:	039386ff 	.word	0x039386ff
 8003fac:	05f5e0ff 	.word	0x05f5e0ff
 8003fb0:	08f0d17f 	.word	0x08f0d17f

08003fb4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e01d      	b.n	8003ffe <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	3206      	adds	r2, #6
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d9de      	bls.n	8003fc2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	f241 132c 	movw	r3, #4396	; 0x112c
 8004012:	4413      	add	r3, r2
 8004014:	2203      	movs	r2, #3
 8004016:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68d9      	ldr	r1, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f241 1314 	movw	r3, #4372	; 0x1114
 8004024:	4413      	add	r3, r2
 8004026:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e024      	b.n	800409a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6919      	ldr	r1, [r3, #16]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	440b      	add	r3, r1
 8004060:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	330a      	adds	r3, #10
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d9d7      	bls.n	8004050 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f241 1330 	movw	r3, #4400	; 0x1130
 80040c6:	4413      	add	r3, r2
 80040c8:	2203      	movs	r2, #3
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6919      	ldr	r1, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80040d8:	4413      	add	r3, r2
 80040da:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	f241 1328 	movw	r3, #4392	; 0x1128
 80040ec:	4413      	add	r3, r2
 80040ee:	6019      	str	r1, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800410a:	4b89      	ldr	r3, [pc, #548]	; (8004330 <HAL_GPIO_Init+0x234>)
 800410c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800410e:	e194      	b.n	800443a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8186 	beq.w	8004434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x3c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b12      	cmp	r3, #18
 8004136:	d123      	bne.n	8004180 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	08da      	lsrs	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3208      	adds	r2, #8
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	08da      	lsrs	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3208      	adds	r2, #8
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d00b      	beq.n	80041d4 <HAL_GPIO_Init+0xd8>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d007      	beq.n	80041d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041c8:	2b11      	cmp	r3, #17
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b12      	cmp	r3, #18
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0201 	and.w	r2, r3, #1
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80e0 	beq.w	8004434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_GPIO_Init+0x238>)
 8004276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800427a:	4a2e      	ldr	r2, [pc, #184]	; (8004334 <HAL_GPIO_Init+0x238>)
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_GPIO_Init+0x238>)
 8004286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <HAL_GPIO_Init+0x23c>)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	3302      	adds	r3, #2
 800429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	220f      	movs	r2, #15
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_GPIO_Init+0x240>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d052      	beq.n	8004364 <HAL_GPIO_Init+0x268>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_GPIO_Init+0x244>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_GPIO_Init+0x22e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_GPIO_Init+0x248>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02b      	beq.n	8004326 <HAL_GPIO_Init+0x22a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_GPIO_Init+0x24c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d025      	beq.n	8004322 <HAL_GPIO_Init+0x226>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_GPIO_Init+0x250>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01f      	beq.n	800431e <HAL_GPIO_Init+0x222>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <HAL_GPIO_Init+0x254>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d019      	beq.n	800431a <HAL_GPIO_Init+0x21e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <HAL_GPIO_Init+0x258>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x21a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_GPIO_Init+0x25c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00d      	beq.n	8004312 <HAL_GPIO_Init+0x216>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_GPIO_Init+0x260>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <HAL_GPIO_Init+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_GPIO_Init+0x264>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_GPIO_Init+0x20e>
 8004306:	2309      	movs	r3, #9
 8004308:	e02d      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800430a:	230a      	movs	r3, #10
 800430c:	e02b      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800430e:	2308      	movs	r3, #8
 8004310:	e029      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 8004312:	2307      	movs	r3, #7
 8004314:	e027      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 8004316:	2306      	movs	r3, #6
 8004318:	e025      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800431a:	2305      	movs	r3, #5
 800431c:	e023      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800431e:	2304      	movs	r3, #4
 8004320:	e021      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 8004322:	2303      	movs	r3, #3
 8004324:	e01f      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 8004326:	2302      	movs	r3, #2
 8004328:	e01d      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800432a:	2301      	movs	r3, #1
 800432c:	e01b      	b.n	8004366 <HAL_GPIO_Init+0x26a>
 800432e:	bf00      	nop
 8004330:	58000080 	.word	0x58000080
 8004334:	58024400 	.word	0x58024400
 8004338:	58000400 	.word	0x58000400
 800433c:	58020000 	.word	0x58020000
 8004340:	58020400 	.word	0x58020400
 8004344:	58020800 	.word	0x58020800
 8004348:	58020c00 	.word	0x58020c00
 800434c:	58021000 	.word	0x58021000
 8004350:	58021400 	.word	0x58021400
 8004354:	58021800 	.word	0x58021800
 8004358:	58021c00 	.word	0x58021c00
 800435c:	58022000 	.word	0x58022000
 8004360:	58022400 	.word	0x58022400
 8004364:	2300      	movs	r3, #0
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	f002 0203 	and.w	r2, r2, #3
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	4093      	lsls	r3, r2
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004376:	4938      	ldr	r1, [pc, #224]	; (8004458 <HAL_GPIO_Init+0x35c>)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800442c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f ae63 	bne.w	8004110 <HAL_GPIO_Init+0x14>
  }
}
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	58000400 	.word	0x58000400

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800446c:	787b      	ldrb	r3, [r7, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004478:	e003      	b.n	8004482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd f90c 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e006      	b.n	8004518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d104      	bne.n	800452a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_I2C_Init+0x11c>)
 8004536:	430b      	orrs	r3, r1
 8004538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	ea42 0103 	orr.w	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	02008000 	.word	0x02008000

080045b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d138      	bne.n	8004638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e032      	b.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d139      	bne.n	80046d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004666:	2302      	movs	r3, #2
 8004668:	e033      	b.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2224      	movs	r2, #36	; 0x24
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0bf      	b.n	8004872 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd f82e 	bl	8001768 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004722:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004738:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b4a      	ldr	r3, [pc, #296]	; (800487c <HAL_LTDC_Init+0x19c>)
 8004754:	400b      	ands	r3, r1
 8004756:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68d9      	ldr	r1, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_LTDC_Init+0x19c>)
 8004782:	400b      	ands	r3, r1
 8004784:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68d9      	ldr	r1, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6919      	ldr	r1, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b33      	ldr	r3, [pc, #204]	; (800487c <HAL_LTDC_Init+0x19c>)
 80047b0:	400b      	ands	r3, r1
 80047b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6919      	ldr	r1, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6959      	ldr	r1, [r3, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_LTDC_Init+0x19c>)
 80047de:	400b      	ands	r3, r1
 80047e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6959      	ldr	r1, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0206 	orr.w	r2, r2, #6
 800484e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	f000f800 	.word	0xf000f800

08004880 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d023      	beq.n	80048ea <HAL_LTDC_IRQHandler+0x6a>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01e      	beq.n	80048ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0204 	bic.w	r2, r2, #4
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2204      	movs	r2, #4
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f86f 	bl	80049c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d023      	beq.n	800493c <HAL_LTDC_IRQHandler+0xbc>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01e      	beq.n	800493c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0202 	bic.w	r2, r2, #2
 800490c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2202      	movs	r2, #2
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800491c:	f043 0202 	orr.w	r2, r3, #2
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2204      	movs	r2, #4
 800492a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f846 	bl	80049c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01b      	beq.n	800497e <HAL_LTDC_IRQHandler+0xfe>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d016      	beq.n	800497e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f82f 	bl	80049dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_LTDC_IRQHandler+0x140>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0208 	bic.w	r2, r2, #8
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2208      	movs	r2, #8
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f818 	bl	80049f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_LTDC_ConfigLayer+0x1a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e02c      	b.n	8004a78 <HAL_LTDC_ConfigLayer+0x74>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2134      	movs	r1, #52	; 0x34
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f811 	bl	8004a80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bdb0      	pop	{r4, r5, r7, pc}

08004a80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	; 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	4413      	add	r3, r2
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	4413      	add	r3, r2
 8004aae:	3384      	adds	r3, #132	; 0x84
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	01d2      	lsls	r2, r2, #7
 8004abc:	440a      	add	r2, r1
 8004abe:	3284      	adds	r2, #132	; 0x84
 8004ac0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ac4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	4413      	add	r3, r2
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	01db      	lsls	r3, r3, #7
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3384      	adds	r3, #132	; 0x84
 8004ae8:	4619      	mov	r1, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afe:	4413      	add	r3, r2
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	01db      	lsls	r3, r3, #7
 8004b0e:	4413      	add	r3, r2
 8004b10:	3384      	adds	r3, #132	; 0x84
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	01d2      	lsls	r2, r2, #7
 8004b1e:	440a      	add	r2, r1
 8004b20:	3284      	adds	r2, #132	; 0x84
 8004b22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b36:	4413      	add	r3, r2
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	440b      	add	r3, r1
 8004b46:	3384      	adds	r3, #132	; 0x84
 8004b48:	4619      	mov	r1, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	01db      	lsls	r3, r3, #7
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3384      	adds	r3, #132	; 0x84
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4611      	mov	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	01d2      	lsls	r2, r2, #7
 8004b6a:	440a      	add	r2, r1
 8004b6c:	3284      	adds	r2, #132	; 0x84
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4413      	add	r3, r2
 8004b80:	3384      	adds	r3, #132	; 0x84
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	01db      	lsls	r3, r3, #7
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3384      	adds	r3, #132	; 0x84
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3384      	adds	r3, #132	; 0x84
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	440b      	add	r3, r1
 8004be6:	3384      	adds	r3, #132	; 0x84
 8004be8:	4619      	mov	r1, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	01db      	lsls	r3, r3, #7
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3384      	adds	r3, #132	; 0x84
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	4611      	mov	r1, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	01d2      	lsls	r2, r2, #7
 8004c0a:	440a      	add	r2, r1
 8004c0c:	3284      	adds	r2, #132	; 0x84
 8004c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	01db      	lsls	r3, r3, #7
 8004c1e:	4413      	add	r3, r2
 8004c20:	3384      	adds	r3, #132	; 0x84
 8004c22:	461a      	mov	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	01db      	lsls	r3, r3, #7
 8004c34:	4413      	add	r3, r2
 8004c36:	3384      	adds	r3, #132	; 0x84
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	440b      	add	r3, r1
 8004c46:	3384      	adds	r3, #132	; 0x84
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4b58      	ldr	r3, [pc, #352]	; (8004dac <LTDC_SetConfig+0x32c>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	6809      	ldr	r1, [r1, #0]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	01c9      	lsls	r1, r1, #7
 8004c62:	4401      	add	r1, r0
 8004c64:	3184      	adds	r1, #132	; 0x84
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	01db      	lsls	r3, r3, #7
 8004c74:	4413      	add	r3, r2
 8004c76:	3384      	adds	r3, #132	; 0x84
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	01db      	lsls	r3, r3, #7
 8004c84:	4413      	add	r3, r2
 8004c86:	3384      	adds	r3, #132	; 0x84
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	3384      	adds	r3, #132	; 0x84
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004cac:	2304      	movs	r3, #4
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e01b      	b.n	8004cea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d102      	bne.n	8004cc0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e014      	b.n	8004cea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00b      	beq.n	8004ce0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d007      	beq.n	8004ce0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d003      	beq.n	8004ce0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	d102      	bne.n	8004ce6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e001      	b.n	8004cea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	01db      	lsls	r3, r3, #7
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3384      	adds	r3, #132	; 0x84
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	01d2      	lsls	r2, r2, #7
 8004d04:	440a      	add	r2, r1
 8004d06:	3284      	adds	r2, #132	; 0x84
 8004d08:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	041a      	lsls	r2, r3, #16
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1acb      	subs	r3, r1, r3
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	6809      	ldr	r1, [r1, #0]
 8004d30:	4608      	mov	r0, r1
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	01c9      	lsls	r1, r1, #7
 8004d36:	4401      	add	r1, r0
 8004d38:	3184      	adds	r1, #132	; 0x84
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	01db      	lsls	r3, r3, #7
 8004d48:	4413      	add	r3, r2
 8004d4a:	3384      	adds	r3, #132	; 0x84
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	440b      	add	r3, r1
 8004d5a:	3384      	adds	r3, #132	; 0x84
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <LTDC_SetConfig+0x330>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	01db      	lsls	r3, r3, #7
 8004d6e:	4413      	add	r3, r2
 8004d70:	3384      	adds	r3, #132	; 0x84
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	01db      	lsls	r3, r3, #7
 8004d84:	4413      	add	r3, r2
 8004d86:	3384      	adds	r3, #132	; 0x84
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	01d2      	lsls	r2, r2, #7
 8004d94:	440a      	add	r2, r1
 8004d96:	3284      	adds	r2, #132	; 0x84
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3724      	adds	r7, #36	; 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	fffff8f8 	.word	0xfffff8f8
 8004db0:	fffff800 	.word	0xfffff800

08004db4 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e049      	b.n	8004e5e <HAL_NOR_Init+0xaa>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7fd f8cc 	bl	8001f7c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3308      	adds	r3, #8
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f007 f8fc 	bl	800bfec <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	f007 f96c 	bl	800c0dc <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6858      	ldr	r0, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	f007 f9b3 	bl	800c17c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	6892      	ldr	r2, [r2, #8]
 8004e1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	f041 0101 	orr.w	r1, r1, #1
 8004e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_NOR_Init+0xb4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e002      	b.n	8004e48 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_NOR_Init+0xb4>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_NOR_Init+0xb8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <HAL_NOR_Init+0xb8>)
 8004e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	24000120 	.word	0x24000120
 8004e6c:	52004000 	.word	0x52004000

08004e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b08f      	sub	sp, #60	; 0x3c
 8004e74:	af0a      	add	r7, sp, #40	; 0x28
 8004e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e116      	b.n	80050b0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fc feb9 	bl	8001c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f007 ffbd 	bl	800ce40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	687e      	ldr	r6, [r7, #4]
 8004ece:	466d      	mov	r5, sp
 8004ed0:	f106 0410 	add.w	r4, r6, #16
 8004ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ee4:	1d33      	adds	r3, r6, #4
 8004ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ee8:	6838      	ldr	r0, [r7, #0]
 8004eea:	f007 ff47 	bl	800cd7c <USB_CoreInit>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0d7      	b.n	80050b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f007 ffab 	bl	800ce62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e04a      	b.n	8004fa8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	333d      	adds	r3, #61	; 0x3d
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	333c      	adds	r3, #60	; 0x3c
 8004f36:	7bfa      	ldrb	r2, [r7, #15]
 8004f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	b298      	uxth	r0, r3
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3342      	adds	r3, #66	; 0x42
 8004f4e:	4602      	mov	r2, r0
 8004f50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	333f      	adds	r3, #63	; 0x3f
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f66:	7bfa      	ldrb	r2, [r7, #15]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3344      	adds	r3, #68	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3348      	adds	r3, #72	; 0x48
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3350      	adds	r3, #80	; 0x50
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d3af      	bcc.n	8004f12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e044      	b.n	8005042 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fb8:	7bfa      	ldrb	r2, [r7, #15]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fce:	7bfa      	ldrb	r2, [r7, #15]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	3301      	adds	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	7bfa      	ldrb	r2, [r7, #15]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d3b5      	bcc.n	8004fb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	687e      	ldr	r6, [r7, #4]
 8005054:	466d      	mov	r5, sp
 8005056:	f106 0410 	add.w	r4, r6, #16
 800505a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800505e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005066:	e885 0003 	stmia.w	r5, {r0, r1}
 800506a:	1d33      	adds	r3, r6, #4
 800506c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f007 ff22 	bl	800ceb8 <USB_DevInit>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e014      	b.n	80050b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f80a 	bl	80050b8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f008 f8c4 	bl	800d236 <USB_DevDisconnect>

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_PCDEx_ActivateLPM+0x44>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	10000003 	.word	0x10000003

08005100 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_PWREx_ConfigSupply+0x70>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d00a      	beq.n	800512a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_PWREx_ConfigSupply+0x70>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e01f      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e01d      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_PWREx_ConfigSupply+0x70>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	490f      	ldr	r1, [pc, #60]	; (8005170 <HAL_PWREx_ConfigSupply+0x70>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4313      	orrs	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800513a:	f7fd f915 	bl	8002368 <HAL_GetTick>
 800513e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005140:	e009      	b.n	8005156 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005142:	f7fd f911 	bl	8002368 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005150:	d901      	bls.n	8005156 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e007      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_PWREx_ConfigSupply+0x70>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d1ee      	bne.n	8005142 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	58024800 	.word	0x58024800

08005174 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800517e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005182:	60d3      	str	r3, [r2, #12]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58024800 	.word	0x58024800

08005194 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi: QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7fd f8e4 	bl	8002368 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e073      	b.n	8005294 <HAL_QSPI_Init+0x100>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_QSPI_Init+0x28>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e06b      	b.n	8005294 <HAL_QSPI_Init+0x100>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fc fb63 	bl	80018a4 <HAL_QSPI_MspInit>
#endif
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80051de:	f241 3188 	movw	r1, #5000	; 0x1388
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f85e 	bl	80052a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	2120      	movs	r1, #32
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f856 	bl	80052c0 <QSPI_WaitFlagStateUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d135      	bne.n	800528a <HAL_QSPI_Init+0xf6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_QSPI_Init+0x108>)
 8005226:	4013      	ands	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6852      	ldr	r2, [r2, #4]
 800522c:	0611      	lsls	r1, r2, #24
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68d2      	ldr	r2, [r2, #12]
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	69d2      	ldr	r2, [r2, #28]
 8005238:	4311      	orrs	r1, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6a12      	ldr	r2, [r2, #32]
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	430b      	orrs	r3, r1
 8005246:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_QSPI_Init+0x10c>)
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6912      	ldr	r2, [r2, #16]
 8005256:	0411      	lsls	r1, r2, #16
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6952      	ldr	r2, [r2, #20]
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6992      	ldr	r2, [r2, #24]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005292:	7afb      	ldrb	r3, [r7, #11]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	00ffff2f 	.word	0x00ffff2f
 80052a0:	ffe0f8fe 	.word	0xffe0f8fe

080052a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi: QSPI handle.
  * @param  Timeout: Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80052d0:	e01a      	b.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d016      	beq.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd f845 	bl	8002368 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2204      	movs	r2, #4
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00e      	b.n	8005326 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	429a      	cmp	r2, r3
 8005322:	d1d6      	bne.n	80052d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	; 0x30
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e3c4      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8087 	beq.w	800545e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005350:	4ba2      	ldr	r3, [pc, #648]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800535a:	4ba0      	ldr	r3, [pc, #640]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b10      	cmp	r3, #16
 8005364:	d007      	beq.n	8005376 <HAL_RCC_OscConfig+0x46>
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b18      	cmp	r3, #24
 800536a:	d110      	bne.n	800538e <HAL_RCC_OscConfig+0x5e>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d10b      	bne.n	800538e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005376:	4b99      	ldr	r3, [pc, #612]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d06c      	beq.n	800545c <HAL_RCC_OscConfig+0x12c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d168      	bne.n	800545c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e39e      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d106      	bne.n	80053a6 <HAL_RCC_OscConfig+0x76>
 8005398:	4b90      	ldr	r3, [pc, #576]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a8f      	ldr	r2, [pc, #572]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800539e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e02e      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x98>
 80053ae:	4b8b      	ldr	r3, [pc, #556]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a8a      	ldr	r2, [pc, #552]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b88      	ldr	r3, [pc, #544]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a87      	ldr	r2, [pc, #540]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0xbc>
 80053d2:	4b82      	ldr	r3, [pc, #520]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a81      	ldr	r2, [pc, #516]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053ec:	4b7b      	ldr	r3, [pc, #492]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a7a      	ldr	r2, [pc, #488]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b78      	ldr	r3, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc ffac 	bl	8002368 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005414:	f7fc ffa8 	bl	8002368 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e352      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005426:	4b6d      	ldr	r3, [pc, #436]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0xe4>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc ff98 	bl	8002368 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543c:	f7fc ff94 	bl	8002368 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e33e      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x10c>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8092 	beq.w	8005590 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546c:	4b5b      	ldr	r3, [pc, #364]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005476:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_RCC_OscConfig+0x162>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b18      	cmp	r3, #24
 8005486:	d12d      	bne.n	80054e4 <HAL_RCC_OscConfig+0x1b4>
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d128      	bne.n	80054e4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005492:	4b52      	ldr	r3, [pc, #328]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_RCC_OscConfig+0x17a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e310      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054aa:	f7fc ff8b 	bl	80023c4 <HAL_GetREVID>
 80054ae:	4602      	mov	r2, r0
 80054b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d80a      	bhi.n	80054ce <HAL_RCC_OscConfig+0x19e>
 80054b8:	4b48      	ldr	r3, [pc, #288]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	4945      	ldr	r1, [pc, #276]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054cc:	e060      	b.n	8005590 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	493f      	ldr	r1, [pc, #252]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e2:	e055      	b.n	8005590 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d038      	beq.n	800555e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054ec:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 0219 	bic.w	r2, r3, #25
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4938      	ldr	r1, [pc, #224]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fc ff33 	bl	8002368 <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005506:	f7fc ff2f 	bl	8002368 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e2d9      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005518:	4b30      	ldr	r3, [pc, #192]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005524:	f7fc ff4e 	bl	80023c4 <HAL_GetREVID>
 8005528:	4602      	mov	r2, r0
 800552a:	f241 0303 	movw	r3, #4099	; 0x1003
 800552e:	429a      	cmp	r2, r3
 8005530:	d80a      	bhi.n	8005548 <HAL_RCC_OscConfig+0x218>
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	031b      	lsls	r3, r3, #12
 8005540:	4926      	ldr	r1, [pc, #152]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
 8005546:	e023      	b.n	8005590 <HAL_RCC_OscConfig+0x260>
 8005548:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	4921      	ldr	r1, [pc, #132]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
 800555c:	e018      	b.n	8005590 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fc fefd 	bl	8002368 <HAL_GetTick>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005572:	f7fc fef9 	bl	8002368 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e2a3      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8091 	beq.w	80056c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d007      	beq.n	80055c4 <HAL_RCC_OscConfig+0x294>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b18      	cmp	r3, #24
 80055b8:	d12f      	bne.n	800561a <HAL_RCC_OscConfig+0x2ea>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d12a      	bne.n	800561a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2b0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d003      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e277      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
 80055dc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055e0:	f7fc fef0 	bl	80023c4 <HAL_GetREVID>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d80a      	bhi.n	8005604 <HAL_RCC_OscConfig+0x2d4>
 80055ee:	4ba2      	ldr	r3, [pc, #648]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	069b      	lsls	r3, r3, #26
 80055fc:	499e      	ldr	r1, [pc, #632]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005602:	e05d      	b.n	80056c0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005604:	4b9c      	ldr	r3, [pc, #624]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	4999      	ldr	r1, [pc, #612]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005614:	4313      	orrs	r3, r2
 8005616:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005618:	e052      	b.n	80056c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d035      	beq.n	800568e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005622:	4b95      	ldr	r3, [pc, #596]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a94      	ldr	r2, [pc, #592]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562e:	f7fc fe9b 	bl	8002368 <HAL_GetTick>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005636:	f7fc fe97 	bl	8002368 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e241      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005648:	4b8b      	ldr	r3, [pc, #556]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005654:	f7fc feb6 	bl	80023c4 <HAL_GetREVID>
 8005658:	4602      	mov	r2, r0
 800565a:	f241 0303 	movw	r3, #4099	; 0x1003
 800565e:	429a      	cmp	r2, r3
 8005660:	d80a      	bhi.n	8005678 <HAL_RCC_OscConfig+0x348>
 8005662:	4b85      	ldr	r3, [pc, #532]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	069b      	lsls	r3, r3, #26
 8005670:	4981      	ldr	r1, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005672:	4313      	orrs	r3, r2
 8005674:	604b      	str	r3, [r1, #4]
 8005676:	e023      	b.n	80056c0 <HAL_RCC_OscConfig+0x390>
 8005678:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	497c      	ldr	r1, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005688:	4313      	orrs	r3, r2
 800568a:	60cb      	str	r3, [r1, #12]
 800568c:	e018      	b.n	80056c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800568e:	4b7a      	ldr	r3, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a79      	ldr	r2, [pc, #484]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fc fe65 	bl	8002368 <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056a2:	f7fc fe61 	bl	8002368 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e20b      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056b4:	4b70      	ldr	r3, [pc, #448]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d036      	beq.n	800573a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d019      	beq.n	8005708 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d4:	4b68      	ldr	r3, [pc, #416]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	4a67      	ldr	r2, [pc, #412]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fc fe42 	bl	8002368 <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fc fe3e 	bl	8002368 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e1e8      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056fa:	4b5f      	ldr	r3, [pc, #380]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x3b8>
 8005706:	e018      	b.n	800573a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800570a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570c:	4a5a      	ldr	r2, [pc, #360]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005714:	f7fc fe28 	bl	8002368 <HAL_GetTick>
 8005718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571c:	f7fc fe24 	bl	8002368 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e1ce      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800572e:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d036      	beq.n	80057b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d019      	beq.n	8005782 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800574e:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a49      	ldr	r2, [pc, #292]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005758:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800575a:	f7fc fe05 	bl	8002368 <HAL_GetTick>
 800575e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005762:	f7fc fe01 	bl	8002368 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e1ab      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005774:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x432>
 8005780:	e018      	b.n	80057b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005782:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800578e:	f7fc fdeb 	bl	8002368 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005796:	f7fc fde7 	bl	8002368 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e191      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057a8:	4b33      	ldr	r3, [pc, #204]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8086 	beq.w	80058ce <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x54c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2d      	ldr	r2, [pc, #180]	; (800587c <HAL_RCC_OscConfig+0x54c>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ce:	f7fc fdcb 	bl	8002368 <HAL_GetTick>
 80057d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057d6:	f7fc fdc7 	bl	8002368 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b64      	cmp	r3, #100	; 0x64
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e171      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_RCC_OscConfig+0x54c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x4da>
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
 8005808:	e02d      	b.n	8005866 <HAL_RCC_OscConfig+0x536>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x4fc>
 8005812:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005824:	f023 0304 	bic.w	r3, r3, #4
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
 800582a:	e01c      	b.n	8005866 <HAL_RCC_OscConfig+0x536>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b05      	cmp	r3, #5
 8005832:	d10c      	bne.n	800584e <HAL_RCC_OscConfig+0x51e>
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a0f      	ldr	r2, [pc, #60]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	e00b      	b.n	8005866 <HAL_RCC_OscConfig+0x536>
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a09      	ldr	r2, [pc, #36]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6713      	str	r3, [r2, #112]	; 0x70
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	4a06      	ldr	r2, [pc, #24]	; (8005878 <HAL_RCC_OscConfig+0x548>)
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01a      	beq.n	80058a4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586e:	f7fc fd7b 	bl	8002368 <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005874:	e00f      	b.n	8005896 <HAL_RCC_OscConfig+0x566>
 8005876:	bf00      	nop
 8005878:	58024400 	.word	0x58024400
 800587c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7fc fd72 	bl	8002368 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e11a      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005896:	4b8f      	ldr	r3, [pc, #572]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ee      	beq.n	8005880 <HAL_RCC_OscConfig+0x550>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a4:	f7fc fd60 	bl	8002368 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fc fd5c 	bl	8002368 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e104      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c2:	4b84      	ldr	r3, [pc, #528]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ee      	bne.n	80058ac <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80f9 	beq.w	8005aca <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058d8:	4b7e      	ldr	r3, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e0:	2b18      	cmp	r3, #24
 80058e2:	f000 80b4 	beq.w	8005a4e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	f040 8095 	bne.w	8005a1a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b78      	ldr	r3, [pc, #480]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a77      	ldr	r2, [pc, #476]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80058f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fc fd34 	bl	8002368 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005904:	f7fc fd30 	bl	8002368 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e0da      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005916:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005922:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005926:	4b6c      	ldr	r3, [pc, #432]	; (8005ad8 <HAL_RCC_OscConfig+0x7a8>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	430a      	orrs	r2, r1
 8005936:	4967      	ldr	r1, [pc, #412]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005938:	4313      	orrs	r3, r2
 800593a:	628b      	str	r3, [r1, #40]	; 0x28
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	3b01      	subs	r3, #1
 8005942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	3b01      	subs	r3, #1
 800594c:	025b      	lsls	r3, r3, #9
 800594e:	b29b      	uxth	r3, r3
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	3b01      	subs	r3, #1
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005964:	3b01      	subs	r3, #1
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800596c:	4959      	ldr	r1, [pc, #356]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 800596e:	4313      	orrs	r3, r2
 8005970:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005972:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4a57      	ldr	r2, [pc, #348]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800597e:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005982:	4b56      	ldr	r3, [pc, #344]	; (8005adc <HAL_RCC_OscConfig+0x7ac>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800598a:	00d2      	lsls	r2, r2, #3
 800598c:	4951      	ldr	r1, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 800598e:	4313      	orrs	r3, r2
 8005990:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005992:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f023 020c 	bic.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	494d      	ldr	r1, [pc, #308]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	f023 0202 	bic.w	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	4948      	ldr	r1, [pc, #288]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4a46      	ldr	r2, [pc, #280]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	4a40      	ldr	r2, [pc, #256]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059da:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a3d      	ldr	r2, [pc, #244]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a3a      	ldr	r2, [pc, #232]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 80059ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fc fcb9 	bl	8002368 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fc fcb5 	bl	8002368 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e05f      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a0c:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x6ca>
 8005a18:	e057      	b.n	8005aca <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1a:	4b2e      	ldr	r3, [pc, #184]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2d      	ldr	r2, [pc, #180]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fc fc9f 	bl	8002368 <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2e:	f7fc fc9b 	bl	8002368 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e045      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x6fe>
 8005a4c:	e03d      	b.n	8005aca <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a4e:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a54:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <HAL_RCC_OscConfig+0x7a4>)
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d031      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f003 0203 	and.w	r2, r3, #3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d12a      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d122      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d11a      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	0a5b      	lsrs	r3, r3, #9
 8005a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d111      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d108      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	0e1b      	lsrs	r3, r3, #24
 8005ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3730      	adds	r7, #48	; 0x30
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	fffffc0c 	.word	0xfffffc0c
 8005adc:	ffff0007 	.word	0xffff0007

08005ae0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e18d      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b8a      	ldr	r3, [pc, #552]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d910      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b87      	ldr	r3, [pc, #540]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4985      	ldr	r1, [pc, #532]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b83      	ldr	r3, [pc, #524]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e175      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	4b7b      	ldr	r3, [pc, #492]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d908      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b40:	4b78      	ldr	r3, [pc, #480]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	4975      	ldr	r1, [pc, #468]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d010      	beq.n	8005b80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	4b70      	ldr	r3, [pc, #448]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d908      	bls.n	8005b80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b6e:	4b6d      	ldr	r3, [pc, #436]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	496a      	ldr	r1, [pc, #424]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d010      	beq.n	8005bae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	4b64      	ldr	r3, [pc, #400]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d908      	bls.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b9c:	4b61      	ldr	r3, [pc, #388]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	495e      	ldr	r1, [pc, #376]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d010      	beq.n	8005bdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69da      	ldr	r2, [r3, #28]
 8005bbe:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d908      	bls.n	8005bdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bca:	4b56      	ldr	r3, [pc, #344]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	4953      	ldr	r1, [pc, #332]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	4b4d      	ldr	r3, [pc, #308]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d908      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf8:	4b4a      	ldr	r3, [pc, #296]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f023 020f 	bic.w	r2, r3, #15
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4947      	ldr	r1, [pc, #284]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d055      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c16:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	4940      	ldr	r1, [pc, #256]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c30:	4b3c      	ldr	r3, [pc, #240]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d121      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0e7      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c48:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d115      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0db      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c60:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0cf      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0c7      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c80:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f023 0207 	bic.w	r2, r3, #7
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4925      	ldr	r1, [pc, #148]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c92:	f7fc fb69 	bl	8002368 <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9a:	f7fc fb65 	bl	8002368 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0af      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb0:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d1eb      	bne.n	8005c9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d010      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d208      	bcs.n	8005cf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f023 020f 	bic.w	r2, r3, #15
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	490e      	ldr	r1, [pc, #56]	; (8005d24 <HAL_RCC_ClockConfig+0x244>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d214      	bcs.n	8005d28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 020f 	bic.w	r2, r3, #15
 8005d06:	4906      	ldr	r1, [pc, #24]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <HAL_RCC_ClockConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e077      	b.n	8005e10 <HAL_RCC_ClockConfig+0x330>
 8005d20:	52002000 	.word	0x52002000
 8005d24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d208      	bcs.n	8005d56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d44:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	4931      	ldr	r1, [pc, #196]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d010      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d208      	bcs.n	8005d84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d72:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	4926      	ldr	r1, [pc, #152]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d208      	bcs.n	8005db2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	491a      	ldr	r1, [pc, #104]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d010      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d208      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	490f      	ldr	r1, [pc, #60]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005de0:	f000 f88c 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8005de4:	4601      	mov	r1, r0
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_RCC_ClockConfig+0x338>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x33c>)
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa21 f303 	lsr.w	r3, r1, r3
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <HAL_RCC_ClockConfig+0x340>)
 8005dfe:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <HAL_RCC_ClockConfig+0x344>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fc fa65 	bl	80022d4 <HAL_InitTick>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	0800d350 	.word	0x0800d350
 8005e20:	24000004 	.word	0x24000004
 8005e24:	2400000c 	.word	0x2400000c

08005e28 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08c      	sub	sp, #48	; 0x30
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d12a      	bne.n	8005e90 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e40:	4a2b      	ldr	r2, [pc, #172]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e4a:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e62:	2303      	movs	r3, #3
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e6e:	f107 031c 	add.w	r3, r7, #28
 8005e72:	4619      	mov	r1, r3
 8005e74:	481f      	ldr	r0, [pc, #124]	; (8005ef4 <HAL_RCC_MCOConfig+0xcc>)
 8005e76:	f7fe f941 	bl	80040fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	430b      	orrs	r3, r1
 8005e88:	4919      	ldr	r1, [pc, #100]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005e8e:	e02a      	b.n	8005ee6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005e90:	4b17      	ldr	r3, [pc, #92]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e96:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005ec4:	f107 031c 	add.w	r3, r7, #28
 8005ec8:	4619      	mov	r1, r3
 8005eca:	480b      	ldr	r0, [pc, #44]	; (8005ef8 <HAL_RCC_MCOConfig+0xd0>)
 8005ecc:	f7fe f916 	bl	80040fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	01d9      	lsls	r1, r3, #7
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCC_MCOConfig+0xc8>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	610b      	str	r3, [r1, #16]
}
 8005ee6:	bf00      	nop
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	58024400 	.word	0x58024400
 8005ef4:	58020000 	.word	0x58020000
 8005ef8:	58020800 	.word	0x58020800

08005efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f02:	4baf      	ldr	r3, [pc, #700]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0a:	2b18      	cmp	r3, #24
 8005f0c:	f200 814e 	bhi.w	80061ac <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	080061ad 	.word	0x080061ad
 8005f20:	080061ad 	.word	0x080061ad
 8005f24:	080061ad 	.word	0x080061ad
 8005f28:	080061ad 	.word	0x080061ad
 8005f2c:	080061ad 	.word	0x080061ad
 8005f30:	080061ad 	.word	0x080061ad
 8005f34:	080061ad 	.word	0x080061ad
 8005f38:	08005fa3 	.word	0x08005fa3
 8005f3c:	080061ad 	.word	0x080061ad
 8005f40:	080061ad 	.word	0x080061ad
 8005f44:	080061ad 	.word	0x080061ad
 8005f48:	080061ad 	.word	0x080061ad
 8005f4c:	080061ad 	.word	0x080061ad
 8005f50:	080061ad 	.word	0x080061ad
 8005f54:	080061ad 	.word	0x080061ad
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	080061ad 	.word	0x080061ad
 8005f60:	080061ad 	.word	0x080061ad
 8005f64:	080061ad 	.word	0x080061ad
 8005f68:	080061ad 	.word	0x080061ad
 8005f6c:	080061ad 	.word	0x080061ad
 8005f70:	080061ad 	.word	0x080061ad
 8005f74:	080061ad 	.word	0x080061ad
 8005f78:	08005faf 	.word	0x08005faf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f7c:	4b90      	ldr	r3, [pc, #576]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f88:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	4a8c      	ldr	r2, [pc, #560]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f9a:	e10a      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f9c:	4b89      	ldr	r3, [pc, #548]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f9e:	61bb      	str	r3, [r7, #24]
    break;
 8005fa0:	e107      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fa2:	4b89      	ldr	r3, [pc, #548]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005fa4:	61bb      	str	r3, [r7, #24]
    break;
 8005fa6:	e104      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fa8:	4b88      	ldr	r3, [pc, #544]	; (80061cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005faa:	61bb      	str	r3, [r7, #24]
    break;
 8005fac:	e101      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fae:	4b84      	ldr	r3, [pc, #528]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fb8:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fc4:	4b7e      	ldr	r3, [pc, #504]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fce:	4b7c      	ldr	r3, [pc, #496]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	08db      	lsrs	r3, r3, #3
 8005fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80da 	beq.w	80061a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d05a      	beq.n	80060ae <HAL_RCC_GetSysClockFreq+0x1b2>
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d302      	bcc.n	8006002 <HAL_RCC_GetSysClockFreq+0x106>
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d078      	beq.n	80060f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006000:	e099      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006002:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02d      	beq.n	800606a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800600e:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	4a6a      	ldr	r2, [pc, #424]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006038:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006048:	ed97 6a02 	vldr	s12, [r7, #8]
 800604c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006064:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006068:	e087      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006074:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607c:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006090:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ac:	e065      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80060bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c0:	4b3f      	ldr	r3, [pc, #252]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f0:	e043      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061dc <HAL_RCC_GetSysClockFreq+0x2e0>
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006104:	4b2e      	ldr	r3, [pc, #184]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006114:	ed97 6a02 	vldr	s12, [r7, #8]
 8006118:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800611c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006134:	e021      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006140:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006158:	ed97 6a02 	vldr	s12, [r7, #8]
 800615c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006178:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	0a5b      	lsrs	r3, r3, #9
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	3301      	adds	r3, #1
 8006186:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006192:	edd7 6a07 	vldr	s13, [r7, #28]
 8006196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619e:	ee17 3a90 	vmov	r3, s15
 80061a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061a4:	e005      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
    break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061ae:	61bb      	str	r3, [r7, #24]
    break;
 80061b0:	bf00      	nop
  }

  return sysclockfreq;
 80061b2:	69bb      	ldr	r3, [r7, #24]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3724      	adds	r7, #36	; 0x24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	58024400 	.word	0x58024400
 80061c4:	03d09000 	.word	0x03d09000
 80061c8:	003d0900 	.word	0x003d0900
 80061cc:	017d7840 	.word	0x017d7840
 80061d0:	46000000 	.word	0x46000000
 80061d4:	4c742400 	.word	0x4c742400
 80061d8:	4a742400 	.word	0x4a742400
 80061dc:	4bbebc20 	.word	0x4bbebc20

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e4:	f001 fd94 	bl	8007d10 <HAL_RCCEx_GetD1SysClockFreq>
 80061e8:	4601      	mov	r1, r0
 80061ea:	4b08      	ldr	r3, [pc, #32]	; (800620c <HAL_RCC_GetHCLKFreq+0x2c>)
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <HAL_RCC_GetHCLKFreq+0x30>)
 80061f4:	5cd3      	ldrb	r3, [r2, r3]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	fa21 f303 	lsr.w	r3, r1, r3
 80061fe:	4a05      	ldr	r2, [pc, #20]	; (8006214 <HAL_RCC_GetHCLKFreq+0x34>)
 8006200:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <HAL_RCC_GetHCLKFreq+0x34>)
 8006204:	681b      	ldr	r3, [r3, #0]
}
 8006206:	4618      	mov	r0, r3
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	58024400 	.word	0x58024400
 8006210:	0800d350 	.word	0x0800d350
 8006214:	24000008 	.word	0x24000008

08006218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800621c:	f7ff ffe0 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006220:	4601      	mov	r1, r0
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800622e:	5cd3      	ldrb	r3, [r2, r3]
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	58024400 	.word	0x58024400
 8006240:	0800d350 	.word	0x0800d350

08006244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006248:	f7ff ffca 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 800624c:	4601      	mov	r1, r0
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <HAL_RCC_GetPCLK2Freq+0x28>)
 800625a:	5cd3      	ldrb	r3, [r2, r3]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	58024400 	.word	0x58024400
 800626c:	0800d350 	.word	0x0800d350

08006270 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006278:	2300      	movs	r3, #0
 800627a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800627c:	2300      	movs	r3, #0
 800627e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d03d      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006294:	d013      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d802      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80062a0:	e01f      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80062a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a6:	d013      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80062a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ac:	d01c      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80062ae:	e018      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b0:	4baf      	ldr	r3, [pc, #700]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4aae      	ldr	r2, [pc, #696]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062bc:	e015      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3304      	adds	r3, #4
 80062c2:	2102      	movs	r1, #2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fd3f 	bl	8007d48 <RCCEx_PLL2_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062ce:	e00c      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3324      	adds	r3, #36	; 0x24
 80062d4:	2102      	movs	r1, #2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 fde8 	bl	8007eac <RCCEx_PLL3_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
      break;
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80062e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062f0:	4b9f      	ldr	r3, [pc, #636]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fc:	499c      	ldr	r1, [pc, #624]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	650b      	str	r3, [r1, #80]	; 0x50
 8006302:	e001      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d03d      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	2b04      	cmp	r3, #4
 800631a:	d826      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006339 	.word	0x08006339
 8006328:	08006347 	.word	0x08006347
 800632c:	08006359 	.word	0x08006359
 8006330:	08006371 	.word	0x08006371
 8006334:	08006371 	.word	0x08006371
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b8d      	ldr	r3, [pc, #564]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a8c      	ldr	r2, [pc, #560]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006344:	e015      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f001 fcfb 	bl	8007d48 <RCCEx_PLL2_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006356:	e00c      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3324      	adds	r3, #36	; 0x24
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fda4 	bl	8007eac <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
      break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006378:	4b7d      	ldr	r3, [pc, #500]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	f023 0207 	bic.w	r2, r3, #7
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	497a      	ldr	r1, [pc, #488]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006386:	4313      	orrs	r3, r2
 8006388:	650b      	str	r3, [r1, #80]	; 0x50
 800638a:	e001      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03e      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d01c      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d804      	bhi.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d00d      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80063b0:	e01e      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80063b2:	2bc0      	cmp	r3, #192	; 0xc0
 80063b4:	d01f      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80063b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ba:	d01e      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063bc:	e018      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063be:	4b6c      	ldr	r3, [pc, #432]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4a6b      	ldr	r2, [pc, #428]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ca:	e017      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fcb8 	bl	8007d48 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063dc:	e00e      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fd61 	bl	8007eac <RCCEx_PLL3_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ee:	e005      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
      break;
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006402:	4b5b      	ldr	r3, [pc, #364]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	4958      	ldr	r1, [pc, #352]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006410:	4313      	orrs	r3, r2
 8006412:	650b      	str	r3, [r1, #80]	; 0x50
 8006414:	e001      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006422:	2b00      	cmp	r3, #0
 8006424:	d044      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800642c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006430:	d01f      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006436:	d805      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800643c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006440:	d00e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006442:	e01f      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006444:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006448:	d01f      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800644a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800644e:	d01e      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006450:	e018      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006452:	4b47      	ldr	r3, [pc, #284]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a46      	ldr	r2, [pc, #280]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800645e:	e017      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fc6e 	bl	8007d48 <RCCEx_PLL2_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006470:	e00e      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3324      	adds	r3, #36	; 0x24
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f001 fd17 	bl	8007eac <RCCEx_PLL3_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006496:	4b36      	ldr	r3, [pc, #216]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064a4:	4932      	ldr	r1, [pc, #200]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	658b      	str	r3, [r1, #88]	; 0x58
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d044      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c6:	d01f      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064cc:	d805      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80064d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064d6:	d00e      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064d8:	e01f      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80064da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064de:	d01f      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064e4:	d01e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064e6:	e018      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4a20      	ldr	r2, [pc, #128]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f4:	e017      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3304      	adds	r3, #4
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fc23 	bl	8007d48 <RCCEx_PLL2_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006506:	e00e      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fccc 	bl	8007eac <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006518:	e005      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	e002      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006520:	bf00      	nop
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800653a:	490d      	ldr	r1, [pc, #52]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800653c:	4313      	orrs	r3, r2
 800653e:	658b      	str	r3, [r1, #88]	; 0x58
 8006540:	e001      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d035      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006556:	2b10      	cmp	r3, #16
 8006558:	d00c      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800655a:	2b10      	cmp	r3, #16
 800655c:	d802      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01b      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006562:	e017      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006564:	2b20      	cmp	r3, #32
 8006566:	d00c      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006568:	2b30      	cmp	r3, #48	; 0x30
 800656a:	d018      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800656c:	e012      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800656e:	bf00      	nop
 8006570:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006574:	4baf      	ldr	r3, [pc, #700]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	4aae      	ldr	r2, [pc, #696]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006580:	e00e      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	2102      	movs	r1, #2
 8006588:	4618      	mov	r0, r3
 800658a:	f001 fbdd 	bl	8007d48 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006592:	e005      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
      break;
 8006598:	e002      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800659a:	bf00      	nop
 800659c:	e000      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800659e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065a6:	4ba3      	ldr	r3, [pc, #652]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	49a0      	ldr	r1, [pc, #640]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065b8:	e001      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d042      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	d01f      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d8:	d805      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e2:	d00e      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80065e4:	e01f      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80065e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ea:	d01f      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f0:	d01e      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80065f2:	e018      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f4:	4b8f      	ldr	r3, [pc, #572]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4a8e      	ldr	r2, [pc, #568]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006600:	e017      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fb9d 	bl	8007d48 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006612:	e00e      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fc46 	bl	8007eac <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006624:	e005      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
      break;
 800662a:	e002      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006638:	4b7e      	ldr	r3, [pc, #504]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	497b      	ldr	r1, [pc, #492]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	650b      	str	r3, [r1, #80]	; 0x50
 800664a:	e001      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d042      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006664:	d01b      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800666a:	d805      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d022      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006676:	e01b      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800667c:	d01d      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800667e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006682:	d01c      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006688:	d01b      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800668a:	e011      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3304      	adds	r3, #4
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f001 fb58 	bl	8007d48 <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800669c:	e012      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3324      	adds	r3, #36	; 0x24
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 fc01 	bl	8007eac <RCCEx_PLL3_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066ae:	e009      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
      break;
 80066b4:	e006      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066b6:	bf00      	nop
 80066b8:	e004      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066ca:	4b5a      	ldr	r3, [pc, #360]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	4957      	ldr	r1, [pc, #348]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	650b      	str	r3, [r1, #80]	; 0x50
 80066dc:	e001      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d044      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d01b      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fe:	d805      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d022      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800670a:	e01b      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d01d      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006716:	d01c      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800671c:	d01b      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800671e:	e011      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fb0e 	bl	8007d48 <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006730:	e012      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3324      	adds	r3, #36	; 0x24
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f001 fbb7 	bl	8007eac <RCCEx_PLL3_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006742:	e009      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800675e:	4b35      	ldr	r3, [pc, #212]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800676c:	4931      	ldr	r1, [pc, #196]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800676e:	4313      	orrs	r3, r2
 8006770:	658b      	str	r3, [r1, #88]	; 0x58
 8006772:	e001      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02d      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678c:	d005      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800678e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006792:	d009      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d013      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006798:	e00f      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	4a25      	ldr	r2, [pc, #148]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067a6:	e00c      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	2101      	movs	r1, #1
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 faca 	bl	8007d48 <RCCEx_PLL2_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
      break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80067c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067c8:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	4917      	ldr	r1, [pc, #92]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	650b      	str	r3, [r1, #80]	; 0x50
 80067da:	e001      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d035      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d81b      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80067f4:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006839 	.word	0x08006839
 8006800:	0800680d 	.word	0x0800680d
 8006804:	0800681b 	.word	0x0800681b
 8006808:	08006839 	.word	0x08006839
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	4a08      	ldr	r2, [pc, #32]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006818:	e00f      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3304      	adds	r3, #4
 800681e:	2102      	movs	r1, #2
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fa91 	bl	8007d48 <RCCEx_PLL2_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800682a:	e006      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	e003      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
      break;
 8006838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006840:	4bba      	ldr	r3, [pc, #744]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	f023 0203 	bic.w	r2, r3, #3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	49b7      	ldr	r1, [pc, #732]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006852:	e001      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8086 	beq.w	8006972 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006866:	4bb2      	ldr	r3, [pc, #712]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4ab1      	ldr	r2, [pc, #708]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800686c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006870:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006872:	f7fb fd79 	bl	8002368 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006878:	e009      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800687a:	f7fb fd75 	bl	8002368 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b64      	cmp	r3, #100	; 0x64
 8006886:	d902      	bls.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	75fb      	strb	r3, [r7, #23]
        break;
 800688c:	e005      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800688e:	4ba8      	ldr	r3, [pc, #672]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0ef      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d166      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068a0:	4ba2      	ldr	r3, [pc, #648]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068aa:	4053      	eors	r3, r2
 80068ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d013      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068b4:	4b9d      	ldr	r3, [pc, #628]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068bc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068be:	4b9b      	ldr	r3, [pc, #620]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	4a9a      	ldr	r2, [pc, #616]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ca:	4b98      	ldr	r3, [pc, #608]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a97      	ldr	r2, [pc, #604]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068d6:	4a95      	ldr	r2, [pc, #596]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e6:	d115      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fb fd3e 	bl	8002368 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ee:	e00b      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f0:	f7fb fd3a 	bl	8002368 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d902      	bls.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	75fb      	strb	r3, [r7, #23]
            break;
 8006906:	e005      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006908:	4b88      	ldr	r3, [pc, #544]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ed      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d126      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006928:	d10d      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800692a:	4b80      	ldr	r3, [pc, #512]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006938:	0919      	lsrs	r1, r3, #4
 800693a:	4b7e      	ldr	r3, [pc, #504]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800693c:	400b      	ands	r3, r1
 800693e:	497b      	ldr	r1, [pc, #492]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	610b      	str	r3, [r1, #16]
 8006944:	e005      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006946:	4b79      	ldr	r3, [pc, #484]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	4a78      	ldr	r2, [pc, #480]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800694c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006950:	6113      	str	r3, [r2, #16]
 8006952:	4b76      	ldr	r3, [pc, #472]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006960:	4972      	ldr	r1, [pc, #456]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	670b      	str	r3, [r1, #112]	; 0x70
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	75bb      	strb	r3, [r7, #22]
 800696c:	e001      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d07d      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006982:	2b28      	cmp	r3, #40	; 0x28
 8006984:	d866      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	08006a5b 	.word	0x08006a5b
 8006990:	08006a55 	.word	0x08006a55
 8006994:	08006a55 	.word	0x08006a55
 8006998:	08006a55 	.word	0x08006a55
 800699c:	08006a55 	.word	0x08006a55
 80069a0:	08006a55 	.word	0x08006a55
 80069a4:	08006a55 	.word	0x08006a55
 80069a8:	08006a55 	.word	0x08006a55
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006a55 	.word	0x08006a55
 80069b4:	08006a55 	.word	0x08006a55
 80069b8:	08006a55 	.word	0x08006a55
 80069bc:	08006a55 	.word	0x08006a55
 80069c0:	08006a55 	.word	0x08006a55
 80069c4:	08006a55 	.word	0x08006a55
 80069c8:	08006a55 	.word	0x08006a55
 80069cc:	08006a43 	.word	0x08006a43
 80069d0:	08006a55 	.word	0x08006a55
 80069d4:	08006a55 	.word	0x08006a55
 80069d8:	08006a55 	.word	0x08006a55
 80069dc:	08006a55 	.word	0x08006a55
 80069e0:	08006a55 	.word	0x08006a55
 80069e4:	08006a55 	.word	0x08006a55
 80069e8:	08006a55 	.word	0x08006a55
 80069ec:	08006a5b 	.word	0x08006a5b
 80069f0:	08006a55 	.word	0x08006a55
 80069f4:	08006a55 	.word	0x08006a55
 80069f8:	08006a55 	.word	0x08006a55
 80069fc:	08006a55 	.word	0x08006a55
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	08006a55 	.word	0x08006a55
 8006a0c:	08006a5b 	.word	0x08006a5b
 8006a10:	08006a55 	.word	0x08006a55
 8006a14:	08006a55 	.word	0x08006a55
 8006a18:	08006a55 	.word	0x08006a55
 8006a1c:	08006a55 	.word	0x08006a55
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a55 	.word	0x08006a55
 8006a2c:	08006a5b 	.word	0x08006a5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3304      	adds	r3, #4
 8006a34:	2101      	movs	r1, #1
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f986 	bl	8007d48 <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a40:	e00c      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	2101      	movs	r1, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fa2f 	bl	8007eac <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	e000      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a62:	4b32      	ldr	r3, [pc, #200]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a6e:	492f      	ldr	r1, [pc, #188]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	654b      	str	r3, [r1, #84]	; 0x54
 8006a74:	e001      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d037      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d820      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ad7 	.word	0x08006ad7
 8006a98:	08006aad 	.word	0x08006aad
 8006a9c:	08006abf 	.word	0x08006abf
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 f948 	bl	8007d48 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006abc:	e00c      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f9f1 	bl	8007eac <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f023 0207 	bic.w	r2, r3, #7
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	4910      	ldr	r1, [pc, #64]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	654b      	str	r3, [r1, #84]	; 0x54
 8006af0:	e001      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d040      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d827      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b63 	.word	0x08006b63
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b63 	.word	0x08006b63
 8006b24:	08006b63 	.word	0x08006b63
 8006b28:	08006b63 	.word	0x08006b63
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	58024800 	.word	0x58024800
 8006b34:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f902 	bl	8007d48 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b48:	e00c      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3324      	adds	r3, #36	; 0x24
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 f9ab 	bl	8007eac <RCCEx_PLL3_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b5a:	e003      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6a:	4bb2      	ldr	r3, [pc, #712]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	f023 0207 	bic.w	r2, r3, #7
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b78:	49ae      	ldr	r1, [pc, #696]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b7e:	e001      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d044      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9a:	d01b      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba0:	d805      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d022      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006baa:	d00a      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006bac:	e01b      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d01d      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb8:	d01c      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bbe:	d01b      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006bc0:	e011      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f8bd 	bl	8007d48 <RCCEx_PLL2_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e012      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f966 	bl	8007eac <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006be4:	e009      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bea:	e006      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bec:	bf00      	nop
 8006bee:	e004      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c00:	4b8c      	ldr	r3, [pc, #560]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0e:	4989      	ldr	r1, [pc, #548]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	654b      	str	r3, [r1, #84]	; 0x54
 8006c14:	e001      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d044      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d01b      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d805      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d022      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006c42:	e01b      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c48:	d01d      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006c4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c4e:	d01c      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c54:	d01b      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006c56:	e011      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f872 	bl	8007d48 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c68:	e012      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2102      	movs	r1, #2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f91b 	bl	8007eac <RCCEx_PLL3_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c7a:	e009      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e006      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c82:	bf00      	nop
 8006c84:	e004      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c86:	bf00      	nop
 8006c88:	e002      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c96:	4b67      	ldr	r3, [pc, #412]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca4:	4963      	ldr	r1, [pc, #396]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8006caa:	e001      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d044      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc6:	d01b      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ccc:	d805      	bhi.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d022      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd6:	d00a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cd8:	e01b      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cde:	d01d      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ce0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ce4:	d01c      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006ce6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cea:	d01b      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006cec:	e011      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f827 	bl	8007d48 <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e012      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 f8d0 	bl	8007eac <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d10:	e009      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	e006      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d18:	bf00      	nop
 8006d1a:	e004      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d20:	bf00      	nop
 8006d22:	e000      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d2c:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d3a:	493e      	ldr	r1, [pc, #248]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d40:	e001      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d10a      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f8a1 	bl	8007eac <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d74:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d82:	492c      	ldr	r1, [pc, #176]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9e:	d10a      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f880 	bl	8007eac <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006db6:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc4:	491b      	ldr	r1, [pc, #108]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d032      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d00d      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de6:	d016      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d111      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 ffa8 	bl	8007d48 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f851 	bl	8007eac <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e2c:	4901      	ldr	r1, [pc, #4]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	658b      	str	r3, [r1, #88]	; 0x58
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02f      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e52:	d00c      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e58:	d015      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5e:	d10f      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b71      	ldr	r3, [pc, #452]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a70      	ldr	r2, [pc, #448]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e6c:	e00c      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	2101      	movs	r1, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f819 	bl	8007eac <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e8e:	4b66      	ldr	r3, [pc, #408]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e9c:	4962      	ldr	r1, [pc, #392]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea2:	e001      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d029      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec0:	d007      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006ec2:	e00f      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4b58      	ldr	r3, [pc, #352]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a57      	ldr	r2, [pc, #348]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ed0:	e00b      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 ff35 	bl	8007d48 <RCCEx_PLL2_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ee2:	e002      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ef0:	4b4d      	ldr	r3, [pc, #308]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efc:	494a      	ldr	r1, [pc, #296]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f02:	e001      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	2102      	movs	r1, #2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 ffc6 	bl	8007eac <RCCEx_PLL3_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d02f      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3e:	d00c      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f44:	d802      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d011      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006f4a:	e00d      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f50:	d00f      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f56:	d00e      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5a:	4b33      	ldr	r3, [pc, #204]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	4a32      	ldr	r2, [pc, #200]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f66:	e007      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	e004      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e002      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f72:	bf00      	nop
 8006f74:	e000      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f7e:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8a:	4927      	ldr	r1, [pc, #156]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f90:	e001      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fa2:	4b21      	ldr	r3, [pc, #132]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	491e      	ldr	r1, [pc, #120]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fcc:	4916      	ldr	r1, [pc, #88]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	4a11      	ldr	r2, [pc, #68]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe8:	6113      	str	r3, [r2, #16]
 8006fea:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ff4:	490c      	ldr	r1, [pc, #48]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da08      	bge.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700e:	4906      	ldr	r1, [pc, #24]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007010:	4313      	orrs	r3, r2
 8007012:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007014:	7dbb      	ldrb	r3, [r7, #22]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e000      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400

0800702c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b090      	sub	sp, #64	; 0x40
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d150      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800703c:	4ba1      	ldr	r3, [pc, #644]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2b04      	cmp	r3, #4
 800704a:	d844      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007069 	.word	0x08007069
 8007058:	08007079 	.word	0x08007079
 800705c:	08007089 	.word	0x08007089
 8007060:	080070d1 	.word	0x080070d1
 8007064:	08007099 	.word	0x08007099
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fd03 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007076:	e241      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007078:	f107 0318 	add.w	r3, r7, #24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fa63 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007086:	e239      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fba7 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e231      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007098:	4b8a      	ldr	r3, [pc, #552]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800709a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070a8:	4b87      	ldr	r3, [pc, #540]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070ac:	e226      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b4:	d102      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80070b6:	4b85      	ldr	r3, [pc, #532]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ba:	e21f      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80070c4:	4b82      	ldr	r3, [pc, #520]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c8:	e218      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ce:	e215      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070d0:	4b80      	ldr	r3, [pc, #512]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d4:	e212      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	bf00      	nop
 80070dc:	e20e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e4:	d14f      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80070e6:	4b77      	ldr	r3, [pc, #476]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d01c      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d804      	bhi.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d00e      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007102:	e03c      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007104:	2bc0      	cmp	r3, #192	; 0xc0
 8007106:	d037      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800710e:	e036      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fcaf 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711e:	e1ed      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007120:	f107 0318 	add.w	r3, r7, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fa0f 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712e:	e1e5      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fb53 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713e:	e1dd      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007140:	4b60      	ldr	r3, [pc, #384]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007148:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007150:	4b5d      	ldr	r3, [pc, #372]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007154:	e1d2      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800715c:	d102      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800715e:	4b5b      	ldr	r3, [pc, #364]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007162:	e1cb      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716a:	d102      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800716c:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007170:	e1c4      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e1c1      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007178:	4b56      	ldr	r3, [pc, #344]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717c:	e1be      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007182:	bf00      	nop
 8007184:	e1ba      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d153      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800718e:	4b4d      	ldr	r3, [pc, #308]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007192:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007196:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719e:	d01f      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80071a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a4:	d805      	bhi.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80071aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ae:	d00f      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80071b0:	e03d      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80071b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071b6:	d037      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80071b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071bc:	d018      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80071be:	e036      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fc57 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ce:	e195      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d0:	f107 0318 	add.w	r3, r7, #24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f9b7 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071de:	e18d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fafb 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e185      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071f0:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007204:	e17a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720c:	d102      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800720e:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e173      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721a:	d102      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800721c:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007220:	e16c      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007226:	e169      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800722c:	e166      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007232:	bf00      	nop
 8007234:	e162      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800723c:	d15d      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007246:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724e:	d01f      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007254:	d805      	bhi.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800725a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725e:	d00f      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007260:	e047      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007266:	d041      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800726c:	d018      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800726e:	e040      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fbff 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727e:	e13d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007280:	f107 0318 	add.w	r3, r7, #24
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f95f 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728e:	e135      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007290:	f107 030c 	add.w	r3, r7, #12
 8007294:	4618      	mov	r0, r3
 8007296:	f000 faa3 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729e:	e12d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072a0:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072b4:	e122      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c2:	e11b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80072c4:	58024400 	.word	0x58024400
 80072c8:	03d09000 	.word	0x03d09000
 80072cc:	003d0900 	.word	0x003d0900
 80072d0:	017d7840 	.word	0x017d7840
 80072d4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80072e0:	4b89      	ldr	r3, [pc, #548]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e4:	e10a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ea:	e107      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072ec:	4b87      	ldr	r3, [pc, #540]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e104      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	bf00      	nop
 80072f8:	e100      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d153      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007302:	4b83      	ldr	r3, [pc, #524]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	d01f      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007318:	d805      	bhi.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800731e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007322:	d00f      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007324:	e03d      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800732a:	d037      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800732c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007330:	d018      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007332:	e036      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb9d 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	e0db      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007344:	f107 0318 	add.w	r3, r7, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f8fd 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007352:	e0d3      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fa41 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007362:	e0cb      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007364:	4b6a      	ldr	r3, [pc, #424]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007378:	e0c0      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007380:	d102      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007382:	4b65      	ldr	r3, [pc, #404]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007386:	e0b9      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800738e:	d102      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007390:	4b5d      	ldr	r3, [pc, #372]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007394:	e0b2      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	e0af      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800739c:	4b5b      	ldr	r3, [pc, #364]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a0:	e0ac      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	bf00      	nop
 80073a8:	e0a8      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073b0:	d13d      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80073b2:	4b57      	ldr	r3, [pc, #348]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c2:	d00c      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80073c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c8:	d011      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12b      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f8b8 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073dc:	e08e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 030c 	add.w	r3, r7, #12
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f9fc 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ec:	e086      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073ee:	4b48      	ldr	r3, [pc, #288]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073fe:	4b45      	ldr	r3, [pc, #276]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007402:	e07b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800740a:	d102      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800740c:	4b42      	ldr	r3, [pc, #264]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007410:	e074      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007418:	d102      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	e06d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007424:	e06a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800742a:	bf00      	nop
 800742c:	e066      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d11f      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744a:	d008      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb10 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745c:	e04e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745e:	f107 0318 	add.w	r3, r7, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f870 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746c:	e046      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007472:	bf00      	nop
 8007474:	e042      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800747c:	d13c      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748e:	d01e      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007494:	d805      	bhi.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749e:	d00e      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80074a0:	e026      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d01d      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80074a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ac:	d01d      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80074ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074b2:	d014      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80074b4:	e01c      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80074b6:	f000 f831 	bl	800751c <HAL_RCCEx_GetD3PCLK1Freq>
 80074ba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80074bc:	e01e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074be:	f107 0318 	add.w	r3, r7, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f840 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074cc:	e016      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ce:	f107 030c 	add.w	r3, r7, #12
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f984 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074dc:	e00e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e2:	e00b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80074e4:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e8:	e008      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ee:	e005      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f4:	bf00      	nop
 80074f6:	e001      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80074fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3740      	adds	r7, #64	; 0x40
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	017d7840 	.word	0x017d7840
 800750c:	00bb8000 	.word	0x00bb8000
 8007510:	58024400 	.word	0x58024400
 8007514:	03d09000 	.word	0x03d09000
 8007518:	003d0900 	.word	0x003d0900

0800751c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007520:	f7fe fe5e 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8007524:	4601      	mov	r1, r0
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	091b      	lsrs	r3, r3, #4
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007532:	5cd3      	ldrb	r3, [r2, r3]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}
 8007540:	58024400 	.word	0x58024400
 8007544:	0800d350 	.word	0x0800d350

08007548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007548:	b480      	push	{r7}
 800754a:	b089      	sub	sp, #36	; 0x24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007550:	4b9d      	ldr	r3, [pc, #628]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800755a:	4b9b      	ldr	r3, [pc, #620]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	0b1b      	lsrs	r3, r3, #12
 8007560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007566:	4b98      	ldr	r3, [pc, #608]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007572:	4b95      	ldr	r3, [pc, #596]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 810a 	beq.w	80077aa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d05a      	beq.n	8007652 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d302      	bcc.n	80075a6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d078      	beq.n	8007696 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80075a4:	e099      	b.n	80076da <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a6:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02d      	beq.n	800760e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a83      	ldr	r2, [pc, #524]	; (80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075dc:	4b7a      	ldr	r3, [pc, #488]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007608:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800760c:	e087      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007618:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077d4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800761c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007620:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007630:	ed97 6a03 	vldr	s12, [r7, #12]
 8007634:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007650:	e065      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007664:	4b58      	ldr	r3, [pc, #352]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007674:	ed97 6a03 	vldr	s12, [r7, #12]
 8007678:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800767c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007694:	e043      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80076a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a8:	4b47      	ldr	r3, [pc, #284]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076d8:	e021      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ec:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007700:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800771c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	0a5b      	lsrs	r3, r3, #9
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007738:	edd7 6a07 	vldr	s13, [r7, #28]
 800773c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007744:	ee17 2a90 	vmov	r2, s15
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	0e1b      	lsrs	r3, r3, #24
 8007780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077a8:	e008      	b.n	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	609a      	str	r2, [r3, #8]
}
 80077bc:	bf00      	nop
 80077be:	3724      	adds	r7, #36	; 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	46000000 	.word	0x46000000
 80077d4:	4c742400 	.word	0x4c742400
 80077d8:	4a742400 	.word	0x4a742400
 80077dc:	4bbebc20 	.word	0x4bbebc20

080077e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e8:	4b9d      	ldr	r3, [pc, #628]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80077f2:	4b9b      	ldr	r3, [pc, #620]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077fe:	4b98      	ldr	r3, [pc, #608]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800780a:	4b95      	ldr	r3, [pc, #596]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	08db      	lsrs	r3, r3, #3
 8007810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 810a 	beq.w	8007a42 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d05a      	beq.n	80078ea <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007834:	2b01      	cmp	r3, #1
 8007836:	d302      	bcc.n	800783e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d078      	beq.n	800792e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800783c:	e099      	b.n	8007972 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800783e:	4b88      	ldr	r3, [pc, #544]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d02d      	beq.n	80078a6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800784a:	4b85      	ldr	r3, [pc, #532]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	08db      	lsrs	r3, r3, #3
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	4a83      	ldr	r2, [pc, #524]	; (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007874:	4b7a      	ldr	r3, [pc, #488]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007884:	ed97 6a03 	vldr	s12, [r7, #12]
 8007888:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800788c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078a4:	e087      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80078b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b8:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e8:	e065      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80078f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fc:	4b58      	ldr	r3, [pc, #352]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007910:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800792c:	e043      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007938:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800793c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007940:	4b47      	ldr	r3, [pc, #284]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	ed97 6a03 	vldr	s12, [r7, #12]
 8007954:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007970:	e021      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007984:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	ee07 3a90 	vmov	s15, r3
 8007990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007994:	ed97 6a03 	vldr	s12, [r7, #12]
 8007998:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800799c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80079b6:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	0a5b      	lsrs	r3, r3, #9
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079dc:	ee17 2a90 	vmov	r2, s15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80079e4:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0a:	ee17 2a90 	vmov	r2, s15
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	0e1b      	lsrs	r3, r3, #24
 8007a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a38:	ee17 2a90 	vmov	r2, s15
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a40:	e008      	b.n	8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	3724      	adds	r7, #36	; 0x24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	58024400 	.word	0x58024400
 8007a64:	03d09000 	.word	0x03d09000
 8007a68:	46000000 	.word	0x46000000
 8007a6c:	4c742400 	.word	0x4c742400
 8007a70:	4a742400 	.word	0x4a742400
 8007a74:	4bbebc20 	.word	0x4bbebc20

08007a78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a80:	4b9d      	ldr	r3, [pc, #628]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a8a:	4b9b      	ldr	r3, [pc, #620]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a96:	4b98      	ldr	r3, [pc, #608]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007aa0:	4b95      	ldr	r3, [pc, #596]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 810a 	beq.w	8007cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d05a      	beq.n	8007b80 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d302      	bcc.n	8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d078      	beq.n	8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007ad2:	e099      	b.n	8007c08 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad4:	4b88      	ldr	r3, [pc, #544]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02d      	beq.n	8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae0:	4b85      	ldr	r3, [pc, #532]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	4a84      	ldr	r2, [pc, #528]	; (8007cfc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b7b      	ldr	r3, [pc, #492]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b3a:	e087      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b6a      	ldr	r3, [pc, #424]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b7e:	e065      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b59      	ldr	r3, [pc, #356]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bc2:	e043      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c06:	e021      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1a:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c4a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007c4c:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	0a5b      	lsrs	r3, r3, #9
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c72:	ee17 2a90 	vmov	r2, s15
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	0c1b      	lsrs	r3, r3, #16
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca0:	ee17 2a90 	vmov	r2, s15
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	0e1b      	lsrs	r3, r3, #24
 8007cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cce:	ee17 2a90 	vmov	r2, s15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007cd6:	e008      	b.n	8007cea <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400
 8007cfc:	03d09000 	.word	0x03d09000
 8007d00:	46000000 	.word	0x46000000
 8007d04:	4c742400 	.word	0x4c742400
 8007d08:	4a742400 	.word	0x4a742400
 8007d0c:	4bbebc20 	.word	0x4bbebc20

08007d10 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d14:	f7fe f8f2 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	4a06      	ldr	r2, [pc, #24]	; (8007d40 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007d26:	5cd3      	ldrb	r3, [r2, r3]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa21 f303 	lsr.w	r3, r1, r3
 8007d30:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007d32:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007d36:	681b      	ldr	r3, [r3, #0]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	0800d350 	.word	0x0800d350
 8007d44:	24000004 	.word	0x24000004

08007d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d56:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d101      	bne.n	8007d66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e099      	b.n	8007e9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d66:	4b4f      	ldr	r3, [pc, #316]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a4e      	ldr	r2, [pc, #312]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d72:	f7fa faf9 	bl	8002368 <HAL_GetTick>
 8007d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d78:	e008      	b.n	8007d8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d7a:	f7fa faf5 	bl	8002368 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e086      	b.n	8007e9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d8c:	4b45      	ldr	r3, [pc, #276]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1f0      	bne.n	8007d7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d98:	4b42      	ldr	r3, [pc, #264]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	031b      	lsls	r3, r3, #12
 8007da6:	493f      	ldr	r1, [pc, #252]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	628b      	str	r3, [r1, #40]	; 0x28
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	025b      	lsls	r3, r3, #9
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	061b      	lsls	r3, r3, #24
 8007dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ddc:	4931      	ldr	r1, [pc, #196]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007de2:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	492d      	ldr	r1, [pc, #180]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007df4:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	f023 0220 	bic.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	4928      	ldr	r1, [pc, #160]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e06:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	f023 0310 	bic.w	r3, r3, #16
 8007e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e16:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <RCCEx_PLL2_Config+0x160>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	69d2      	ldr	r2, [r2, #28]
 8007e1e:	00d2      	lsls	r2, r2, #3
 8007e20:	4920      	ldr	r1, [pc, #128]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e26:	4b1f      	ldr	r3, [pc, #124]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	f043 0310 	orr.w	r3, r3, #16
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e44:	e00f      	b.n	8007e66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d106      	bne.n	8007e5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e4c:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	4a14      	ldr	r2, [pc, #80]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e58:	e005      	b.n	8007e66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e66:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e72:	f7fa fa79 	bl	8002368 <HAL_GetTick>
 8007e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e78:	e008      	b.n	8007e8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e7a:	f7fa fa75 	bl	8002368 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e006      	b.n	8007e9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <RCCEx_PLL2_Config+0x15c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0f0      	beq.n	8007e7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	ffff0007 	.word	0xffff0007

08007eac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eba:	4b53      	ldr	r3, [pc, #332]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d101      	bne.n	8007eca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e099      	b.n	8007ffe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eca:	4b4f      	ldr	r3, [pc, #316]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a4e      	ldr	r2, [pc, #312]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed6:	f7fa fa47 	bl	8002368 <HAL_GetTick>
 8007eda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007edc:	e008      	b.n	8007ef0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ede:	f7fa fa43 	bl	8002368 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e086      	b.n	8007ffe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ef0:	4b45      	ldr	r3, [pc, #276]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1f0      	bne.n	8007ede <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007efc:	4b42      	ldr	r3, [pc, #264]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	051b      	lsls	r3, r3, #20
 8007f0a:	493f      	ldr	r1, [pc, #252]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	025b      	lsls	r3, r3, #9
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	431a      	orrs	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	061b      	lsls	r3, r3, #24
 8007f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f40:	4931      	ldr	r1, [pc, #196]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f46:	4b30      	ldr	r3, [pc, #192]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	492d      	ldr	r1, [pc, #180]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f58:	4b2b      	ldr	r3, [pc, #172]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	4928      	ldr	r1, [pc, #160]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	4a26      	ldr	r2, [pc, #152]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f76:	4b24      	ldr	r3, [pc, #144]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <RCCEx_PLL3_Config+0x160>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	69d2      	ldr	r2, [r2, #28]
 8007f82:	00d2      	lsls	r2, r2, #3
 8007f84:	4920      	ldr	r1, [pc, #128]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f8a:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	4a1e      	ldr	r2, [pc, #120]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4a19      	ldr	r2, [pc, #100]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fa8:	e00f      	b.n	8007fca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d106      	bne.n	8007fbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fb0:	4b15      	ldr	r3, [pc, #84]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	4a14      	ldr	r2, [pc, #80]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fbc:	e005      	b.n	8007fca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	4a11      	ldr	r2, [pc, #68]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a0e      	ldr	r2, [pc, #56]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd6:	f7fa f9c7 	bl	8002368 <HAL_GetTick>
 8007fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fdc:	e008      	b.n	8007ff0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007fde:	f7fa f9c3 	bl	8002368 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e006      	b.n	8007ffe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <RCCEx_PLL3_Config+0x15c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	58024400 	.word	0x58024400
 800800c:	ffff0007 	.word	0xffff0007

08008010 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e268      	b.n	80084f4 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008022:	f7fa f9cf 	bl	80023c4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800802c:	2b01      	cmp	r3, #1
 800802e:	d113      	bne.n	8008058 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a8b      	ldr	r2, [pc, #556]	; (8008264 <HAL_SAI_Init+0x254>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <HAL_SAI_Init+0x34>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a8a      	ldr	r2, [pc, #552]	; (8008268 <HAL_SAI_Init+0x258>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d107      	bne.n	8008054 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008048:	2b01      	cmp	r3, #1
 800804a:	d103      	bne.n	8008054 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e24d      	b.n	80084f4 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a81      	ldr	r2, [pc, #516]	; (8008264 <HAL_SAI_Init+0x254>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_SAI_Init+0x5c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a81      	ldr	r2, [pc, #516]	; (800826c <HAL_SAI_Init+0x25c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d102      	bne.n	8008072 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800806c:	4b80      	ldr	r3, [pc, #512]	; (8008270 <HAL_SAI_Init+0x260>)
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	e028      	b.n	80080c4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a7f      	ldr	r2, [pc, #508]	; (8008274 <HAL_SAI_Init+0x264>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d004      	beq.n	8008086 <HAL_SAI_Init+0x76>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a7d      	ldr	r2, [pc, #500]	; (8008278 <HAL_SAI_Init+0x268>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d102      	bne.n	800808c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008086:	4b7d      	ldr	r3, [pc, #500]	; (800827c <HAL_SAI_Init+0x26c>)
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e01b      	b.n	80080c4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a7b      	ldr	r2, [pc, #492]	; (8008280 <HAL_SAI_Init+0x270>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_SAI_Init+0x90>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a7a      	ldr	r2, [pc, #488]	; (8008284 <HAL_SAI_Init+0x274>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d102      	bne.n	80080a6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80080a0:	4b79      	ldr	r3, [pc, #484]	; (8008288 <HAL_SAI_Init+0x278>)
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	e00e      	b.n	80080c4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a6f      	ldr	r2, [pc, #444]	; (8008268 <HAL_SAI_Init+0x258>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_SAI_Init+0xaa>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a75      	ldr	r2, [pc, #468]	; (800828c <HAL_SAI_Init+0x27c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d102      	bne.n	80080c0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80080ba:	4b75      	ldr	r3, [pc, #468]	; (8008290 <HAL_SAI_Init+0x280>)
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	e001      	b.n	80080c4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e217      	b.n	80084f4 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7f9 ff6d 	bl	8001fb8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa1a 	bl	8008518 <SAI_Disable>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e202      	b.n	80084f4 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d007      	beq.n	800810e <HAL_SAI_Init+0xfe>
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d302      	bcc.n	8008108 <HAL_SAI_Init+0xf8>
 8008102:	2b02      	cmp	r3, #2
 8008104:	d006      	beq.n	8008114 <HAL_SAI_Init+0x104>
 8008106:	e008      	b.n	800811a <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800810c:	e008      	b.n	8008120 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800810e:	2310      	movs	r3, #16
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008112:	e005      	b.n	8008120 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008114:	2320      	movs	r3, #32
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008118:	e002      	b.n	8008120 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800811e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b05      	cmp	r3, #5
 8008126:	d832      	bhi.n	800818e <HAL_SAI_Init+0x17e>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_SAI_Init+0x120>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	0800814f 	.word	0x0800814f
 8008138:	08008157 	.word	0x08008157
 800813c:	0800815f 	.word	0x0800815f
 8008140:	0800816f 	.word	0x0800816f
 8008144:	0800817f 	.word	0x0800817f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	61fb      	str	r3, [r7, #28]
      break;
 800814c:	e022      	b.n	8008194 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800814e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008152:	61fb      	str	r3, [r7, #28]
      break;
 8008154:	e01e      	b.n	8008194 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800815a:	61fb      	str	r3, [r7, #28]
      break;
 800815c:	e01a      	b.n	8008194 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800815e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008162:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800816c:	e012      	b.n	8008194 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800816e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008172:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f043 0302 	orr.w	r3, r3, #2
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800817c:	e00a      	b.n	8008194 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800817e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008182:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	f043 0303 	orr.w	r3, r3, #3
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800818c:	e002      	b.n	8008194 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
      break;
 8008192:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008198:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 80a1 	beq.w	80082e6 <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a2d      	ldr	r2, [pc, #180]	; (8008264 <HAL_SAI_Init+0x254>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_SAI_Init+0x1ac>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2d      	ldr	r2, [pc, #180]	; (800826c <HAL_SAI_Init+0x25c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d104      	bne.n	80081c6 <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80081bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081c0:	f7fe ff34 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 80081c4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2a      	ldr	r2, [pc, #168]	; (8008274 <HAL_SAI_Init+0x264>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_SAI_Init+0x1ca>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a28      	ldr	r2, [pc, #160]	; (8008278 <HAL_SAI_Init+0x268>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d104      	bne.n	80081e4 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80081da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081de:	f7fe ff25 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 80081e2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a25      	ldr	r2, [pc, #148]	; (8008280 <HAL_SAI_Init+0x270>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_SAI_Init+0x1e8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a24      	ldr	r2, [pc, #144]	; (8008284 <HAL_SAI_Init+0x274>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d104      	bne.n	8008202 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80081f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081fc:	f7fe ff16 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 8008200:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_SAI_Init+0x258>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d104      	bne.n	8008216 <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800820c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008210:	f7fe ff0c 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 8008214:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1c      	ldr	r2, [pc, #112]	; (800828c <HAL_SAI_Init+0x27c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d104      	bne.n	800822a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008220:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008224:	f7fe ff02 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 8008228:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008232:	d10f      	bne.n	8008254 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4619      	mov	r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	e030      	b.n	80082b6 <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800825c:	d11a      	bne.n	8008294 <HAL_SAI_Init+0x284>
 800825e:	2302      	movs	r3, #2
 8008260:	e019      	b.n	8008296 <HAL_SAI_Init+0x286>
 8008262:	bf00      	nop
 8008264:	40015804 	.word	0x40015804
 8008268:	58005404 	.word	0x58005404
 800826c:	40015824 	.word	0x40015824
 8008270:	40015800 	.word	0x40015800
 8008274:	40015c04 	.word	0x40015c04
 8008278:	40015c24 	.word	0x40015c24
 800827c:	40015c00 	.word	0x40015c00
 8008280:	40016004 	.word	0x40016004
 8008284:	40016024 	.word	0x40016024
 8008288:	40016000 	.word	0x40016000
 800828c:	58005424 	.word	0x58005424
 8008290:	58005400 	.word	0x58005400
 8008294:	2301      	movs	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	4619      	mov	r1, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80082b4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	4a90      	ldr	r2, [pc, #576]	; (80084fc <HAL_SAI_Init+0x4ec>)
 80082ba:	fba2 2303 	umull	r2, r3, r2, r3
 80082be:	08da      	lsrs	r2, r3, #3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80082c4:	6939      	ldr	r1, [r7, #16]
 80082c6:	4b8d      	ldr	r3, [pc, #564]	; (80084fc <HAL_SAI_Init+0x4ec>)
 80082c8:	fba3 2301 	umull	r2, r3, r3, r1
 80082cc:	08da      	lsrs	r2, r3, #3
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	1aca      	subs	r2, r1, r3
 80082d8:	2a08      	cmp	r2, #8
 80082da:	d904      	bls.n	80082e6 <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_SAI_Init+0x2e6>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d109      	bne.n	800830a <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_SAI_Init+0x2f2>
 80082fe:	2300      	movs	r3, #0
 8008300:	e001      	b.n	8008306 <HAL_SAI_Init+0x2f6>
 8008302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008306:	623b      	str	r3, [r7, #32]
 8008308:	e008      	b.n	800831c <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830e:	2b01      	cmp	r3, #1
 8008310:	d102      	bne.n	8008318 <HAL_SAI_Init+0x308>
 8008312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008316:	e000      	b.n	800831a <HAL_SAI_Init+0x30a>
 8008318:	2300      	movs	r3, #0
 800831a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800831c:	f7fa f852 	bl	80023c4 <HAL_GetREVID>
 8008320:	4603      	mov	r3, r0
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008326:	d331      	bcc.n	800838c <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6819      	ldr	r1, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b73      	ldr	r3, [pc, #460]	; (8008500 <HAL_SAI_Init+0x4f0>)
 8008334:	400b      	ands	r3, r1
 8008336:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6819      	ldr	r1, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800834c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	431a      	orrs	r2, r3
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008360:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800836c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	051b      	lsls	r3, r3, #20
 8008374:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800837a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e02d      	b.n	80083e8 <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b5b      	ldr	r3, [pc, #364]	; (8008504 <HAL_SAI_Init+0x4f4>)
 8008398:	400b      	ands	r3, r1
 800839a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6819      	ldr	r1, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083b0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	431a      	orrs	r2, r3
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80083c4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083d0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	051b      	lsls	r3, r3, #20
 80083d8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083de:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b45      	ldr	r3, [pc, #276]	; (8008508 <HAL_SAI_Init+0x4f8>)
 80083f4:	400b      	ands	r3, r1
 80083f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6859      	ldr	r1, [r3, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b3a      	ldr	r3, [pc, #232]	; (800850c <HAL_SAI_Init+0x4fc>)
 8008422:	400b      	ands	r3, r1
 8008424:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008430:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008436:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800843c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008442:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	3b01      	subs	r3, #1
 800844a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800844c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68d9      	ldr	r1, [r3, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008464:	400b      	ands	r3, r1
 8008466:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68d9      	ldr	r1, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008476:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800847e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	3b01      	subs	r3, #1
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <HAL_SAI_Init+0x500>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_SAI_Init+0x496>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1c      	ldr	r2, [pc, #112]	; (8008514 <HAL_SAI_Init+0x504>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d119      	bne.n	80084da <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d10e      	bne.n	80084da <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c4:	3b01      	subs	r3, #1
 80084c6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084c8:	431a      	orrs	r2, r3
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d2:	f043 0201 	orr.w	r2, r3, #1
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3728      	adds	r7, #40	; 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	cccccccd 	.word	0xcccccccd
 8008500:	f005c010 	.word	0xf005c010
 8008504:	f805c010 	.word	0xf805c010
 8008508:	ffff1ff0 	.word	0xffff1ff0
 800850c:	fff88000 	.word	0xfff88000
 8008510:	40015804 	.word	0x40015804
 8008514:	58005404 	.word	0x58005404

08008518 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008518:	b490      	push	{r4, r7}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008520:	4b15      	ldr	r3, [pc, #84]	; (8008578 <SAI_Disable+0x60>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a15      	ldr	r2, [pc, #84]	; (800857c <SAI_Disable+0x64>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	0b1b      	lsrs	r3, r3, #12
 800852c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008540:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008542:	2c00      	cmp	r4, #0
 8008544:	d10a      	bne.n	800855c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800854c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e007      	b.n	800856c <SAI_Disable+0x54>
    }
    count--;
 800855c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1ea      	bne.n	8008542 <SAI_Disable+0x2a>

  return status;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bc90      	pop	{r4, r7}
 8008576:	4770      	bx	lr
 8008578:	24000004 	.word	0x24000004
 800857c:	95cbec1b 	.word	0x95cbec1b

08008580 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	; 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e07c      	b.n	800868c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10c      	bne.n	80085b8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7f9 fa46 	bl	8001a44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2203      	movs	r2, #3
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f867 	bl	8008694 <HAL_SD_InitCard>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e05d      	b.n	800868c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa94 	bl	8008b04 <HAL_SD_GetCardStatus>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e052      	b.n	800868c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80085e6:	7e3b      	ldrb	r3, [r7, #24]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80085ec:	7e7b      	ldrb	r3, [r7, #25]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d10a      	bne.n	8008610 <HAL_SD_Init+0x90>
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <HAL_SD_Init+0x86>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860c:	65da      	str	r2, [r3, #92]	; 0x5c
 800860e:	e00b      	b.n	8008628 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d104      	bne.n	8008622 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008620:	e002      	b.n	8008628 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb00 	bl	8008c34 <HAL_SD_ConfigWideBusOperation>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e026      	b.n	800868c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800863e:	f7f9 fe93 	bl	8002368 <HAL_GetTick>
 8008642:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008644:	e011      	b.n	800866a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008646:	f7f9 fe8f 	bl	8002368 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d109      	bne.n	800866a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800865c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e010      	b.n	800868c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb72 	bl	8008d54 <HAL_SD_GetCardState>
 8008670:	4603      	mov	r3, r0
 8008672:	2b04      	cmp	r3, #4
 8008674:	d1e7      	bne.n	8008646 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3728      	adds	r7, #40	; 0x28
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008694:	b5b0      	push	{r4, r5, r7, lr}
 8008696:	b090      	sub	sp, #64	; 0x40
 8008698:	af04      	add	r7, sp, #16
 800869a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80086ac:	23fa      	movs	r3, #250	; 0xfa
 80086ae:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d107      	bne.n	80086c8 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0210 	orr.w	r2, r2, #16
 80086c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681d      	ldr	r5, [r3, #0]
 80086cc:	466c      	mov	r4, sp
 80086ce:	f107 0318 	add.w	r3, r7, #24
 80086d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086da:	f107 030c 	add.w	r3, r7, #12
 80086de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e0:	4628      	mov	r0, r5
 80086e2:	f003 fe49 	bl	800c378 <SDMMC_Init>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80086ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e04d      	b.n	8008794 <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f003 fe72 	bl	800c3e6 <SDMMC_PowerState_ON>
 8008702:	4603      	mov	r3, r0
 8008704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 8008708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e03f      	b.n	8008794 <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8008714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008718:	f7fe fc88 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <HAL_SD_InitCard+0x108>)
 8008720:	fba3 2302 	umull	r2, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d008      	beq.n	8008740 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800872e:	4a1c      	ldr	r2, [pc, #112]	; (80087a0 <HAL_SD_InitCard+0x10c>)
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	3301      	adds	r3, #1
 8008738:	4618      	mov	r0, r3
 800873a:	f7f9 fe21 	bl	8002380 <HAL_Delay>
 800873e:	e002      	b.n	8008746 <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8008740:	2002      	movs	r0, #2
 8008742:	f7f9 fe1d 	bl	8002380 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fbe2 	bl	8008f10 <SD_PowerON>
 800874c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e013      	b.n	8008794 <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb11 	bl	8008d94 <SD_InitCard>
 8008772:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	; 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bdb0      	pop	{r4, r5, r7, pc}
 800879c:	10624dd3 	.word	0x10624dd3
 80087a0:	00012110 	.word	0x00012110

080087a4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ca:	0f9b      	lsrs	r3, r3, #30
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d6:	0e9b      	lsrs	r3, r3, #26
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e8:	0e1b      	lsrs	r3, r3, #24
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	b2da      	uxtb	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881c:	0d1b      	lsrs	r3, r3, #20
 800881e:	b29a      	uxth	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	b2da      	uxtb	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883a:	0bdb      	lsrs	r3, r3, #15
 800883c:	b2db      	uxtb	r3, r3
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	b2da      	uxtb	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884c:	0b9b      	lsrs	r3, r3, #14
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	b2da      	uxtb	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885e:	0b5b      	lsrs	r3, r3, #13
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008870:	0b1b      	lsrs	r3, r3, #12
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2200      	movs	r2, #0
 8008882:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d163      	bne.n	8008954 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008890:	009a      	lsls	r2, r3, #2
 8008892:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008896:	4013      	ands	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800889c:	0f92      	lsrs	r2, r2, #30
 800889e:	431a      	orrs	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a8:	0edb      	lsrs	r3, r3, #27
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ba:	0e1b      	lsrs	r3, r3, #24
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088cc:	0d5b      	lsrs	r3, r3, #21
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088de:	0c9b      	lsrs	r3, r3, #18
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f0:	0bdb      	lsrs	r3, r3, #15
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	7e1b      	ldrb	r3, [r3, #24]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	3302      	adds	r3, #2
 8008914:	2201      	movs	r2, #1
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800891e:	fb02 f203 	mul.w	r2, r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	7a1b      	ldrb	r3, [r3, #8]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	2201      	movs	r2, #1
 8008932:	409a      	lsls	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008940:	0a52      	lsrs	r2, r2, #9
 8008942:	fb02 f203 	mul.w	r2, r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008950:	659a      	str	r2, [r3, #88]	; 0x58
 8008952:	e031      	b.n	80089b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d11d      	bne.n	8008998 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008960:	041b      	lsls	r3, r3, #16
 8008962:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	431a      	orrs	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	3301      	adds	r3, #1
 8008978:	029a      	lsls	r2, r3, #10
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800898c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	659a      	str	r2, [r3, #88]	; 0x58
 8008996:	e00f      	b.n	80089b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a58      	ldr	r2, [pc, #352]	; (8008b00 <HAL_SD_GetCardCSD+0x344>)
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e09d      	b.n	8008af4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089bc:	0b9b      	lsrs	r3, r3, #14
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ce:	09db      	lsrs	r3, r3, #7
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f0:	0fdb      	lsrs	r3, r3, #31
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fc:	0f5b      	lsrs	r3, r3, #29
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0e:	0e9b      	lsrs	r3, r3, #26
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a20:	0d9b      	lsrs	r3, r3, #22
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a32:	0d5b      	lsrs	r3, r3, #21
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a62:	0bdb      	lsrs	r3, r3, #15
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a76:	0b9b      	lsrs	r3, r3, #14
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	0b5b      	lsrs	r3, r3, #13
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9e:	0b1b      	lsrs	r3, r3, #12
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	0a9b      	lsrs	r3, r3, #10
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ada:	085b      	lsrs	r3, r3, #1
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	1fe00fff 	.word	0x1fe00fff

08008b04 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b094      	sub	sp, #80	; 0x50
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fb03 	bl	8009120 <SD_SendSDStatus>
 8008b1a:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00f      	beq.n	8008b42 <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a42      	ldr	r2, [pc, #264]	; (8008c30 <HAL_SD_GetCardStatus+0x12c>)
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e071      	b.n	8008c26 <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	099b      	lsrs	r3, r3, #6
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	095b      	lsrs	r3, r3, #5
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0e1b      	lsrs	r3, r3, #24
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	061a      	lsls	r2, r3, #24
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b92:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	0e1b      	lsrs	r3, r3, #24
 8008b98:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	0d1b      	lsrs	r3, r3, #20
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	0c1b      	lsrs	r3, r3, #16
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	0a9b      	lsrs	r3, r3, #10
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	091b      	lsrs	r3, r3, #4
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	0e1b      	lsrs	r3, r3, #24
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3750      	adds	r7, #80	; 0x50
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	1fe00fff 	.word	0x1fe00fff

08008c34 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c34:	b5b0      	push	{r4, r5, r7, lr}
 8008c36:	b08e      	sub	sp, #56	; 0x38
 8008c38:	af04      	add	r7, sp, #16
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2203      	movs	r2, #3
 8008c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d02e      	beq.n	8008cac <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c54:	d106      	bne.n	8008c64 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38
 8008c62:	e029      	b.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c6a:	d10a      	bne.n	8008c82 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb4f 	bl	8009310 <SD_WideBus_Enable>
 8008c72:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8008c80:	e01a      	b.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fb8c 	bl	80093a6 <SD_WideBus_Disable>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c9c:	e00c      	b.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8008caa:	e005      	b.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a22      	ldr	r2, [pc, #136]	; (8008d50 <HAL_SD_ConfigWideBusOperation+0x11c>)
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e039      	b.n	8008d48 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d903      	bls.n	8008cfa <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	e012      	b.n	8008d20 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d02:	d103      	bne.n	8008d0c <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e009      	b.n	8008d20 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d14:	d102      	bne.n	8008d1c <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008d16:	2302      	movs	r3, #2
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	e001      	b.n	8008d20 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681d      	ldr	r5, [r3, #0]
 8008d24:	466c      	mov	r4, sp
 8008d26:	f107 0318 	add.w	r3, r7, #24
 8008d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d32:	f107 030c 	add.w	r3, r7, #12
 8008d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f003 fb1d 	bl	800c378 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d50:	1fe00fff 	.word	0x1fe00fff

08008d54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 faaa 	bl	80092c0 <SD_SendStatus>
 8008d6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	0a5b      	lsrs	r3, r3, #9
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d8a:	693b      	ldr	r3, [r7, #16]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b091      	sub	sp, #68	; 0x44
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f003 fb2f 	bl	800c408 <SDMMC_GetPowerState>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008db4:	e0a8      	b.n	8008f08 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d02e      	beq.n	8008e1c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f003 fcb1 	bl	800c72a <SDMMC_CmdSendCID>
 8008dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd2:	e099      	b.n	8008f08 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f003 fb59 	bl	800c492 <SDMMC_GetResponse>
 8008de0:	4602      	mov	r2, r0
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2104      	movs	r1, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f003 fb50 	bl	800c492 <SDMMC_GetResponse>
 8008df2:	4602      	mov	r2, r0
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2108      	movs	r1, #8
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f003 fb47 	bl	800c492 <SDMMC_GetResponse>
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	210c      	movs	r1, #12
 8008e10:	4618      	mov	r0, r3
 8008e12:	f003 fb3e 	bl	800c492 <SDMMC_GetResponse>
 8008e16:	4602      	mov	r2, r0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d00d      	beq.n	8008e40 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f107 020e 	add.w	r2, r7, #14
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f003 fcba 	bl	800c7a8 <SDMMC_CmdSetRelAdd>
 8008e34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <SD_InitCard+0xac>
    {
      return errorstate;
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3e:	e063      	b.n	8008f08 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d036      	beq.n	8008eb6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e48:	89fb      	ldrh	r3, [r7, #14]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e58:	041b      	lsls	r3, r3, #16
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	f003 fc83 	bl	800c768 <SDMMC_CmdSendCSD>
 8008e62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <SD_InitCard+0xda>
    {
      return errorstate;
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	e04c      	b.n	8008f08 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f003 fb0c 	bl	800c492 <SDMMC_GetResponse>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2104      	movs	r1, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f003 fb03 	bl	800c492 <SDMMC_GetResponse>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2108      	movs	r1, #8
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f003 fafa 	bl	800c492 <SDMMC_GetResponse>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	210c      	movs	r1, #12
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f003 faf1 	bl	800c492 <SDMMC_GetResponse>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2104      	movs	r1, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 fae8 	bl	800c492 <SDMMC_GetResponse>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	0d1a      	lsrs	r2, r3, #20
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fc73 	bl	80087bc <HAL_SD_GetCardCSD>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ee0:	e012      	b.n	8008f08 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6819      	ldr	r1, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	f04f 0400 	mov.w	r4, #0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	f003 fb2e 	bl	800c556 <SDMMC_CmdSelDesel>
 8008efa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <SD_InitCard+0x172>
  {
    return errorstate;
 8008f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f04:	e000      	b.n	8008f08 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3744      	adds	r7, #68	; 0x44
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}

08008f10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008f24:	f7f9 fa20 	bl	8002368 <HAL_GetTick>
 8008f28:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f003 fb35 	bl	800c59e <SDMMC_CmdGoIdleState>
 8008f34:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <SD_PowerON+0x30>
  {
    return errorstate;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	e0e9      	b.n	8009114 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f003 fb48 	bl	800c5da <SDMMC_CmdOperCond>
 8008f4a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00d      	beq.n	8008f6e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f003 fb1e 	bl	800c59e <SDMMC_CmdGoIdleState>
 8008f62:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <SD_PowerON+0x64>
    {
      return errorstate;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	e0d2      	b.n	8009114 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d137      	bne.n	8008fec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f003 fb49 	bl	800c61a <SDMMC_CmdAppCommand>
 8008f88:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d02d      	beq.n	8008fec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f94:	e0be      	b.n	8009114 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f003 fb3c 	bl	800c61a <SDMMC_CmdAppCommand>
 8008fa2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <SD_PowerON+0x9e>
    {
      return errorstate;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	e0b2      	b.n	8009114 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	495a      	ldr	r1, [pc, #360]	; (800911c <SD_PowerON+0x20c>)
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f003 fb53 	bl	800c660 <SDMMC_CmdAppOperCommand>
 8008fba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fc6:	e0a5      	b.n	8009114 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f003 fa5f 	bl	800c492 <SDMMC_GetResponse>
 8008fd4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	0fdb      	lsrs	r3, r3, #31
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <SD_PowerON+0xd2>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <SD_PowerON+0xd4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61bb      	str	r3, [r7, #24]

    count++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d802      	bhi.n	8008ffc <SD_PowerON+0xec>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0cc      	beq.n	8008f96 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009002:	4293      	cmp	r3, r2
 8009004:	d902      	bls.n	800900c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800900a:	e083      	b.n	8009114 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d07d      	beq.n	8009112 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d176      	bne.n	8009112 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d071      	beq.n	8009112 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009034:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f042 0208 	orr.w	r2, r2, #8
 8009044:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f003 fc13 	bl	800c876 <SDMMC_CmdVoltageSwitch>
 8009050:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <SD_PowerON+0x162>
        {
          return errorstate;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	e05b      	b.n	8009114 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800905c:	f7f9 f984 	bl	8002368 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d102      	bne.n	8009072 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800906c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009070:	e050      	b.n	8009114 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800907c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009080:	d1ec      	bne.n	800905c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800908a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800909a:	d002      	beq.n	80090a2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800909c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090a0:	e038      	b.n	8009114 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80090a2:	2001      	movs	r0, #1
 80090a4:	f7ff fb7e 	bl	80087a4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0204 	orr.w	r2, r2, #4
 80090b6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80090b8:	e00a      	b.n	80090d0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090ba:	f7f9 f955 	bl	8002368 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d102      	bne.n	80090d0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80090ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ce:	e021      	b.n	8009114 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090de:	d1ec      	bne.n	80090ba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090f8:	d102      	bne.n	8009100 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80090fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090fe:	e009      	b.n	8009114 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2213      	movs	r2, #19
 8009106:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f04f 32ff 	mov.w	r2, #4294967295
 8009110:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3720      	adds	r7, #32
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	c1100000 	.word	0xc1100000

08009120 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08c      	sub	sp, #48	; 0x30
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800912a:	f7f9 f91d 	bl	8002368 <HAL_GetTick>
 800912e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f003 f9a9 	bl	800c492 <SDMMC_GetResponse>
 8009140:	4603      	mov	r3, r0
 8009142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800914a:	d102      	bne.n	8009152 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800914c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009150:	e0b0      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2140      	movs	r1, #64	; 0x40
 8009158:	4618      	mov	r0, r3
 800915a:	f003 f9d9 	bl	800c510 <SDMMC_CmdBlockLength>
 800915e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	e0a0      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f003 fa4b 	bl	800c61a <SDMMC_CmdAppCommand>
 8009184:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	e08d      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009198:	f04f 33ff 	mov.w	r3, #4294967295
 800919c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80091a2:	2360      	movs	r3, #96	; 0x60
 80091a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091a6:	2302      	movs	r3, #2
 80091a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f107 0208 	add.w	r2, r7, #8
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f003 f97b 	bl	800c4b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f003 fb33 	bl	800c832 <SDMMC_CmdStatusRegister>
 80091cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d02b      	beq.n	800922c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	e069      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d013      	beq.n	8009216 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80091ee:	2300      	movs	r3, #0
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f2:	e00d      	b.n	8009210 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f003 f8e7 	bl	800c3cc <SDMMC_ReadFIFO>
 80091fe:	4602      	mov	r2, r0
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	601a      	str	r2, [r3, #0]
        pData++;
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	3304      	adds	r3, #4
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	3301      	adds	r3, #1
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b07      	cmp	r3, #7
 8009214:	d9ee      	bls.n	80091f4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009216:	f7f9 f8a7 	bl	8002368 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d102      	bne.n	800922c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009226:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800922a:	e043      	b.n	80092b4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0d2      	beq.n	80091e0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009248:	2308      	movs	r3, #8
 800924a:	e033      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	e02a      	b.n	80092b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d017      	beq.n	800929c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800926c:	2320      	movs	r3, #32
 800926e:	e021      	b.n	80092b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f003 f8a9 	bl	800c3cc <SDMMC_ReadFIFO>
 800927a:	4602      	mov	r2, r0
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	601a      	str	r2, [r3, #0]
    pData++;
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	3304      	adds	r3, #4
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009286:	f7f9 f86f 	bl	8002368 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009294:	d102      	bne.n	800929c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800929a:	e00b      	b.n	80092b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e2      	bne.n	8009270 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a03      	ldr	r2, [pc, #12]	; (80092bc <SD_SendSDStatus+0x19c>)
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3730      	adds	r7, #48	; 0x30
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	18000f3a 	.word	0x18000f3a

080092c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092d4:	e018      	b.n	8009308 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092de:	041b      	lsls	r3, r3, #16
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f003 fa82 	bl	800c7ec <SDMMC_CmdSendStatus>
 80092e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e009      	b.n	8009308 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2100      	movs	r1, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f003 f8c9 	bl	800c492 <SDMMC_GetResponse>
 8009300:	4602      	mov	r2, r0
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f003 f8b3 	bl	800c492 <SDMMC_GetResponse>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009336:	d102      	bne.n	800933e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800933c:	e02f      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f879 	bl	800943c <SD_FindSCR>
 800934a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	e023      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01c      	beq.n	800939a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009368:	041b      	lsls	r3, r3, #16
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f003 f954 	bl	800c61a <SDMMC_CmdAppCommand>
 8009372:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	e00f      	b.n	800939e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2102      	movs	r1, #2
 8009384:	4618      	mov	r0, r3
 8009386:	f003 f98b 	bl	800c6a0 <SDMMC_CmdBusWidth>
 800938a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	e003      	b.n	800939e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009396:	2300      	movs	r3, #0
 8009398:	e001      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800939a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	2300      	movs	r3, #0
 80093b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f003 f868 	bl	800c492 <SDMMC_GetResponse>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093cc:	d102      	bne.n	80093d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093d2:	e02f      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f82e 	bl	800943c <SD_FindSCR>
 80093e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e023      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01c      	beq.n	8009430 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f003 f909 	bl	800c61a <SDMMC_CmdAppCommand>
 8009408:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	e00f      	b.n	8009434 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f003 f940 	bl	800c6a0 <SDMMC_CmdBusWidth>
 8009420:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e003      	b.n	8009434 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800942c:	2300      	movs	r3, #0
 800942e:	e001      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08e      	sub	sp, #56	; 0x38
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009446:	f7f8 ff8f 	bl	8002368 <HAL_GetTick>
 800944a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009450:	2300      	movs	r3, #0
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2108      	movs	r1, #8
 8009462:	4618      	mov	r0, r3
 8009464:	f003 f854 	bl	800c510 <SDMMC_CmdBlockLength>
 8009468:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	e0ad      	b.n	80095d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800947c:	041b      	lsls	r3, r3, #16
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f003 f8ca 	bl	800c61a <SDMMC_CmdAppCommand>
 8009486:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <SD_FindSCR+0x56>
  {
    return errorstate;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	e09e      	b.n	80095d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295
 8009496:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009498:	2308      	movs	r3, #8
 800949a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800949c:	2330      	movs	r3, #48	; 0x30
 800949e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094a0:	2302      	movs	r3, #2
 80094a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f107 0210 	add.w	r2, r7, #16
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 fffe 	bl	800c4b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f003 f910 	bl	800c6e6 <SDMMC_CmdSendSCR>
 80094c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d027      	beq.n	800951e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	e07e      	b.n	80095d0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d113      	bne.n	8009508 <SD_FindSCR+0xcc>
 80094e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d110      	bne.n	8009508 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f002 ff6e 	bl	800c3cc <SDMMC_ReadFIFO>
 80094f0:	4603      	mov	r3, r0
 80094f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 ff67 	bl	800c3cc <SDMMC_ReadFIFO>
 80094fe:	4603      	mov	r3, r0
 8009500:	60fb      	str	r3, [r7, #12]
      index++;
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	3301      	adds	r3, #1
 8009506:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009508:	f7f8 ff2e 	bl	8002368 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d102      	bne.n	800951e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800951c:	e058      	b.n	80095d0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009524:	f240 532a 	movw	r3, #1322	; 0x52a
 8009528:	4013      	ands	r3, r2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0d1      	beq.n	80094d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009534:	f003 0308 	and.w	r3, r3, #8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2208      	movs	r2, #8
 8009542:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009544:	2308      	movs	r3, #8
 8009546:	e043      	b.n	80095d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2202      	movs	r2, #2
 800955c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800955e:	2302      	movs	r3, #2
 8009560:	e036      	b.n	80095d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2220      	movs	r2, #32
 8009576:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009578:	2320      	movs	r3, #32
 800957a:	e029      	b.n	80095d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <SD_FindSCR+0x19c>)
 8009582:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	061a      	lsls	r2, r3, #24
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009590:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800959a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0e1b      	lsrs	r3, r3, #24
 80095a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	601a      	str	r2, [r3, #0]
    scr++;
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	3304      	adds	r3, #4
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	061a      	lsls	r2, r3, #24
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	0e1b      	lsrs	r3, r3, #24
 80095c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3738      	adds	r7, #56	; 0x38
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	18000f3a 	.word	0x18000f3a

080095dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e02b      	b.n	8009648 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7f8 fccd 	bl	8001fa4 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f002 fde5 	bl	800c1ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	461a      	mov	r2, r3
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	f002 fe39 	bl	800c2a4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009632:	4b07      	ldr	r3, [pc, #28]	; (8009650 <HAL_SDRAM_Init+0x74>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a06      	ldr	r2, [pc, #24]	; (8009650 <HAL_SDRAM_Init+0x74>)
 8009638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800963c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	52004000 	.word	0x52004000

08009654 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d10a      	bne.n	8009680 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f80c 	bl	8009688 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695a      	ldr	r2, [r3, #20]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0201 	orr.w	r2, r2, #1
 800967e:	615a      	str	r2, [r3, #20]
  }
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e03e      	b.n	8009730 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7f8 fc62 	bl	8001f90 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3308      	adds	r3, #8
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f002 fc88 	bl	800bfec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	461a      	mov	r2, r3
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	f002 fcf8 	bl	800c0dc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6858      	ldr	r0, [r3, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	f002 fd3f 	bl	800c17c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	6892      	ldr	r2, [r2, #8]
 8009706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	6892      	ldr	r2, [r2, #8]
 8009712:	f041 0101 	orr.w	r1, r1, #1
 8009716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800971a:	4b07      	ldr	r3, [pc, #28]	; (8009738 <HAL_SRAM_Init+0x9c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a06      	ldr	r2, [pc, #24]	; (8009738 <HAL_SRAM_Init+0x9c>)
 8009720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009724:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	52004000 	.word	0x52004000

0800973c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e042      	b.n	80097d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7f8 fa0d 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2224      	movs	r2, #36	; 0x24
 800976a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0201 	bic.w	r2, r2, #1
 800977c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f82e 	bl	80097e0 <UART_SetConfig>
 8009784:	4603      	mov	r3, r0
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e022      	b.n	80097d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f002 f9a0 	bl	800badc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 fa27 	bl	800bc20 <UART_CheckIdleState>
 80097d2:	4603      	mov	r3, r0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80097e4:	b090      	sub	sp, #64	; 0x40
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	431a      	orrs	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	4313      	orrs	r3, r2
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009816:	4313      	orrs	r3, r2
 8009818:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	4bc1      	ldr	r3, [pc, #772]	; (8009b28 <UART_SetConfig+0x348>)
 8009822:	4013      	ands	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800982a:	430b      	orrs	r3, r1
 800982c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4ab7      	ldr	r2, [pc, #732]	; (8009b2c <UART_SetConfig+0x34c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d004      	beq.n	800985e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800985a:	4313      	orrs	r3, r2
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	4bb2      	ldr	r3, [pc, #712]	; (8009b30 <UART_SetConfig+0x350>)
 8009866:	4013      	ands	r3, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800986e:	430b      	orrs	r3, r1
 8009870:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	f023 010f 	bic.w	r1, r3, #15
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4aa9      	ldr	r2, [pc, #676]	; (8009b34 <UART_SetConfig+0x354>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d177      	bne.n	8009982 <UART_SetConfig+0x1a2>
 8009892:	4ba9      	ldr	r3, [pc, #676]	; (8009b38 <UART_SetConfig+0x358>)
 8009894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800989a:	2b28      	cmp	r3, #40	; 0x28
 800989c:	d86c      	bhi.n	8009978 <UART_SetConfig+0x198>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <UART_SetConfig+0xc4>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	08009949 	.word	0x08009949
 80098a8:	08009979 	.word	0x08009979
 80098ac:	08009979 	.word	0x08009979
 80098b0:	08009979 	.word	0x08009979
 80098b4:	08009979 	.word	0x08009979
 80098b8:	08009979 	.word	0x08009979
 80098bc:	08009979 	.word	0x08009979
 80098c0:	08009979 	.word	0x08009979
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009979 	.word	0x08009979
 80098cc:	08009979 	.word	0x08009979
 80098d0:	08009979 	.word	0x08009979
 80098d4:	08009979 	.word	0x08009979
 80098d8:	08009979 	.word	0x08009979
 80098dc:	08009979 	.word	0x08009979
 80098e0:	08009979 	.word	0x08009979
 80098e4:	08009959 	.word	0x08009959
 80098e8:	08009979 	.word	0x08009979
 80098ec:	08009979 	.word	0x08009979
 80098f0:	08009979 	.word	0x08009979
 80098f4:	08009979 	.word	0x08009979
 80098f8:	08009979 	.word	0x08009979
 80098fc:	08009979 	.word	0x08009979
 8009900:	08009979 	.word	0x08009979
 8009904:	08009961 	.word	0x08009961
 8009908:	08009979 	.word	0x08009979
 800990c:	08009979 	.word	0x08009979
 8009910:	08009979 	.word	0x08009979
 8009914:	08009979 	.word	0x08009979
 8009918:	08009979 	.word	0x08009979
 800991c:	08009979 	.word	0x08009979
 8009920:	08009979 	.word	0x08009979
 8009924:	08009969 	.word	0x08009969
 8009928:	08009979 	.word	0x08009979
 800992c:	08009979 	.word	0x08009979
 8009930:	08009979 	.word	0x08009979
 8009934:	08009979 	.word	0x08009979
 8009938:	08009979 	.word	0x08009979
 800993c:	08009979 	.word	0x08009979
 8009940:	08009979 	.word	0x08009979
 8009944:	08009971 	.word	0x08009971
 8009948:	2301      	movs	r3, #1
 800994a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800994e:	e233      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009956:	e22f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800995e:	e22b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009966:	e227      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800996e:	e223      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009976:	e21f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800997e:	bf00      	nop
 8009980:	e21a      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a6d      	ldr	r2, [pc, #436]	; (8009b3c <UART_SetConfig+0x35c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d132      	bne.n	80099f2 <UART_SetConfig+0x212>
 800998c:	4b6a      	ldr	r3, [pc, #424]	; (8009b38 <UART_SetConfig+0x358>)
 800998e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	2b05      	cmp	r3, #5
 8009996:	d827      	bhi.n	80099e8 <UART_SetConfig+0x208>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x1c0>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099b9 	.word	0x080099b9
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c9 	.word	0x080099c9
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e1fb      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e1f7      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e1f3      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e1ef      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	e1eb      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e6:	e1e7      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ee:	bf00      	nop
 80099f0:	e1e2      	b.n	8009db8 <UART_SetConfig+0x5d8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a52      	ldr	r2, [pc, #328]	; (8009b40 <UART_SetConfig+0x360>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d132      	bne.n	8009a62 <UART_SetConfig+0x282>
 80099fc:	4b4e      	ldr	r3, [pc, #312]	; (8009b38 <UART_SetConfig+0x358>)
 80099fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d827      	bhi.n	8009a58 <UART_SetConfig+0x278>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <UART_SetConfig+0x230>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a31 	.word	0x08009a31
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	08009a41 	.word	0x08009a41
 8009a20:	08009a49 	.word	0x08009a49
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e1c3      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a30:	2304      	movs	r3, #4
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e1bf      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e1bb      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a40:	2310      	movs	r3, #16
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e1b7      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e1b3      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e1af      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	bf00      	nop
 8009a60:	e1aa      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a37      	ldr	r2, [pc, #220]	; (8009b44 <UART_SetConfig+0x364>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d132      	bne.n	8009ad2 <UART_SetConfig+0x2f2>
 8009a6c:	4b32      	ldr	r3, [pc, #200]	; (8009b38 <UART_SetConfig+0x358>)
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d827      	bhi.n	8009ac8 <UART_SetConfig+0x2e8>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x2a0>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e18b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	e187      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aae:	e183      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ab6:	e17f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	e17b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ac6:	e177      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ace:	bf00      	nop
 8009ad0:	e172      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a1c      	ldr	r2, [pc, #112]	; (8009b48 <UART_SetConfig+0x368>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d144      	bne.n	8009b66 <UART_SetConfig+0x386>
 8009adc:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <UART_SetConfig+0x358>)
 8009ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d839      	bhi.n	8009b5c <UART_SetConfig+0x37c>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x310>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b4d 	.word	0x08009b4d
 8009b04:	08009b55 	.word	0x08009b55
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0e:	e153      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b10:	2304      	movs	r3, #4
 8009b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b16:	e14f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b1e:	e14b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b20:	2310      	movs	r3, #16
 8009b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b26:	e147      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b28:	cfff69f3 	.word	0xcfff69f3
 8009b2c:	58000c00 	.word	0x58000c00
 8009b30:	11fff4ff 	.word	0x11fff4ff
 8009b34:	40011000 	.word	0x40011000
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	40004400 	.word	0x40004400
 8009b40:	40004800 	.word	0x40004800
 8009b44:	40004c00 	.word	0x40004c00
 8009b48:	40005000 	.word	0x40005000
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b52:	e131      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b54:	2340      	movs	r3, #64	; 0x40
 8009b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b5a:	e12d      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b5c:	2380      	movs	r3, #128	; 0x80
 8009b5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b62:	bf00      	nop
 8009b64:	e128      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4ac3      	ldr	r2, [pc, #780]	; (8009e78 <UART_SetConfig+0x698>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d178      	bne.n	8009c62 <UART_SetConfig+0x482>
 8009b70:	4bc2      	ldr	r3, [pc, #776]	; (8009e7c <UART_SetConfig+0x69c>)
 8009b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b78:	2b28      	cmp	r3, #40	; 0x28
 8009b7a:	d86d      	bhi.n	8009c58 <UART_SetConfig+0x478>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <UART_SetConfig+0x3a4>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009c29 	.word	0x08009c29
 8009b88:	08009c59 	.word	0x08009c59
 8009b8c:	08009c59 	.word	0x08009c59
 8009b90:	08009c59 	.word	0x08009c59
 8009b94:	08009c59 	.word	0x08009c59
 8009b98:	08009c59 	.word	0x08009c59
 8009b9c:	08009c59 	.word	0x08009c59
 8009ba0:	08009c59 	.word	0x08009c59
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c59 	.word	0x08009c59
 8009bac:	08009c59 	.word	0x08009c59
 8009bb0:	08009c59 	.word	0x08009c59
 8009bb4:	08009c59 	.word	0x08009c59
 8009bb8:	08009c59 	.word	0x08009c59
 8009bbc:	08009c59 	.word	0x08009c59
 8009bc0:	08009c59 	.word	0x08009c59
 8009bc4:	08009c39 	.word	0x08009c39
 8009bc8:	08009c59 	.word	0x08009c59
 8009bcc:	08009c59 	.word	0x08009c59
 8009bd0:	08009c59 	.word	0x08009c59
 8009bd4:	08009c59 	.word	0x08009c59
 8009bd8:	08009c59 	.word	0x08009c59
 8009bdc:	08009c59 	.word	0x08009c59
 8009be0:	08009c59 	.word	0x08009c59
 8009be4:	08009c41 	.word	0x08009c41
 8009be8:	08009c59 	.word	0x08009c59
 8009bec:	08009c59 	.word	0x08009c59
 8009bf0:	08009c59 	.word	0x08009c59
 8009bf4:	08009c59 	.word	0x08009c59
 8009bf8:	08009c59 	.word	0x08009c59
 8009bfc:	08009c59 	.word	0x08009c59
 8009c00:	08009c59 	.word	0x08009c59
 8009c04:	08009c49 	.word	0x08009c49
 8009c08:	08009c59 	.word	0x08009c59
 8009c0c:	08009c59 	.word	0x08009c59
 8009c10:	08009c59 	.word	0x08009c59
 8009c14:	08009c59 	.word	0x08009c59
 8009c18:	08009c59 	.word	0x08009c59
 8009c1c:	08009c59 	.word	0x08009c59
 8009c20:	08009c59 	.word	0x08009c59
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c2e:	e0c3      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c36:	e0bf      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c3e:	e0bb      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c46:	e0b7      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c4e:	e0b3      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c50:	2340      	movs	r3, #64	; 0x40
 8009c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c56:	e0af      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c58:	2380      	movs	r3, #128	; 0x80
 8009c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c5e:	bf00      	nop
 8009c60:	e0aa      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a86      	ldr	r2, [pc, #536]	; (8009e80 <UART_SetConfig+0x6a0>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d132      	bne.n	8009cd2 <UART_SetConfig+0x4f2>
 8009c6c:	4b83      	ldr	r3, [pc, #524]	; (8009e7c <UART_SetConfig+0x69c>)
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d827      	bhi.n	8009cc8 <UART_SetConfig+0x4e8>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0x4a0>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c99 	.word	0x08009c99
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009ca9 	.word	0x08009ca9
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e08b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	e087      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cae:	e083      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb6:	e07f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cbe:	e07b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cc6:	e077      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cce:	bf00      	nop
 8009cd0:	e072      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a6b      	ldr	r2, [pc, #428]	; (8009e84 <UART_SetConfig+0x6a4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d132      	bne.n	8009d42 <UART_SetConfig+0x562>
 8009cdc:	4b67      	ldr	r3, [pc, #412]	; (8009e7c <UART_SetConfig+0x69c>)
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	2b05      	cmp	r3, #5
 8009ce6:	d827      	bhi.n	8009d38 <UART_SetConfig+0x558>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x510>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d11 	.word	0x08009d11
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0e:	e053      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d16:	e04f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d1e:	e04b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d26:	e047      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	e043      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d36:	e03f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d3e:	bf00      	nop
 8009d40:	e03a      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a50      	ldr	r2, [pc, #320]	; (8009e88 <UART_SetConfig+0x6a8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d132      	bne.n	8009db2 <UART_SetConfig+0x5d2>
 8009d4c:	4b4b      	ldr	r3, [pc, #300]	; (8009e7c <UART_SetConfig+0x69c>)
 8009d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d827      	bhi.n	8009da8 <UART_SetConfig+0x5c8>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0x580>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d79 	.word	0x08009d79
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d89 	.word	0x08009d89
 8009d6c:	08009d91 	.word	0x08009d91
 8009d70:	08009d99 	.word	0x08009d99
 8009d74:	08009da1 	.word	0x08009da1
 8009d78:	2302      	movs	r3, #2
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	e01b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d80:	2304      	movs	r3, #4
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	e017      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d8e:	e013      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d90:	2310      	movs	r3, #16
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e00f      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e00b      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009da0:	2340      	movs	r3, #64	; 0x40
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e007      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	bf00      	nop
 8009db0:	e002      	b.n	8009db8 <UART_SetConfig+0x5d8>
 8009db2:	2380      	movs	r3, #128	; 0x80
 8009db4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a32      	ldr	r2, [pc, #200]	; (8009e88 <UART_SetConfig+0x6a8>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	f040 86f7 	bne.w	800abb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	f000 80c0 	beq.w	8009f4e <UART_SetConfig+0x76e>
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	dc04      	bgt.n	8009ddc <UART_SetConfig+0x5fc>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d00c      	beq.n	8009df0 <UART_SetConfig+0x610>
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	d065      	beq.n	8009ea6 <UART_SetConfig+0x6c6>
 8009dda:	e27a      	b.n	800a2d2 <UART_SetConfig+0xaf2>
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	f000 81b0 	beq.w	800a142 <UART_SetConfig+0x962>
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	f000 821e 	beq.w	800a224 <UART_SetConfig+0xa44>
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	f000 8104 	beq.w	8009ff6 <UART_SetConfig+0x816>
 8009dee:	e270      	b.n	800a2d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009df0:	f7fd fb94 	bl	800751c <HAL_RCCEx_GetD3PCLK1Freq>
 8009df4:	4602      	mov	r2, r0
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d04e      	beq.n	8009e9c <UART_SetConfig+0x6bc>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d048      	beq.n	8009e98 <UART_SetConfig+0x6b8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d042      	beq.n	8009e94 <UART_SetConfig+0x6b4>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d03c      	beq.n	8009e90 <UART_SetConfig+0x6b0>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d036      	beq.n	8009e8c <UART_SetConfig+0x6ac>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d026      	beq.n	8009e74 <UART_SetConfig+0x694>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	2b06      	cmp	r3, #6
 8009e2c:	d020      	beq.n	8009e70 <UART_SetConfig+0x690>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	2b07      	cmp	r3, #7
 8009e34:	d01a      	beq.n	8009e6c <UART_SetConfig+0x68c>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d014      	beq.n	8009e68 <UART_SetConfig+0x688>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2b09      	cmp	r3, #9
 8009e44:	d00e      	beq.n	8009e64 <UART_SetConfig+0x684>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2b0a      	cmp	r3, #10
 8009e4c:	d008      	beq.n	8009e60 <UART_SetConfig+0x680>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b0b      	cmp	r3, #11
 8009e54:	d102      	bne.n	8009e5c <UART_SetConfig+0x67c>
 8009e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e5a:	e020      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e01e      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e60:	2380      	movs	r3, #128	; 0x80
 8009e62:	e01c      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	e01a      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e68:	2320      	movs	r3, #32
 8009e6a:	e018      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	e016      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e70:	230c      	movs	r3, #12
 8009e72:	e014      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e74:	230a      	movs	r3, #10
 8009e76:	e012      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e78:	40011400 	.word	0x40011400
 8009e7c:	58024400 	.word	0x58024400
 8009e80:	40007800 	.word	0x40007800
 8009e84:	40007c00 	.word	0x40007c00
 8009e88:	58000c00 	.word	0x58000c00
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	e006      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e90:	2306      	movs	r3, #6
 8009e92:	e004      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e94:	2304      	movs	r3, #4
 8009e96:	e002      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e000      	b.n	8009e9e <UART_SetConfig+0x6be>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ea4:	e219      	b.n	800a2da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea6:	f107 0318 	add.w	r3, r7, #24
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fd fb4c 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d044      	beq.n	8009f44 <UART_SetConfig+0x764>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d03e      	beq.n	8009f40 <UART_SetConfig+0x760>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d038      	beq.n	8009f3c <UART_SetConfig+0x75c>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d032      	beq.n	8009f38 <UART_SetConfig+0x758>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d02c      	beq.n	8009f34 <UART_SetConfig+0x754>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d026      	beq.n	8009f30 <UART_SetConfig+0x750>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d020      	beq.n	8009f2c <UART_SetConfig+0x74c>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	2b07      	cmp	r3, #7
 8009ef0:	d01a      	beq.n	8009f28 <UART_SetConfig+0x748>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d014      	beq.n	8009f24 <UART_SetConfig+0x744>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	2b09      	cmp	r3, #9
 8009f00:	d00e      	beq.n	8009f20 <UART_SetConfig+0x740>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	2b0a      	cmp	r3, #10
 8009f08:	d008      	beq.n	8009f1c <UART_SetConfig+0x73c>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b0b      	cmp	r3, #11
 8009f10:	d102      	bne.n	8009f18 <UART_SetConfig+0x738>
 8009f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f16:	e016      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e014      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f1c:	2380      	movs	r3, #128	; 0x80
 8009f1e:	e012      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	e010      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f24:	2320      	movs	r3, #32
 8009f26:	e00e      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	e00c      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	e00a      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f30:	230a      	movs	r3, #10
 8009f32:	e008      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f34:	2308      	movs	r3, #8
 8009f36:	e006      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f38:	2306      	movs	r3, #6
 8009f3a:	e004      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	e002      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e000      	b.n	8009f46 <UART_SetConfig+0x766>
 8009f44:	2301      	movs	r3, #1
 8009f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f4c:	e1c5      	b.n	800a2da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fc44 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d044      	beq.n	8009fec <UART_SetConfig+0x80c>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d03e      	beq.n	8009fe8 <UART_SetConfig+0x808>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d038      	beq.n	8009fe4 <UART_SetConfig+0x804>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d032      	beq.n	8009fe0 <UART_SetConfig+0x800>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d02c      	beq.n	8009fdc <UART_SetConfig+0x7fc>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d026      	beq.n	8009fd8 <UART_SetConfig+0x7f8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	2b06      	cmp	r3, #6
 8009f90:	d020      	beq.n	8009fd4 <UART_SetConfig+0x7f4>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	d01a      	beq.n	8009fd0 <UART_SetConfig+0x7f0>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d014      	beq.n	8009fcc <UART_SetConfig+0x7ec>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	2b09      	cmp	r3, #9
 8009fa8:	d00e      	beq.n	8009fc8 <UART_SetConfig+0x7e8>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	2b0a      	cmp	r3, #10
 8009fb0:	d008      	beq.n	8009fc4 <UART_SetConfig+0x7e4>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b0b      	cmp	r3, #11
 8009fb8:	d102      	bne.n	8009fc0 <UART_SetConfig+0x7e0>
 8009fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbe:	e016      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e014      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	e012      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fc8:	2340      	movs	r3, #64	; 0x40
 8009fca:	e010      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fcc:	2320      	movs	r3, #32
 8009fce:	e00e      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	e00c      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	e00a      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fd8:	230a      	movs	r3, #10
 8009fda:	e008      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	e006      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fe0:	2306      	movs	r3, #6
 8009fe2:	e004      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	e002      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e000      	b.n	8009fee <UART_SetConfig+0x80e>
 8009fec:	2301      	movs	r3, #1
 8009fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ff4:	e171      	b.n	800a2da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff6:	4b7a      	ldr	r3, [pc, #488]	; (800a1e0 <UART_SetConfig+0xa00>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d054      	beq.n	800a0ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a002:	4b77      	ldr	r3, [pc, #476]	; (800a1e0 <UART_SetConfig+0xa00>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	08db      	lsrs	r3, r3, #3
 800a008:	f003 0303 	and.w	r3, r3, #3
 800a00c:	4a75      	ldr	r2, [pc, #468]	; (800a1e4 <UART_SetConfig+0xa04>)
 800a00e:	40da      	lsrs	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d044      	beq.n	800a0a2 <UART_SetConfig+0x8c2>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d03e      	beq.n	800a09e <UART_SetConfig+0x8be>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b02      	cmp	r3, #2
 800a026:	d038      	beq.n	800a09a <UART_SetConfig+0x8ba>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d032      	beq.n	800a096 <UART_SetConfig+0x8b6>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b04      	cmp	r3, #4
 800a036:	d02c      	beq.n	800a092 <UART_SetConfig+0x8b2>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b05      	cmp	r3, #5
 800a03e:	d026      	beq.n	800a08e <UART_SetConfig+0x8ae>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b06      	cmp	r3, #6
 800a046:	d020      	beq.n	800a08a <UART_SetConfig+0x8aa>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b07      	cmp	r3, #7
 800a04e:	d01a      	beq.n	800a086 <UART_SetConfig+0x8a6>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b08      	cmp	r3, #8
 800a056:	d014      	beq.n	800a082 <UART_SetConfig+0x8a2>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b09      	cmp	r3, #9
 800a05e:	d00e      	beq.n	800a07e <UART_SetConfig+0x89e>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b0a      	cmp	r3, #10
 800a066:	d008      	beq.n	800a07a <UART_SetConfig+0x89a>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b0b      	cmp	r3, #11
 800a06e:	d102      	bne.n	800a076 <UART_SetConfig+0x896>
 800a070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a074:	e016      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a076:	2301      	movs	r3, #1
 800a078:	e014      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a07a:	2380      	movs	r3, #128	; 0x80
 800a07c:	e012      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a07e:	2340      	movs	r3, #64	; 0x40
 800a080:	e010      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a082:	2320      	movs	r3, #32
 800a084:	e00e      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a086:	2310      	movs	r3, #16
 800a088:	e00c      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a08a:	230c      	movs	r3, #12
 800a08c:	e00a      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a08e:	230a      	movs	r3, #10
 800a090:	e008      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a092:	2308      	movs	r3, #8
 800a094:	e006      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a096:	2306      	movs	r3, #6
 800a098:	e004      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a09a:	2304      	movs	r3, #4
 800a09c:	e002      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e000      	b.n	800a0a4 <UART_SetConfig+0x8c4>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a0aa:	e116      	b.n	800a2da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d043      	beq.n	800a13c <UART_SetConfig+0x95c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d03d      	beq.n	800a138 <UART_SetConfig+0x958>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d037      	beq.n	800a134 <UART_SetConfig+0x954>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d031      	beq.n	800a130 <UART_SetConfig+0x950>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d02b      	beq.n	800a12c <UART_SetConfig+0x94c>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b05      	cmp	r3, #5
 800a0da:	d025      	beq.n	800a128 <UART_SetConfig+0x948>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d01f      	beq.n	800a124 <UART_SetConfig+0x944>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b07      	cmp	r3, #7
 800a0ea:	d019      	beq.n	800a120 <UART_SetConfig+0x940>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d013      	beq.n	800a11c <UART_SetConfig+0x93c>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b09      	cmp	r3, #9
 800a0fa:	d00d      	beq.n	800a118 <UART_SetConfig+0x938>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b0a      	cmp	r3, #10
 800a102:	d007      	beq.n	800a114 <UART_SetConfig+0x934>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b0b      	cmp	r3, #11
 800a10a:	d101      	bne.n	800a110 <UART_SetConfig+0x930>
 800a10c:	4b36      	ldr	r3, [pc, #216]	; (800a1e8 <UART_SetConfig+0xa08>)
 800a10e:	e016      	b.n	800a13e <UART_SetConfig+0x95e>
 800a110:	4b34      	ldr	r3, [pc, #208]	; (800a1e4 <UART_SetConfig+0xa04>)
 800a112:	e014      	b.n	800a13e <UART_SetConfig+0x95e>
 800a114:	4b35      	ldr	r3, [pc, #212]	; (800a1ec <UART_SetConfig+0xa0c>)
 800a116:	e012      	b.n	800a13e <UART_SetConfig+0x95e>
 800a118:	4b35      	ldr	r3, [pc, #212]	; (800a1f0 <UART_SetConfig+0xa10>)
 800a11a:	e010      	b.n	800a13e <UART_SetConfig+0x95e>
 800a11c:	4b35      	ldr	r3, [pc, #212]	; (800a1f4 <UART_SetConfig+0xa14>)
 800a11e:	e00e      	b.n	800a13e <UART_SetConfig+0x95e>
 800a120:	4b35      	ldr	r3, [pc, #212]	; (800a1f8 <UART_SetConfig+0xa18>)
 800a122:	e00c      	b.n	800a13e <UART_SetConfig+0x95e>
 800a124:	4b35      	ldr	r3, [pc, #212]	; (800a1fc <UART_SetConfig+0xa1c>)
 800a126:	e00a      	b.n	800a13e <UART_SetConfig+0x95e>
 800a128:	4b35      	ldr	r3, [pc, #212]	; (800a200 <UART_SetConfig+0xa20>)
 800a12a:	e008      	b.n	800a13e <UART_SetConfig+0x95e>
 800a12c:	4b35      	ldr	r3, [pc, #212]	; (800a204 <UART_SetConfig+0xa24>)
 800a12e:	e006      	b.n	800a13e <UART_SetConfig+0x95e>
 800a130:	4b35      	ldr	r3, [pc, #212]	; (800a208 <UART_SetConfig+0xa28>)
 800a132:	e004      	b.n	800a13e <UART_SetConfig+0x95e>
 800a134:	4b35      	ldr	r3, [pc, #212]	; (800a20c <UART_SetConfig+0xa2c>)
 800a136:	e002      	b.n	800a13e <UART_SetConfig+0x95e>
 800a138:	4b35      	ldr	r3, [pc, #212]	; (800a210 <UART_SetConfig+0xa30>)
 800a13a:	e000      	b.n	800a13e <UART_SetConfig+0x95e>
 800a13c:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <UART_SetConfig+0xa04>)
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a140:	e0cb      	b.n	800a2da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d046      	beq.n	800a1d8 <UART_SetConfig+0x9f8>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d040      	beq.n	800a1d4 <UART_SetConfig+0x9f4>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b02      	cmp	r3, #2
 800a158:	d03a      	beq.n	800a1d0 <UART_SetConfig+0x9f0>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d034      	beq.n	800a1cc <UART_SetConfig+0x9ec>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b04      	cmp	r3, #4
 800a168:	d02e      	beq.n	800a1c8 <UART_SetConfig+0x9e8>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b05      	cmp	r3, #5
 800a170:	d028      	beq.n	800a1c4 <UART_SetConfig+0x9e4>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b06      	cmp	r3, #6
 800a178:	d022      	beq.n	800a1c0 <UART_SetConfig+0x9e0>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b07      	cmp	r3, #7
 800a180:	d01c      	beq.n	800a1bc <UART_SetConfig+0x9dc>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b08      	cmp	r3, #8
 800a188:	d016      	beq.n	800a1b8 <UART_SetConfig+0x9d8>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d00f      	beq.n	800a1b2 <UART_SetConfig+0x9d2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b0a      	cmp	r3, #10
 800a198:	d008      	beq.n	800a1ac <UART_SetConfig+0x9cc>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b0b      	cmp	r3, #11
 800a1a0:	d102      	bne.n	800a1a8 <UART_SetConfig+0x9c8>
 800a1a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a1a6:	e018      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1a8:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <UART_SetConfig+0xa18>)
 800a1aa:	e016      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a1b0:	e013      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a1b6:	e010      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1b8:	4b16      	ldr	r3, [pc, #88]	; (800a214 <UART_SetConfig+0xa34>)
 800a1ba:	e00e      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <UART_SetConfig+0xa08>)
 800a1be:	e00c      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1c0:	4b15      	ldr	r3, [pc, #84]	; (800a218 <UART_SetConfig+0xa38>)
 800a1c2:	e00a      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1c4:	4b15      	ldr	r3, [pc, #84]	; (800a21c <UART_SetConfig+0xa3c>)
 800a1c6:	e008      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1c8:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <UART_SetConfig+0xa0c>)
 800a1ca:	e006      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <UART_SetConfig+0xa40>)
 800a1ce:	e004      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1d0:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <UART_SetConfig+0xa10>)
 800a1d2:	e002      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1d4:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <UART_SetConfig+0xa14>)
 800a1d6:	e000      	b.n	800a1da <UART_SetConfig+0x9fa>
 800a1d8:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <UART_SetConfig+0xa18>)
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1dc:	e07d      	b.n	800a2da <UART_SetConfig+0xafa>
 800a1de:	bf00      	nop
 800a1e0:	58024400 	.word	0x58024400
 800a1e4:	03d09000 	.word	0x03d09000
 800a1e8:	0003d090 	.word	0x0003d090
 800a1ec:	0007a120 	.word	0x0007a120
 800a1f0:	000f4240 	.word	0x000f4240
 800a1f4:	001e8480 	.word	0x001e8480
 800a1f8:	003d0900 	.word	0x003d0900
 800a1fc:	00516155 	.word	0x00516155
 800a200:	0061a800 	.word	0x0061a800
 800a204:	007a1200 	.word	0x007a1200
 800a208:	00a2c2aa 	.word	0x00a2c2aa
 800a20c:	00f42400 	.word	0x00f42400
 800a210:	01e84800 	.word	0x01e84800
 800a214:	0001e848 	.word	0x0001e848
 800a218:	00051615 	.word	0x00051615
 800a21c:	00061a80 	.word	0x00061a80
 800a220:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d04e      	beq.n	800a2ca <UART_SetConfig+0xaea>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	2b01      	cmp	r3, #1
 800a232:	d047      	beq.n	800a2c4 <UART_SetConfig+0xae4>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d040      	beq.n	800a2be <UART_SetConfig+0xade>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	2b03      	cmp	r3, #3
 800a242:	d039      	beq.n	800a2b8 <UART_SetConfig+0xad8>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d032      	beq.n	800a2b2 <UART_SetConfig+0xad2>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b05      	cmp	r3, #5
 800a252:	d02b      	beq.n	800a2ac <UART_SetConfig+0xacc>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b06      	cmp	r3, #6
 800a25a:	d024      	beq.n	800a2a6 <UART_SetConfig+0xac6>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b07      	cmp	r3, #7
 800a262:	d01d      	beq.n	800a2a0 <UART_SetConfig+0xac0>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d016      	beq.n	800a29a <UART_SetConfig+0xaba>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b09      	cmp	r3, #9
 800a272:	d00f      	beq.n	800a294 <UART_SetConfig+0xab4>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b0a      	cmp	r3, #10
 800a27a:	d008      	beq.n	800a28e <UART_SetConfig+0xaae>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	2b0b      	cmp	r3, #11
 800a282:	d101      	bne.n	800a288 <UART_SetConfig+0xaa8>
 800a284:	2380      	movs	r3, #128	; 0x80
 800a286:	e022      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a28c:	e01f      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a28e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a292:	e01c      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a294:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a298:	e019      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29e:	e016      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a4:	e013      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a2aa:	e010      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a2b0:	e00d      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b6:	e00a      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2b8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a2bc:	e007      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2c2:	e004      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2c8:	e001      	b.n	800a2ce <UART_SetConfig+0xaee>
 800a2ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2d0:	e003      	b.n	800a2da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a2d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f001 83e8 	beq.w	800bab2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d305      	bcc.n	800a2fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d904      	bls.n	800a308 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a304:	f001 bbd5 	b.w	800bab2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a308:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	f000 8154 	beq.w	800a5ba <UART_SetConfig+0xdda>
 800a312:	2b08      	cmp	r3, #8
 800a314:	dc06      	bgt.n	800a324 <UART_SetConfig+0xb44>
 800a316:	2b02      	cmp	r3, #2
 800a318:	d00f      	beq.n	800a33a <UART_SetConfig+0xb5a>
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	f000 80ac 	beq.w	800a478 <UART_SetConfig+0xc98>
 800a320:	f000 bc30 	b.w	800ab84 <UART_SetConfig+0x13a4>
 800a324:	2b20      	cmp	r3, #32
 800a326:	f000 832d 	beq.w	800a984 <UART_SetConfig+0x11a4>
 800a32a:	2b40      	cmp	r3, #64	; 0x40
 800a32c:	f000 83a5 	beq.w	800aa7a <UART_SetConfig+0x129a>
 800a330:	2b10      	cmp	r3, #16
 800a332:	f000 81e3 	beq.w	800a6fc <UART_SetConfig+0xf1c>
 800a336:	f000 bc25 	b.w	800ab84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a33a:	f7fd f8ef 	bl	800751c <HAL_RCCEx_GetD3PCLK1Freq>
 800a33e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	4618      	mov	r0, r3
 800a344:	f04f 0100 	mov.w	r1, #0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d067      	beq.n	800a420 <UART_SetConfig+0xc40>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	2b01      	cmp	r3, #1
 800a356:	d05e      	beq.n	800a416 <UART_SetConfig+0xc36>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d055      	beq.n	800a40c <UART_SetConfig+0xc2c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b03      	cmp	r3, #3
 800a366:	d04c      	beq.n	800a402 <UART_SetConfig+0xc22>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d043      	beq.n	800a3f8 <UART_SetConfig+0xc18>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a374:	2b05      	cmp	r3, #5
 800a376:	d03a      	beq.n	800a3ee <UART_SetConfig+0xc0e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	2b06      	cmp	r3, #6
 800a37e:	d031      	beq.n	800a3e4 <UART_SetConfig+0xc04>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	2b07      	cmp	r3, #7
 800a386:	d028      	beq.n	800a3da <UART_SetConfig+0xbfa>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d01f      	beq.n	800a3d0 <UART_SetConfig+0xbf0>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2b09      	cmp	r3, #9
 800a396:	d016      	beq.n	800a3c6 <UART_SetConfig+0xbe6>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b0a      	cmp	r3, #10
 800a39e:	d00d      	beq.n	800a3bc <UART_SetConfig+0xbdc>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b0b      	cmp	r3, #11
 800a3a6:	d104      	bne.n	800a3b2 <UART_SetConfig+0xbd2>
 800a3a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3ac:	f04f 0400 	mov.w	r4, #0
 800a3b0:	e03a      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3b2:	f04f 0301 	mov.w	r3, #1
 800a3b6:	f04f 0400 	mov.w	r4, #0
 800a3ba:	e035      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a3c0:	f04f 0400 	mov.w	r4, #0
 800a3c4:	e030      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a3ca:	f04f 0400 	mov.w	r4, #0
 800a3ce:	e02b      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3d0:	f04f 0320 	mov.w	r3, #32
 800a3d4:	f04f 0400 	mov.w	r4, #0
 800a3d8:	e026      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3da:	f04f 0310 	mov.w	r3, #16
 800a3de:	f04f 0400 	mov.w	r4, #0
 800a3e2:	e021      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3e4:	f04f 030c 	mov.w	r3, #12
 800a3e8:	f04f 0400 	mov.w	r4, #0
 800a3ec:	e01c      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3ee:	f04f 030a 	mov.w	r3, #10
 800a3f2:	f04f 0400 	mov.w	r4, #0
 800a3f6:	e017      	b.n	800a428 <UART_SetConfig+0xc48>
 800a3f8:	f04f 0308 	mov.w	r3, #8
 800a3fc:	f04f 0400 	mov.w	r4, #0
 800a400:	e012      	b.n	800a428 <UART_SetConfig+0xc48>
 800a402:	f04f 0306 	mov.w	r3, #6
 800a406:	f04f 0400 	mov.w	r4, #0
 800a40a:	e00d      	b.n	800a428 <UART_SetConfig+0xc48>
 800a40c:	f04f 0304 	mov.w	r3, #4
 800a410:	f04f 0400 	mov.w	r4, #0
 800a414:	e008      	b.n	800a428 <UART_SetConfig+0xc48>
 800a416:	f04f 0302 	mov.w	r3, #2
 800a41a:	f04f 0400 	mov.w	r4, #0
 800a41e:	e003      	b.n	800a428 <UART_SetConfig+0xc48>
 800a420:	f04f 0301 	mov.w	r3, #1
 800a424:	f04f 0400 	mov.w	r4, #0
 800a428:	461a      	mov	r2, r3
 800a42a:	4623      	mov	r3, r4
 800a42c:	f7f5 ff54 	bl	80002d8 <__aeabi_uldivmod>
 800a430:	4603      	mov	r3, r0
 800a432:	460c      	mov	r4, r1
 800a434:	4619      	mov	r1, r3
 800a436:	4622      	mov	r2, r4
 800a438:	f04f 0300 	mov.w	r3, #0
 800a43c:	f04f 0400 	mov.w	r4, #0
 800a440:	0214      	lsls	r4, r2, #8
 800a442:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a446:	020b      	lsls	r3, r1, #8
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6852      	ldr	r2, [r2, #4]
 800a44c:	0852      	lsrs	r2, r2, #1
 800a44e:	4611      	mov	r1, r2
 800a450:	f04f 0200 	mov.w	r2, #0
 800a454:	eb13 0b01 	adds.w	fp, r3, r1
 800a458:	eb44 0c02 	adc.w	ip, r4, r2
 800a45c:	4658      	mov	r0, fp
 800a45e:	4661      	mov	r1, ip
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f04f 0400 	mov.w	r4, #0
 800a468:	461a      	mov	r2, r3
 800a46a:	4623      	mov	r3, r4
 800a46c:	f7f5 ff34 	bl	80002d8 <__aeabi_uldivmod>
 800a470:	4603      	mov	r3, r0
 800a472:	460c      	mov	r4, r1
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a476:	e389      	b.n	800ab8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a478:	f107 0318 	add.w	r3, r7, #24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fd f863 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	4618      	mov	r0, r3
 800a486:	f04f 0100 	mov.w	r1, #0
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d067      	beq.n	800a562 <UART_SetConfig+0xd82>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b01      	cmp	r3, #1
 800a498:	d05e      	beq.n	800a558 <UART_SetConfig+0xd78>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d055      	beq.n	800a54e <UART_SetConfig+0xd6e>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d04c      	beq.n	800a544 <UART_SetConfig+0xd64>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d043      	beq.n	800a53a <UART_SetConfig+0xd5a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d03a      	beq.n	800a530 <UART_SetConfig+0xd50>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	2b06      	cmp	r3, #6
 800a4c0:	d031      	beq.n	800a526 <UART_SetConfig+0xd46>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	2b07      	cmp	r3, #7
 800a4c8:	d028      	beq.n	800a51c <UART_SetConfig+0xd3c>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d01f      	beq.n	800a512 <UART_SetConfig+0xd32>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d016      	beq.n	800a508 <UART_SetConfig+0xd28>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b0a      	cmp	r3, #10
 800a4e0:	d00d      	beq.n	800a4fe <UART_SetConfig+0xd1e>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2b0b      	cmp	r3, #11
 800a4e8:	d104      	bne.n	800a4f4 <UART_SetConfig+0xd14>
 800a4ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ee:	f04f 0400 	mov.w	r4, #0
 800a4f2:	e03a      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a4f4:	f04f 0301 	mov.w	r3, #1
 800a4f8:	f04f 0400 	mov.w	r4, #0
 800a4fc:	e035      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a4fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a502:	f04f 0400 	mov.w	r4, #0
 800a506:	e030      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a508:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a50c:	f04f 0400 	mov.w	r4, #0
 800a510:	e02b      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a512:	f04f 0320 	mov.w	r3, #32
 800a516:	f04f 0400 	mov.w	r4, #0
 800a51a:	e026      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a51c:	f04f 0310 	mov.w	r3, #16
 800a520:	f04f 0400 	mov.w	r4, #0
 800a524:	e021      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a526:	f04f 030c 	mov.w	r3, #12
 800a52a:	f04f 0400 	mov.w	r4, #0
 800a52e:	e01c      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a530:	f04f 030a 	mov.w	r3, #10
 800a534:	f04f 0400 	mov.w	r4, #0
 800a538:	e017      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a53a:	f04f 0308 	mov.w	r3, #8
 800a53e:	f04f 0400 	mov.w	r4, #0
 800a542:	e012      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a544:	f04f 0306 	mov.w	r3, #6
 800a548:	f04f 0400 	mov.w	r4, #0
 800a54c:	e00d      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a54e:	f04f 0304 	mov.w	r3, #4
 800a552:	f04f 0400 	mov.w	r4, #0
 800a556:	e008      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a558:	f04f 0302 	mov.w	r3, #2
 800a55c:	f04f 0400 	mov.w	r4, #0
 800a560:	e003      	b.n	800a56a <UART_SetConfig+0xd8a>
 800a562:	f04f 0301 	mov.w	r3, #1
 800a566:	f04f 0400 	mov.w	r4, #0
 800a56a:	461a      	mov	r2, r3
 800a56c:	4623      	mov	r3, r4
 800a56e:	f7f5 feb3 	bl	80002d8 <__aeabi_uldivmod>
 800a572:	4603      	mov	r3, r0
 800a574:	460c      	mov	r4, r1
 800a576:	4619      	mov	r1, r3
 800a578:	4622      	mov	r2, r4
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	f04f 0400 	mov.w	r4, #0
 800a582:	0214      	lsls	r4, r2, #8
 800a584:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a588:	020b      	lsls	r3, r1, #8
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6852      	ldr	r2, [r2, #4]
 800a58e:	0852      	lsrs	r2, r2, #1
 800a590:	4611      	mov	r1, r2
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	eb13 0b01 	adds.w	fp, r3, r1
 800a59a:	eb44 0c02 	adc.w	ip, r4, r2
 800a59e:	4658      	mov	r0, fp
 800a5a0:	4661      	mov	r1, ip
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f04f 0400 	mov.w	r4, #0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4623      	mov	r3, r4
 800a5ae:	f7f5 fe93 	bl	80002d8 <__aeabi_uldivmod>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5b8:	e2e8      	b.n	800ab8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fd f90e 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f04f 0100 	mov.w	r1, #0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d067      	beq.n	800a6a4 <UART_SetConfig+0xec4>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d05e      	beq.n	800a69a <UART_SetConfig+0xeba>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d055      	beq.n	800a690 <UART_SetConfig+0xeb0>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d04c      	beq.n	800a686 <UART_SetConfig+0xea6>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d043      	beq.n	800a67c <UART_SetConfig+0xe9c>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d03a      	beq.n	800a672 <UART_SetConfig+0xe92>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	2b06      	cmp	r3, #6
 800a602:	d031      	beq.n	800a668 <UART_SetConfig+0xe88>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	2b07      	cmp	r3, #7
 800a60a:	d028      	beq.n	800a65e <UART_SetConfig+0xe7e>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	2b08      	cmp	r3, #8
 800a612:	d01f      	beq.n	800a654 <UART_SetConfig+0xe74>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b09      	cmp	r3, #9
 800a61a:	d016      	beq.n	800a64a <UART_SetConfig+0xe6a>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b0a      	cmp	r3, #10
 800a622:	d00d      	beq.n	800a640 <UART_SetConfig+0xe60>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b0b      	cmp	r3, #11
 800a62a:	d104      	bne.n	800a636 <UART_SetConfig+0xe56>
 800a62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a630:	f04f 0400 	mov.w	r4, #0
 800a634:	e03a      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a636:	f04f 0301 	mov.w	r3, #1
 800a63a:	f04f 0400 	mov.w	r4, #0
 800a63e:	e035      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a640:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a644:	f04f 0400 	mov.w	r4, #0
 800a648:	e030      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a64a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a64e:	f04f 0400 	mov.w	r4, #0
 800a652:	e02b      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a654:	f04f 0320 	mov.w	r3, #32
 800a658:	f04f 0400 	mov.w	r4, #0
 800a65c:	e026      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a65e:	f04f 0310 	mov.w	r3, #16
 800a662:	f04f 0400 	mov.w	r4, #0
 800a666:	e021      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a668:	f04f 030c 	mov.w	r3, #12
 800a66c:	f04f 0400 	mov.w	r4, #0
 800a670:	e01c      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a672:	f04f 030a 	mov.w	r3, #10
 800a676:	f04f 0400 	mov.w	r4, #0
 800a67a:	e017      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a67c:	f04f 0308 	mov.w	r3, #8
 800a680:	f04f 0400 	mov.w	r4, #0
 800a684:	e012      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a686:	f04f 0306 	mov.w	r3, #6
 800a68a:	f04f 0400 	mov.w	r4, #0
 800a68e:	e00d      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a690:	f04f 0304 	mov.w	r3, #4
 800a694:	f04f 0400 	mov.w	r4, #0
 800a698:	e008      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a69a:	f04f 0302 	mov.w	r3, #2
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	e003      	b.n	800a6ac <UART_SetConfig+0xecc>
 800a6a4:	f04f 0301 	mov.w	r3, #1
 800a6a8:	f04f 0400 	mov.w	r4, #0
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4623      	mov	r3, r4
 800a6b0:	f7f5 fe12 	bl	80002d8 <__aeabi_uldivmod>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	f04f 0300 	mov.w	r3, #0
 800a6c0:	f04f 0400 	mov.w	r4, #0
 800a6c4:	0214      	lsls	r4, r2, #8
 800a6c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a6ca:	020b      	lsls	r3, r1, #8
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6852      	ldr	r2, [r2, #4]
 800a6d0:	0852      	lsrs	r2, r2, #1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	f04f 0200 	mov.w	r2, #0
 800a6d8:	eb13 0b01 	adds.w	fp, r3, r1
 800a6dc:	eb44 0c02 	adc.w	ip, r4, r2
 800a6e0:	4658      	mov	r0, fp
 800a6e2:	4661      	mov	r1, ip
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f04f 0400 	mov.w	r4, #0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	f7f5 fdf2 	bl	80002d8 <__aeabi_uldivmod>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6fa:	e247      	b.n	800ab8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6fc:	4b96      	ldr	r3, [pc, #600]	; (800a958 <UART_SetConfig+0x1178>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 80a3 	beq.w	800a850 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70a:	4b93      	ldr	r3, [pc, #588]	; (800a958 <UART_SetConfig+0x1178>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	4a91      	ldr	r2, [pc, #580]	; (800a95c <UART_SetConfig+0x117c>)
 800a716:	fa22 f303 	lsr.w	r3, r2, r3
 800a71a:	4618      	mov	r0, r3
 800a71c:	f04f 0100 	mov.w	r1, #0
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	2b00      	cmp	r3, #0
 800a726:	d067      	beq.n	800a7f8 <UART_SetConfig+0x1018>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d05e      	beq.n	800a7ee <UART_SetConfig+0x100e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b02      	cmp	r3, #2
 800a736:	d055      	beq.n	800a7e4 <UART_SetConfig+0x1004>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d04c      	beq.n	800a7da <UART_SetConfig+0xffa>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b04      	cmp	r3, #4
 800a746:	d043      	beq.n	800a7d0 <UART_SetConfig+0xff0>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b05      	cmp	r3, #5
 800a74e:	d03a      	beq.n	800a7c6 <UART_SetConfig+0xfe6>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b06      	cmp	r3, #6
 800a756:	d031      	beq.n	800a7bc <UART_SetConfig+0xfdc>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b07      	cmp	r3, #7
 800a75e:	d028      	beq.n	800a7b2 <UART_SetConfig+0xfd2>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b08      	cmp	r3, #8
 800a766:	d01f      	beq.n	800a7a8 <UART_SetConfig+0xfc8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b09      	cmp	r3, #9
 800a76e:	d016      	beq.n	800a79e <UART_SetConfig+0xfbe>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b0a      	cmp	r3, #10
 800a776:	d00d      	beq.n	800a794 <UART_SetConfig+0xfb4>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b0b      	cmp	r3, #11
 800a77e:	d104      	bne.n	800a78a <UART_SetConfig+0xfaa>
 800a780:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a784:	f04f 0400 	mov.w	r4, #0
 800a788:	e03a      	b.n	800a800 <UART_SetConfig+0x1020>
 800a78a:	f04f 0301 	mov.w	r3, #1
 800a78e:	f04f 0400 	mov.w	r4, #0
 800a792:	e035      	b.n	800a800 <UART_SetConfig+0x1020>
 800a794:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a798:	f04f 0400 	mov.w	r4, #0
 800a79c:	e030      	b.n	800a800 <UART_SetConfig+0x1020>
 800a79e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a7a2:	f04f 0400 	mov.w	r4, #0
 800a7a6:	e02b      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7a8:	f04f 0320 	mov.w	r3, #32
 800a7ac:	f04f 0400 	mov.w	r4, #0
 800a7b0:	e026      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7b2:	f04f 0310 	mov.w	r3, #16
 800a7b6:	f04f 0400 	mov.w	r4, #0
 800a7ba:	e021      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7bc:	f04f 030c 	mov.w	r3, #12
 800a7c0:	f04f 0400 	mov.w	r4, #0
 800a7c4:	e01c      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7c6:	f04f 030a 	mov.w	r3, #10
 800a7ca:	f04f 0400 	mov.w	r4, #0
 800a7ce:	e017      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7d0:	f04f 0308 	mov.w	r3, #8
 800a7d4:	f04f 0400 	mov.w	r4, #0
 800a7d8:	e012      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7da:	f04f 0306 	mov.w	r3, #6
 800a7de:	f04f 0400 	mov.w	r4, #0
 800a7e2:	e00d      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7e4:	f04f 0304 	mov.w	r3, #4
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	e008      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7ee:	f04f 0302 	mov.w	r3, #2
 800a7f2:	f04f 0400 	mov.w	r4, #0
 800a7f6:	e003      	b.n	800a800 <UART_SetConfig+0x1020>
 800a7f8:	f04f 0301 	mov.w	r3, #1
 800a7fc:	f04f 0400 	mov.w	r4, #0
 800a800:	461a      	mov	r2, r3
 800a802:	4623      	mov	r3, r4
 800a804:	f7f5 fd68 	bl	80002d8 <__aeabi_uldivmod>
 800a808:	4603      	mov	r3, r0
 800a80a:	460c      	mov	r4, r1
 800a80c:	4619      	mov	r1, r3
 800a80e:	4622      	mov	r2, r4
 800a810:	f04f 0300 	mov.w	r3, #0
 800a814:	f04f 0400 	mov.w	r4, #0
 800a818:	0214      	lsls	r4, r2, #8
 800a81a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a81e:	020b      	lsls	r3, r1, #8
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6852      	ldr	r2, [r2, #4]
 800a824:	0852      	lsrs	r2, r2, #1
 800a826:	4611      	mov	r1, r2
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	eb13 0b01 	adds.w	fp, r3, r1
 800a830:	eb44 0c02 	adc.w	ip, r4, r2
 800a834:	4658      	mov	r0, fp
 800a836:	4661      	mov	r1, ip
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f04f 0400 	mov.w	r4, #0
 800a840:	461a      	mov	r2, r3
 800a842:	4623      	mov	r3, r4
 800a844:	f7f5 fd48 	bl	80002d8 <__aeabi_uldivmod>
 800a848:	4603      	mov	r3, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a84e:	e19d      	b.n	800ab8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d05b      	beq.n	800a910 <UART_SetConfig+0x1130>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d053      	beq.n	800a908 <UART_SetConfig+0x1128>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	2b02      	cmp	r3, #2
 800a866:	d04b      	beq.n	800a900 <UART_SetConfig+0x1120>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d043      	beq.n	800a8f8 <UART_SetConfig+0x1118>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b04      	cmp	r3, #4
 800a876:	d03b      	beq.n	800a8f0 <UART_SetConfig+0x1110>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b05      	cmp	r3, #5
 800a87e:	d033      	beq.n	800a8e8 <UART_SetConfig+0x1108>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	2b06      	cmp	r3, #6
 800a886:	d02b      	beq.n	800a8e0 <UART_SetConfig+0x1100>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b07      	cmp	r3, #7
 800a88e:	d023      	beq.n	800a8d8 <UART_SetConfig+0x10f8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	2b08      	cmp	r3, #8
 800a896:	d01b      	beq.n	800a8d0 <UART_SetConfig+0x10f0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d013      	beq.n	800a8c8 <UART_SetConfig+0x10e8>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b0a      	cmp	r3, #10
 800a8a6:	d00b      	beq.n	800a8c0 <UART_SetConfig+0x10e0>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b0b      	cmp	r3, #11
 800a8ae:	d103      	bne.n	800a8b8 <UART_SetConfig+0x10d8>
 800a8b0:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <UART_SetConfig+0x117c>)
 800a8b2:	f04f 0400 	mov.w	r4, #0
 800a8b6:	e02e      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8b8:	4b29      	ldr	r3, [pc, #164]	; (800a960 <UART_SetConfig+0x1180>)
 800a8ba:	f04f 0403 	mov.w	r4, #3
 800a8be:	e02a      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8c0:	4b28      	ldr	r3, [pc, #160]	; (800a964 <UART_SetConfig+0x1184>)
 800a8c2:	f04f 0400 	mov.w	r4, #0
 800a8c6:	e026      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8c8:	4b27      	ldr	r3, [pc, #156]	; (800a968 <UART_SetConfig+0x1188>)
 800a8ca:	f04f 0400 	mov.w	r4, #0
 800a8ce:	e022      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8d0:	4b26      	ldr	r3, [pc, #152]	; (800a96c <UART_SetConfig+0x118c>)
 800a8d2:	f04f 0400 	mov.w	r4, #0
 800a8d6:	e01e      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8d8:	4b25      	ldr	r3, [pc, #148]	; (800a970 <UART_SetConfig+0x1190>)
 800a8da:	f04f 0400 	mov.w	r4, #0
 800a8de:	e01a      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8e0:	a419      	add	r4, pc, #100	; (adr r4, 800a948 <UART_SetConfig+0x1168>)
 800a8e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a8e6:	e016      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8e8:	4b22      	ldr	r3, [pc, #136]	; (800a974 <UART_SetConfig+0x1194>)
 800a8ea:	f04f 0400 	mov.w	r4, #0
 800a8ee:	e012      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8f0:	4b21      	ldr	r3, [pc, #132]	; (800a978 <UART_SetConfig+0x1198>)
 800a8f2:	f04f 0400 	mov.w	r4, #0
 800a8f6:	e00e      	b.n	800a916 <UART_SetConfig+0x1136>
 800a8f8:	a415      	add	r4, pc, #84	; (adr r4, 800a950 <UART_SetConfig+0x1170>)
 800a8fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a8fe:	e00a      	b.n	800a916 <UART_SetConfig+0x1136>
 800a900:	4b1e      	ldr	r3, [pc, #120]	; (800a97c <UART_SetConfig+0x119c>)
 800a902:	f04f 0400 	mov.w	r4, #0
 800a906:	e006      	b.n	800a916 <UART_SetConfig+0x1136>
 800a908:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <UART_SetConfig+0x11a0>)
 800a90a:	f04f 0401 	mov.w	r4, #1
 800a90e:	e002      	b.n	800a916 <UART_SetConfig+0x1136>
 800a910:	4b13      	ldr	r3, [pc, #76]	; (800a960 <UART_SetConfig+0x1180>)
 800a912:	f04f 0403 	mov.w	r4, #3
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	6852      	ldr	r2, [r2, #4]
 800a91a:	0852      	lsrs	r2, r2, #1
 800a91c:	4611      	mov	r1, r2
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	eb13 0b01 	adds.w	fp, r3, r1
 800a926:	eb44 0c02 	adc.w	ip, r4, r2
 800a92a:	4658      	mov	r0, fp
 800a92c:	4661      	mov	r1, ip
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	461a      	mov	r2, r3
 800a938:	4623      	mov	r3, r4
 800a93a:	f7f5 fccd 	bl	80002d8 <__aeabi_uldivmod>
 800a93e:	4603      	mov	r3, r0
 800a940:	460c      	mov	r4, r1
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a944:	e122      	b.n	800ab8c <UART_SetConfig+0x13ac>
 800a946:	bf00      	nop
 800a948:	51615500 	.word	0x51615500
 800a94c:	00000000 	.word	0x00000000
 800a950:	a2c2aa00 	.word	0xa2c2aa00
 800a954:	00000000 	.word	0x00000000
 800a958:	58024400 	.word	0x58024400
 800a95c:	03d09000 	.word	0x03d09000
 800a960:	d0900000 	.word	0xd0900000
 800a964:	07a12000 	.word	0x07a12000
 800a968:	0f424000 	.word	0x0f424000
 800a96c:	1e848000 	.word	0x1e848000
 800a970:	3d090000 	.word	0x3d090000
 800a974:	61a80000 	.word	0x61a80000
 800a978:	7a120000 	.word	0x7a120000
 800a97c:	f4240000 	.word	0xf4240000
 800a980:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d05b      	beq.n	800aa44 <UART_SetConfig+0x1264>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b01      	cmp	r3, #1
 800a992:	d053      	beq.n	800aa3c <UART_SetConfig+0x125c>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d04b      	beq.n	800aa34 <UART_SetConfig+0x1254>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d043      	beq.n	800aa2c <UART_SetConfig+0x124c>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d03b      	beq.n	800aa24 <UART_SetConfig+0x1244>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	d033      	beq.n	800aa1c <UART_SetConfig+0x123c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b06      	cmp	r3, #6
 800a9ba:	d02b      	beq.n	800aa14 <UART_SetConfig+0x1234>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b07      	cmp	r3, #7
 800a9c2:	d023      	beq.n	800aa0c <UART_SetConfig+0x122c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d01b      	beq.n	800aa04 <UART_SetConfig+0x1224>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b09      	cmp	r3, #9
 800a9d2:	d013      	beq.n	800a9fc <UART_SetConfig+0x121c>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b0a      	cmp	r3, #10
 800a9da:	d00b      	beq.n	800a9f4 <UART_SetConfig+0x1214>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b0b      	cmp	r3, #11
 800a9e2:	d103      	bne.n	800a9ec <UART_SetConfig+0x120c>
 800a9e4:	4bc0      	ldr	r3, [pc, #768]	; (800ace8 <UART_SetConfig+0x1508>)
 800a9e6:	f04f 0400 	mov.w	r4, #0
 800a9ea:	e02e      	b.n	800aa4a <UART_SetConfig+0x126a>
 800a9ec:	4bbf      	ldr	r3, [pc, #764]	; (800acec <UART_SetConfig+0x150c>)
 800a9ee:	f04f 0400 	mov.w	r4, #0
 800a9f2:	e02a      	b.n	800aa4a <UART_SetConfig+0x126a>
 800a9f4:	4bbe      	ldr	r3, [pc, #760]	; (800acf0 <UART_SetConfig+0x1510>)
 800a9f6:	f04f 0400 	mov.w	r4, #0
 800a9fa:	e026      	b.n	800aa4a <UART_SetConfig+0x126a>
 800a9fc:	4bbd      	ldr	r3, [pc, #756]	; (800acf4 <UART_SetConfig+0x1514>)
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	e022      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa04:	4bbc      	ldr	r3, [pc, #752]	; (800acf8 <UART_SetConfig+0x1518>)
 800aa06:	f04f 0400 	mov.w	r4, #0
 800aa0a:	e01e      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa0c:	4bbb      	ldr	r3, [pc, #748]	; (800acfc <UART_SetConfig+0x151c>)
 800aa0e:	f04f 0400 	mov.w	r4, #0
 800aa12:	e01a      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa14:	a4b0      	add	r4, pc, #704	; (adr r4, 800acd8 <UART_SetConfig+0x14f8>)
 800aa16:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa1a:	e016      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa1c:	4bb8      	ldr	r3, [pc, #736]	; (800ad00 <UART_SetConfig+0x1520>)
 800aa1e:	f04f 0400 	mov.w	r4, #0
 800aa22:	e012      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa24:	4bb7      	ldr	r3, [pc, #732]	; (800ad04 <UART_SetConfig+0x1524>)
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	e00e      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa2c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ace0 <UART_SetConfig+0x1500>)
 800aa2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa32:	e00a      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa34:	4bb4      	ldr	r3, [pc, #720]	; (800ad08 <UART_SetConfig+0x1528>)
 800aa36:	f04f 0400 	mov.w	r4, #0
 800aa3a:	e006      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa3c:	4bb3      	ldr	r3, [pc, #716]	; (800ad0c <UART_SetConfig+0x152c>)
 800aa3e:	f04f 0400 	mov.w	r4, #0
 800aa42:	e002      	b.n	800aa4a <UART_SetConfig+0x126a>
 800aa44:	4ba9      	ldr	r3, [pc, #676]	; (800acec <UART_SetConfig+0x150c>)
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6852      	ldr	r2, [r2, #4]
 800aa4e:	0852      	lsrs	r2, r2, #1
 800aa50:	4611      	mov	r1, r2
 800aa52:	f04f 0200 	mov.w	r2, #0
 800aa56:	eb13 0b01 	adds.w	fp, r3, r1
 800aa5a:	eb44 0c02 	adc.w	ip, r4, r2
 800aa5e:	4658      	mov	r0, fp
 800aa60:	4661      	mov	r1, ip
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	f7f5 fc33 	bl	80002d8 <__aeabi_uldivmod>
 800aa72:	4603      	mov	r3, r0
 800aa74:	460c      	mov	r4, r1
 800aa76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aa78:	e088      	b.n	800ab8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d064      	beq.n	800ab4c <UART_SetConfig+0x136c>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d05b      	beq.n	800ab42 <UART_SetConfig+0x1362>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d052      	beq.n	800ab38 <UART_SetConfig+0x1358>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d04a      	beq.n	800ab30 <UART_SetConfig+0x1350>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d041      	beq.n	800ab26 <UART_SetConfig+0x1346>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d039      	beq.n	800ab1e <UART_SetConfig+0x133e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b06      	cmp	r3, #6
 800aab0:	d031      	beq.n	800ab16 <UART_SetConfig+0x1336>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	2b07      	cmp	r3, #7
 800aab8:	d028      	beq.n	800ab0c <UART_SetConfig+0x132c>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	d01f      	beq.n	800ab02 <UART_SetConfig+0x1322>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b09      	cmp	r3, #9
 800aac8:	d016      	beq.n	800aaf8 <UART_SetConfig+0x1318>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b0a      	cmp	r3, #10
 800aad0:	d00d      	beq.n	800aaee <UART_SetConfig+0x130e>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b0b      	cmp	r3, #11
 800aad8:	d104      	bne.n	800aae4 <UART_SetConfig+0x1304>
 800aada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aade:	f04f 0400 	mov.w	r4, #0
 800aae2:	e037      	b.n	800ab54 <UART_SetConfig+0x1374>
 800aae4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aae8:	f04f 0400 	mov.w	r4, #0
 800aaec:	e032      	b.n	800ab54 <UART_SetConfig+0x1374>
 800aaee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aaf2:	f04f 0400 	mov.w	r4, #0
 800aaf6:	e02d      	b.n	800ab54 <UART_SetConfig+0x1374>
 800aaf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e028      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	e023      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab10:	f04f 0400 	mov.w	r4, #0
 800ab14:	e01e      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab16:	4b7e      	ldr	r3, [pc, #504]	; (800ad10 <UART_SetConfig+0x1530>)
 800ab18:	f04f 0400 	mov.w	r4, #0
 800ab1c:	e01a      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab1e:	4b7d      	ldr	r3, [pc, #500]	; (800ad14 <UART_SetConfig+0x1534>)
 800ab20:	f04f 0400 	mov.w	r4, #0
 800ab24:	e016      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab2a:	f04f 0400 	mov.w	r4, #0
 800ab2e:	e011      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab30:	4b79      	ldr	r3, [pc, #484]	; (800ad18 <UART_SetConfig+0x1538>)
 800ab32:	f04f 0400 	mov.w	r4, #0
 800ab36:	e00d      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab3c:	f04f 0400 	mov.w	r4, #0
 800ab40:	e008      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab46:	f04f 0400 	mov.w	r4, #0
 800ab4a:	e003      	b.n	800ab54 <UART_SetConfig+0x1374>
 800ab4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab50:	f04f 0400 	mov.w	r4, #0
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6852      	ldr	r2, [r2, #4]
 800ab58:	0852      	lsrs	r2, r2, #1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	eb13 0b01 	adds.w	fp, r3, r1
 800ab64:	eb44 0c02 	adc.w	ip, r4, r2
 800ab68:	4658      	mov	r0, fp
 800ab6a:	4661      	mov	r1, ip
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f04f 0400 	mov.w	r4, #0
 800ab74:	461a      	mov	r2, r3
 800ab76:	4623      	mov	r3, r4
 800ab78:	f7f5 fbae 	bl	80002d8 <__aeabi_uldivmod>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ab82:	e003      	b.n	800ab8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ab8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab92:	d309      	bcc.n	800aba8 <UART_SetConfig+0x13c8>
 800ab94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab9a:	d205      	bcs.n	800aba8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba2:	60da      	str	r2, [r3, #12]
 800aba4:	f000 bf85 	b.w	800bab2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abae:	f000 bf80 	b.w	800bab2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abba:	f040 83da 	bne.w	800b372 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800abbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abc2:	2b40      	cmp	r3, #64	; 0x40
 800abc4:	f200 83b3 	bhi.w	800b32e <UART_SetConfig+0x1b4e>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <UART_SetConfig+0x13f0>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800ad1d 	.word	0x0800ad1d
 800abd4:	0800add5 	.word	0x0800add5
 800abd8:	0800b32f 	.word	0x0800b32f
 800abdc:	0800b32f 	.word	0x0800b32f
 800abe0:	0800ae8d 	.word	0x0800ae8d
 800abe4:	0800b32f 	.word	0x0800b32f
 800abe8:	0800b32f 	.word	0x0800b32f
 800abec:	0800b32f 	.word	0x0800b32f
 800abf0:	0800af49 	.word	0x0800af49
 800abf4:	0800b32f 	.word	0x0800b32f
 800abf8:	0800b32f 	.word	0x0800b32f
 800abfc:	0800b32f 	.word	0x0800b32f
 800ac00:	0800b32f 	.word	0x0800b32f
 800ac04:	0800b32f 	.word	0x0800b32f
 800ac08:	0800b32f 	.word	0x0800b32f
 800ac0c:	0800b32f 	.word	0x0800b32f
 800ac10:	0800b005 	.word	0x0800b005
 800ac14:	0800b32f 	.word	0x0800b32f
 800ac18:	0800b32f 	.word	0x0800b32f
 800ac1c:	0800b32f 	.word	0x0800b32f
 800ac20:	0800b32f 	.word	0x0800b32f
 800ac24:	0800b32f 	.word	0x0800b32f
 800ac28:	0800b32f 	.word	0x0800b32f
 800ac2c:	0800b32f 	.word	0x0800b32f
 800ac30:	0800b32f 	.word	0x0800b32f
 800ac34:	0800b32f 	.word	0x0800b32f
 800ac38:	0800b32f 	.word	0x0800b32f
 800ac3c:	0800b32f 	.word	0x0800b32f
 800ac40:	0800b32f 	.word	0x0800b32f
 800ac44:	0800b32f 	.word	0x0800b32f
 800ac48:	0800b32f 	.word	0x0800b32f
 800ac4c:	0800b32f 	.word	0x0800b32f
 800ac50:	0800b177 	.word	0x0800b177
 800ac54:	0800b32f 	.word	0x0800b32f
 800ac58:	0800b32f 	.word	0x0800b32f
 800ac5c:	0800b32f 	.word	0x0800b32f
 800ac60:	0800b32f 	.word	0x0800b32f
 800ac64:	0800b32f 	.word	0x0800b32f
 800ac68:	0800b32f 	.word	0x0800b32f
 800ac6c:	0800b32f 	.word	0x0800b32f
 800ac70:	0800b32f 	.word	0x0800b32f
 800ac74:	0800b32f 	.word	0x0800b32f
 800ac78:	0800b32f 	.word	0x0800b32f
 800ac7c:	0800b32f 	.word	0x0800b32f
 800ac80:	0800b32f 	.word	0x0800b32f
 800ac84:	0800b32f 	.word	0x0800b32f
 800ac88:	0800b32f 	.word	0x0800b32f
 800ac8c:	0800b32f 	.word	0x0800b32f
 800ac90:	0800b32f 	.word	0x0800b32f
 800ac94:	0800b32f 	.word	0x0800b32f
 800ac98:	0800b32f 	.word	0x0800b32f
 800ac9c:	0800b32f 	.word	0x0800b32f
 800aca0:	0800b32f 	.word	0x0800b32f
 800aca4:	0800b32f 	.word	0x0800b32f
 800aca8:	0800b32f 	.word	0x0800b32f
 800acac:	0800b32f 	.word	0x0800b32f
 800acb0:	0800b32f 	.word	0x0800b32f
 800acb4:	0800b32f 	.word	0x0800b32f
 800acb8:	0800b32f 	.word	0x0800b32f
 800acbc:	0800b32f 	.word	0x0800b32f
 800acc0:	0800b32f 	.word	0x0800b32f
 800acc4:	0800b32f 	.word	0x0800b32f
 800acc8:	0800b32f 	.word	0x0800b32f
 800accc:	0800b32f 	.word	0x0800b32f
 800acd0:	0800b26d 	.word	0x0800b26d
 800acd4:	f3af 8000 	nop.w
 800acd8:	05161500 	.word	0x05161500
 800acdc:	00000000 	.word	0x00000000
 800ace0:	0a2c2a00 	.word	0x0a2c2a00
 800ace4:	00000000 	.word	0x00000000
 800ace8:	003d0900 	.word	0x003d0900
 800acec:	3d090000 	.word	0x3d090000
 800acf0:	007a1200 	.word	0x007a1200
 800acf4:	00f42400 	.word	0x00f42400
 800acf8:	01e84800 	.word	0x01e84800
 800acfc:	03d09000 	.word	0x03d09000
 800ad00:	061a8000 	.word	0x061a8000
 800ad04:	07a12000 	.word	0x07a12000
 800ad08:	0f424000 	.word	0x0f424000
 800ad0c:	1e848000 	.word	0x1e848000
 800ad10:	000aaa00 	.word	0x000aaa00
 800ad14:	000ccc00 	.word	0x000ccc00
 800ad18:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad1c:	f7fb fa7c 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800ad20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d044      	beq.n	800adb4 <UART_SetConfig+0x15d4>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d03e      	beq.n	800adb0 <UART_SetConfig+0x15d0>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d038      	beq.n	800adac <UART_SetConfig+0x15cc>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d032      	beq.n	800ada8 <UART_SetConfig+0x15c8>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d02c      	beq.n	800ada4 <UART_SetConfig+0x15c4>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d026      	beq.n	800ada0 <UART_SetConfig+0x15c0>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad56:	2b06      	cmp	r3, #6
 800ad58:	d020      	beq.n	800ad9c <UART_SetConfig+0x15bc>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	2b07      	cmp	r3, #7
 800ad60:	d01a      	beq.n	800ad98 <UART_SetConfig+0x15b8>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d014      	beq.n	800ad94 <UART_SetConfig+0x15b4>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b09      	cmp	r3, #9
 800ad70:	d00e      	beq.n	800ad90 <UART_SetConfig+0x15b0>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b0a      	cmp	r3, #10
 800ad78:	d008      	beq.n	800ad8c <UART_SetConfig+0x15ac>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	2b0b      	cmp	r3, #11
 800ad80:	d102      	bne.n	800ad88 <UART_SetConfig+0x15a8>
 800ad82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad86:	e016      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e014      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	e012      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad90:	2340      	movs	r3, #64	; 0x40
 800ad92:	e010      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad94:	2320      	movs	r3, #32
 800ad96:	e00e      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	e00c      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	e00a      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ada0:	230a      	movs	r3, #10
 800ada2:	e008      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ada4:	2308      	movs	r3, #8
 800ada6:	e006      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800ada8:	2306      	movs	r3, #6
 800adaa:	e004      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800adac:	2304      	movs	r3, #4
 800adae:	e002      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e000      	b.n	800adb6 <UART_SetConfig+0x15d6>
 800adb4:	2301      	movs	r3, #1
 800adb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbc:	005a      	lsls	r2, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	085b      	lsrs	r3, r3, #1
 800adc4:	441a      	add	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	fbb2 f3f3 	udiv	r3, r2, r3
 800adce:	b29b      	uxth	r3, r3
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800add2:	e2b0      	b.n	800b336 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800add4:	f7fb fa36 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 800add8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d044      	beq.n	800ae6c <UART_SetConfig+0x168c>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d03e      	beq.n	800ae68 <UART_SetConfig+0x1688>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d038      	beq.n	800ae64 <UART_SetConfig+0x1684>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d032      	beq.n	800ae60 <UART_SetConfig+0x1680>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d02c      	beq.n	800ae5c <UART_SetConfig+0x167c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d026      	beq.n	800ae58 <UART_SetConfig+0x1678>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	2b06      	cmp	r3, #6
 800ae10:	d020      	beq.n	800ae54 <UART_SetConfig+0x1674>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae16:	2b07      	cmp	r3, #7
 800ae18:	d01a      	beq.n	800ae50 <UART_SetConfig+0x1670>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d014      	beq.n	800ae4c <UART_SetConfig+0x166c>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	2b09      	cmp	r3, #9
 800ae28:	d00e      	beq.n	800ae48 <UART_SetConfig+0x1668>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	2b0a      	cmp	r3, #10
 800ae30:	d008      	beq.n	800ae44 <UART_SetConfig+0x1664>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	2b0b      	cmp	r3, #11
 800ae38:	d102      	bne.n	800ae40 <UART_SetConfig+0x1660>
 800ae3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae3e:	e016      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e014      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae44:	2380      	movs	r3, #128	; 0x80
 800ae46:	e012      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae48:	2340      	movs	r3, #64	; 0x40
 800ae4a:	e010      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae4c:	2320      	movs	r3, #32
 800ae4e:	e00e      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae50:	2310      	movs	r3, #16
 800ae52:	e00c      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae54:	230c      	movs	r3, #12
 800ae56:	e00a      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae58:	230a      	movs	r3, #10
 800ae5a:	e008      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae5c:	2308      	movs	r3, #8
 800ae5e:	e006      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae60:	2306      	movs	r3, #6
 800ae62:	e004      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae64:	2304      	movs	r3, #4
 800ae66:	e002      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e000      	b.n	800ae6e <UART_SetConfig+0x168e>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae74:	005a      	lsls	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	441a      	add	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae8a:	e254      	b.n	800b336 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8c:	f107 0318 	add.w	r3, r7, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fc fb59 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d044      	beq.n	800af2a <UART_SetConfig+0x174a>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d03e      	beq.n	800af26 <UART_SetConfig+0x1746>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d038      	beq.n	800af22 <UART_SetConfig+0x1742>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d032      	beq.n	800af1e <UART_SetConfig+0x173e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d02c      	beq.n	800af1a <UART_SetConfig+0x173a>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b05      	cmp	r3, #5
 800aec6:	d026      	beq.n	800af16 <UART_SetConfig+0x1736>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	2b06      	cmp	r3, #6
 800aece:	d020      	beq.n	800af12 <UART_SetConfig+0x1732>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	2b07      	cmp	r3, #7
 800aed6:	d01a      	beq.n	800af0e <UART_SetConfig+0x172e>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d014      	beq.n	800af0a <UART_SetConfig+0x172a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	d00e      	beq.n	800af06 <UART_SetConfig+0x1726>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	2b0a      	cmp	r3, #10
 800aeee:	d008      	beq.n	800af02 <UART_SetConfig+0x1722>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2b0b      	cmp	r3, #11
 800aef6:	d102      	bne.n	800aefe <UART_SetConfig+0x171e>
 800aef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aefc:	e016      	b.n	800af2c <UART_SetConfig+0x174c>
 800aefe:	2301      	movs	r3, #1
 800af00:	e014      	b.n	800af2c <UART_SetConfig+0x174c>
 800af02:	2380      	movs	r3, #128	; 0x80
 800af04:	e012      	b.n	800af2c <UART_SetConfig+0x174c>
 800af06:	2340      	movs	r3, #64	; 0x40
 800af08:	e010      	b.n	800af2c <UART_SetConfig+0x174c>
 800af0a:	2320      	movs	r3, #32
 800af0c:	e00e      	b.n	800af2c <UART_SetConfig+0x174c>
 800af0e:	2310      	movs	r3, #16
 800af10:	e00c      	b.n	800af2c <UART_SetConfig+0x174c>
 800af12:	230c      	movs	r3, #12
 800af14:	e00a      	b.n	800af2c <UART_SetConfig+0x174c>
 800af16:	230a      	movs	r3, #10
 800af18:	e008      	b.n	800af2c <UART_SetConfig+0x174c>
 800af1a:	2308      	movs	r3, #8
 800af1c:	e006      	b.n	800af2c <UART_SetConfig+0x174c>
 800af1e:	2306      	movs	r3, #6
 800af20:	e004      	b.n	800af2c <UART_SetConfig+0x174c>
 800af22:	2304      	movs	r3, #4
 800af24:	e002      	b.n	800af2c <UART_SetConfig+0x174c>
 800af26:	2302      	movs	r3, #2
 800af28:	e000      	b.n	800af2c <UART_SetConfig+0x174c>
 800af2a:	2301      	movs	r3, #1
 800af2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af30:	005a      	lsls	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af46:	e1f6      	b.n	800b336 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af48:	f107 030c 	add.w	r3, r7, #12
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fc fc47 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d044      	beq.n	800afe6 <UART_SetConfig+0x1806>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	2b01      	cmp	r3, #1
 800af62:	d03e      	beq.n	800afe2 <UART_SetConfig+0x1802>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d038      	beq.n	800afde <UART_SetConfig+0x17fe>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	2b03      	cmp	r3, #3
 800af72:	d032      	beq.n	800afda <UART_SetConfig+0x17fa>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d02c      	beq.n	800afd6 <UART_SetConfig+0x17f6>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	2b05      	cmp	r3, #5
 800af82:	d026      	beq.n	800afd2 <UART_SetConfig+0x17f2>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	2b06      	cmp	r3, #6
 800af8a:	d020      	beq.n	800afce <UART_SetConfig+0x17ee>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	2b07      	cmp	r3, #7
 800af92:	d01a      	beq.n	800afca <UART_SetConfig+0x17ea>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d014      	beq.n	800afc6 <UART_SetConfig+0x17e6>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	2b09      	cmp	r3, #9
 800afa2:	d00e      	beq.n	800afc2 <UART_SetConfig+0x17e2>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	2b0a      	cmp	r3, #10
 800afaa:	d008      	beq.n	800afbe <UART_SetConfig+0x17de>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	2b0b      	cmp	r3, #11
 800afb2:	d102      	bne.n	800afba <UART_SetConfig+0x17da>
 800afb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afb8:	e016      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afba:	2301      	movs	r3, #1
 800afbc:	e014      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	e012      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	e010      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afc6:	2320      	movs	r3, #32
 800afc8:	e00e      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afca:	2310      	movs	r3, #16
 800afcc:	e00c      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afce:	230c      	movs	r3, #12
 800afd0:	e00a      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afd2:	230a      	movs	r3, #10
 800afd4:	e008      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afd6:	2308      	movs	r3, #8
 800afd8:	e006      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afda:	2306      	movs	r3, #6
 800afdc:	e004      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afde:	2304      	movs	r3, #4
 800afe0:	e002      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afe2:	2302      	movs	r3, #2
 800afe4:	e000      	b.n	800afe8 <UART_SetConfig+0x1808>
 800afe6:	2301      	movs	r3, #1
 800afe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afec:	005a      	lsls	r2, r3, #1
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	085b      	lsrs	r3, r3, #1
 800aff4:	441a      	add	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	fbb2 f3f3 	udiv	r3, r2, r3
 800affe:	b29b      	uxth	r3, r3
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b002:	e198      	b.n	800b336 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b004:	4b87      	ldr	r3, [pc, #540]	; (800b224 <UART_SetConfig+0x1a44>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d05e      	beq.n	800b0ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b010:	4b84      	ldr	r3, [pc, #528]	; (800b224 <UART_SetConfig+0x1a44>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	08db      	lsrs	r3, r3, #3
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	4a83      	ldr	r2, [pc, #524]	; (800b228 <UART_SetConfig+0x1a48>)
 800b01c:	40da      	lsrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d044      	beq.n	800b0b0 <UART_SetConfig+0x18d0>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d03e      	beq.n	800b0ac <UART_SetConfig+0x18cc>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	2b02      	cmp	r3, #2
 800b034:	d038      	beq.n	800b0a8 <UART_SetConfig+0x18c8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d032      	beq.n	800b0a4 <UART_SetConfig+0x18c4>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	2b04      	cmp	r3, #4
 800b044:	d02c      	beq.n	800b0a0 <UART_SetConfig+0x18c0>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	d026      	beq.n	800b09c <UART_SetConfig+0x18bc>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	2b06      	cmp	r3, #6
 800b054:	d020      	beq.n	800b098 <UART_SetConfig+0x18b8>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	2b07      	cmp	r3, #7
 800b05c:	d01a      	beq.n	800b094 <UART_SetConfig+0x18b4>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	2b08      	cmp	r3, #8
 800b064:	d014      	beq.n	800b090 <UART_SetConfig+0x18b0>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b09      	cmp	r3, #9
 800b06c:	d00e      	beq.n	800b08c <UART_SetConfig+0x18ac>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	2b0a      	cmp	r3, #10
 800b074:	d008      	beq.n	800b088 <UART_SetConfig+0x18a8>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d102      	bne.n	800b084 <UART_SetConfig+0x18a4>
 800b07e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b082:	e016      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b084:	2301      	movs	r3, #1
 800b086:	e014      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b088:	2380      	movs	r3, #128	; 0x80
 800b08a:	e012      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	e010      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b090:	2320      	movs	r3, #32
 800b092:	e00e      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b094:	2310      	movs	r3, #16
 800b096:	e00c      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b098:	230c      	movs	r3, #12
 800b09a:	e00a      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b09c:	230a      	movs	r3, #10
 800b09e:	e008      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	e006      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b0a4:	2306      	movs	r3, #6
 800b0a6:	e004      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	e002      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e000      	b.n	800b0b2 <UART_SetConfig+0x18d2>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b6:	005a      	lsls	r2, r3, #1
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	085b      	lsrs	r3, r3, #1
 800b0be:	441a      	add	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b0cc:	e133      	b.n	800b336 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d043      	beq.n	800b15e <UART_SetConfig+0x197e>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d03d      	beq.n	800b15a <UART_SetConfig+0x197a>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d037      	beq.n	800b156 <UART_SetConfig+0x1976>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d031      	beq.n	800b152 <UART_SetConfig+0x1972>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d02b      	beq.n	800b14e <UART_SetConfig+0x196e>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d025      	beq.n	800b14a <UART_SetConfig+0x196a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b102:	2b06      	cmp	r3, #6
 800b104:	d01f      	beq.n	800b146 <UART_SetConfig+0x1966>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10a:	2b07      	cmp	r3, #7
 800b10c:	d019      	beq.n	800b142 <UART_SetConfig+0x1962>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	2b08      	cmp	r3, #8
 800b114:	d013      	beq.n	800b13e <UART_SetConfig+0x195e>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	d00d      	beq.n	800b13a <UART_SetConfig+0x195a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	2b0a      	cmp	r3, #10
 800b124:	d007      	beq.n	800b136 <UART_SetConfig+0x1956>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	2b0b      	cmp	r3, #11
 800b12c:	d101      	bne.n	800b132 <UART_SetConfig+0x1952>
 800b12e:	4b3f      	ldr	r3, [pc, #252]	; (800b22c <UART_SetConfig+0x1a4c>)
 800b130:	e016      	b.n	800b160 <UART_SetConfig+0x1980>
 800b132:	4b3f      	ldr	r3, [pc, #252]	; (800b230 <UART_SetConfig+0x1a50>)
 800b134:	e014      	b.n	800b160 <UART_SetConfig+0x1980>
 800b136:	4b3f      	ldr	r3, [pc, #252]	; (800b234 <UART_SetConfig+0x1a54>)
 800b138:	e012      	b.n	800b160 <UART_SetConfig+0x1980>
 800b13a:	4b3f      	ldr	r3, [pc, #252]	; (800b238 <UART_SetConfig+0x1a58>)
 800b13c:	e010      	b.n	800b160 <UART_SetConfig+0x1980>
 800b13e:	4b3f      	ldr	r3, [pc, #252]	; (800b23c <UART_SetConfig+0x1a5c>)
 800b140:	e00e      	b.n	800b160 <UART_SetConfig+0x1980>
 800b142:	4b3f      	ldr	r3, [pc, #252]	; (800b240 <UART_SetConfig+0x1a60>)
 800b144:	e00c      	b.n	800b160 <UART_SetConfig+0x1980>
 800b146:	4b3f      	ldr	r3, [pc, #252]	; (800b244 <UART_SetConfig+0x1a64>)
 800b148:	e00a      	b.n	800b160 <UART_SetConfig+0x1980>
 800b14a:	4b3f      	ldr	r3, [pc, #252]	; (800b248 <UART_SetConfig+0x1a68>)
 800b14c:	e008      	b.n	800b160 <UART_SetConfig+0x1980>
 800b14e:	4b3f      	ldr	r3, [pc, #252]	; (800b24c <UART_SetConfig+0x1a6c>)
 800b150:	e006      	b.n	800b160 <UART_SetConfig+0x1980>
 800b152:	4b3f      	ldr	r3, [pc, #252]	; (800b250 <UART_SetConfig+0x1a70>)
 800b154:	e004      	b.n	800b160 <UART_SetConfig+0x1980>
 800b156:	4b3f      	ldr	r3, [pc, #252]	; (800b254 <UART_SetConfig+0x1a74>)
 800b158:	e002      	b.n	800b160 <UART_SetConfig+0x1980>
 800b15a:	4b33      	ldr	r3, [pc, #204]	; (800b228 <UART_SetConfig+0x1a48>)
 800b15c:	e000      	b.n	800b160 <UART_SetConfig+0x1980>
 800b15e:	4b34      	ldr	r3, [pc, #208]	; (800b230 <UART_SetConfig+0x1a50>)
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6852      	ldr	r2, [r2, #4]
 800b164:	0852      	lsrs	r2, r2, #1
 800b166:	441a      	add	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b170:	b29b      	uxth	r3, r3
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b174:	e0df      	b.n	800b336 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d045      	beq.n	800b20a <UART_SetConfig+0x1a2a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b01      	cmp	r3, #1
 800b184:	d03f      	beq.n	800b206 <UART_SetConfig+0x1a26>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d039      	beq.n	800b202 <UART_SetConfig+0x1a22>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b03      	cmp	r3, #3
 800b194:	d033      	beq.n	800b1fe <UART_SetConfig+0x1a1e>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d02d      	beq.n	800b1fa <UART_SetConfig+0x1a1a>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	d027      	beq.n	800b1f6 <UART_SetConfig+0x1a16>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b06      	cmp	r3, #6
 800b1ac:	d021      	beq.n	800b1f2 <UART_SetConfig+0x1a12>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	2b07      	cmp	r3, #7
 800b1b4:	d01b      	beq.n	800b1ee <UART_SetConfig+0x1a0e>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	2b08      	cmp	r3, #8
 800b1bc:	d015      	beq.n	800b1ea <UART_SetConfig+0x1a0a>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b09      	cmp	r3, #9
 800b1c4:	d00f      	beq.n	800b1e6 <UART_SetConfig+0x1a06>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b0a      	cmp	r3, #10
 800b1cc:	d008      	beq.n	800b1e0 <UART_SetConfig+0x1a00>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b0b      	cmp	r3, #11
 800b1d4:	d102      	bne.n	800b1dc <UART_SetConfig+0x19fc>
 800b1d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b1da:	e017      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1dc:	4b18      	ldr	r3, [pc, #96]	; (800b240 <UART_SetConfig+0x1a60>)
 800b1de:	e015      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b1e4:	e012      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1e6:	4b1c      	ldr	r3, [pc, #112]	; (800b258 <UART_SetConfig+0x1a78>)
 800b1e8:	e010      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1ea:	4b1c      	ldr	r3, [pc, #112]	; (800b25c <UART_SetConfig+0x1a7c>)
 800b1ec:	e00e      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <UART_SetConfig+0x1a4c>)
 800b1f0:	e00c      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <UART_SetConfig+0x1a80>)
 800b1f4:	e00a      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1f6:	4b1b      	ldr	r3, [pc, #108]	; (800b264 <UART_SetConfig+0x1a84>)
 800b1f8:	e008      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <UART_SetConfig+0x1a54>)
 800b1fc:	e006      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <UART_SetConfig+0x1a88>)
 800b200:	e004      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b202:	4b0d      	ldr	r3, [pc, #52]	; (800b238 <UART_SetConfig+0x1a58>)
 800b204:	e002      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b206:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <UART_SetConfig+0x1a5c>)
 800b208:	e000      	b.n	800b20c <UART_SetConfig+0x1a2c>
 800b20a:	4b0d      	ldr	r3, [pc, #52]	; (800b240 <UART_SetConfig+0x1a60>)
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6852      	ldr	r2, [r2, #4]
 800b210:	0852      	lsrs	r2, r2, #1
 800b212:	441a      	add	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b220:	e089      	b.n	800b336 <UART_SetConfig+0x1b56>
 800b222:	bf00      	nop
 800b224:	58024400 	.word	0x58024400
 800b228:	03d09000 	.word	0x03d09000
 800b22c:	0007a120 	.word	0x0007a120
 800b230:	07a12000 	.word	0x07a12000
 800b234:	000f4240 	.word	0x000f4240
 800b238:	001e8480 	.word	0x001e8480
 800b23c:	003d0900 	.word	0x003d0900
 800b240:	007a1200 	.word	0x007a1200
 800b244:	00a2c2aa 	.word	0x00a2c2aa
 800b248:	00c35000 	.word	0x00c35000
 800b24c:	00f42400 	.word	0x00f42400
 800b250:	01458554 	.word	0x01458554
 800b254:	01e84800 	.word	0x01e84800
 800b258:	0001e848 	.word	0x0001e848
 800b25c:	0003d090 	.word	0x0003d090
 800b260:	000a2c2a 	.word	0x000a2c2a
 800b264:	000c3500 	.word	0x000c3500
 800b268:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d04f      	beq.n	800b314 <UART_SetConfig+0x1b34>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d048      	beq.n	800b30e <UART_SetConfig+0x1b2e>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b02      	cmp	r3, #2
 800b282:	d041      	beq.n	800b308 <UART_SetConfig+0x1b28>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d03a      	beq.n	800b302 <UART_SetConfig+0x1b22>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b04      	cmp	r3, #4
 800b292:	d033      	beq.n	800b2fc <UART_SetConfig+0x1b1c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b05      	cmp	r3, #5
 800b29a:	d02c      	beq.n	800b2f6 <UART_SetConfig+0x1b16>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b06      	cmp	r3, #6
 800b2a2:	d025      	beq.n	800b2f0 <UART_SetConfig+0x1b10>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2b07      	cmp	r3, #7
 800b2aa:	d01e      	beq.n	800b2ea <UART_SetConfig+0x1b0a>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	d017      	beq.n	800b2e4 <UART_SetConfig+0x1b04>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	2b09      	cmp	r3, #9
 800b2ba:	d010      	beq.n	800b2de <UART_SetConfig+0x1afe>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	2b0a      	cmp	r3, #10
 800b2c2:	d009      	beq.n	800b2d8 <UART_SetConfig+0x1af8>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	2b0b      	cmp	r3, #11
 800b2ca:	d102      	bne.n	800b2d2 <UART_SetConfig+0x1af2>
 800b2cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d0:	e022      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2d6:	e01f      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2dc:	e01c      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2e2:	e019      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e8:	e016      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2ee:	e013      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2f0:	f241 5354 	movw	r3, #5460	; 0x1554
 800b2f4:	e010      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2f6:	f641 1398 	movw	r3, #6552	; 0x1998
 800b2fa:	e00d      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b2fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b300:	e00a      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b302:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b306:	e007      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b30c:	e004      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b30e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b312:	e001      	b.n	800b318 <UART_SetConfig+0x1b38>
 800b314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	6852      	ldr	r2, [r2, #4]
 800b31c:	0852      	lsrs	r2, r2, #1
 800b31e:	441a      	add	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	fbb2 f3f3 	udiv	r3, r2, r3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b32c:	e003      	b.n	800b336 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d916      	bls.n	800b36a <UART_SetConfig+0x1b8a>
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b342:	d212      	bcs.n	800b36a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b346:	b29b      	uxth	r3, r3
 800b348:	f023 030f 	bic.w	r3, r3, #15
 800b34c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b350:	085b      	lsrs	r3, r3, #1
 800b352:	b29b      	uxth	r3, r3
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	b29a      	uxth	r2, r3
 800b35a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b35c:	4313      	orrs	r3, r2
 800b35e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b366:	60da      	str	r2, [r3, #12]
 800b368:	e3a3      	b.n	800bab2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b370:	e39f      	b.n	800bab2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b372:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b376:	2b40      	cmp	r3, #64	; 0x40
 800b378:	f200 8388 	bhi.w	800ba8c <UART_SetConfig+0x22ac>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0x1ba4>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b489 	.word	0x0800b489
 800b388:	0800b53f 	.word	0x0800b53f
 800b38c:	0800ba8d 	.word	0x0800ba8d
 800b390:	0800ba8d 	.word	0x0800ba8d
 800b394:	0800b5f5 	.word	0x0800b5f5
 800b398:	0800ba8d 	.word	0x0800ba8d
 800b39c:	0800ba8d 	.word	0x0800ba8d
 800b3a0:	0800ba8d 	.word	0x0800ba8d
 800b3a4:	0800b6af 	.word	0x0800b6af
 800b3a8:	0800ba8d 	.word	0x0800ba8d
 800b3ac:	0800ba8d 	.word	0x0800ba8d
 800b3b0:	0800ba8d 	.word	0x0800ba8d
 800b3b4:	0800ba8d 	.word	0x0800ba8d
 800b3b8:	0800ba8d 	.word	0x0800ba8d
 800b3bc:	0800ba8d 	.word	0x0800ba8d
 800b3c0:	0800ba8d 	.word	0x0800ba8d
 800b3c4:	0800b769 	.word	0x0800b769
 800b3c8:	0800ba8d 	.word	0x0800ba8d
 800b3cc:	0800ba8d 	.word	0x0800ba8d
 800b3d0:	0800ba8d 	.word	0x0800ba8d
 800b3d4:	0800ba8d 	.word	0x0800ba8d
 800b3d8:	0800ba8d 	.word	0x0800ba8d
 800b3dc:	0800ba8d 	.word	0x0800ba8d
 800b3e0:	0800ba8d 	.word	0x0800ba8d
 800b3e4:	0800ba8d 	.word	0x0800ba8d
 800b3e8:	0800ba8d 	.word	0x0800ba8d
 800b3ec:	0800ba8d 	.word	0x0800ba8d
 800b3f0:	0800ba8d 	.word	0x0800ba8d
 800b3f4:	0800ba8d 	.word	0x0800ba8d
 800b3f8:	0800ba8d 	.word	0x0800ba8d
 800b3fc:	0800ba8d 	.word	0x0800ba8d
 800b400:	0800ba8d 	.word	0x0800ba8d
 800b404:	0800b8d9 	.word	0x0800b8d9
 800b408:	0800ba8d 	.word	0x0800ba8d
 800b40c:	0800ba8d 	.word	0x0800ba8d
 800b410:	0800ba8d 	.word	0x0800ba8d
 800b414:	0800ba8d 	.word	0x0800ba8d
 800b418:	0800ba8d 	.word	0x0800ba8d
 800b41c:	0800ba8d 	.word	0x0800ba8d
 800b420:	0800ba8d 	.word	0x0800ba8d
 800b424:	0800ba8d 	.word	0x0800ba8d
 800b428:	0800ba8d 	.word	0x0800ba8d
 800b42c:	0800ba8d 	.word	0x0800ba8d
 800b430:	0800ba8d 	.word	0x0800ba8d
 800b434:	0800ba8d 	.word	0x0800ba8d
 800b438:	0800ba8d 	.word	0x0800ba8d
 800b43c:	0800ba8d 	.word	0x0800ba8d
 800b440:	0800ba8d 	.word	0x0800ba8d
 800b444:	0800ba8d 	.word	0x0800ba8d
 800b448:	0800ba8d 	.word	0x0800ba8d
 800b44c:	0800ba8d 	.word	0x0800ba8d
 800b450:	0800ba8d 	.word	0x0800ba8d
 800b454:	0800ba8d 	.word	0x0800ba8d
 800b458:	0800ba8d 	.word	0x0800ba8d
 800b45c:	0800ba8d 	.word	0x0800ba8d
 800b460:	0800ba8d 	.word	0x0800ba8d
 800b464:	0800ba8d 	.word	0x0800ba8d
 800b468:	0800ba8d 	.word	0x0800ba8d
 800b46c:	0800ba8d 	.word	0x0800ba8d
 800b470:	0800ba8d 	.word	0x0800ba8d
 800b474:	0800ba8d 	.word	0x0800ba8d
 800b478:	0800ba8d 	.word	0x0800ba8d
 800b47c:	0800ba8d 	.word	0x0800ba8d
 800b480:	0800ba8d 	.word	0x0800ba8d
 800b484:	0800b9cd 	.word	0x0800b9cd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b488:	f7fa fec6 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800b48c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b492:	2b00      	cmp	r3, #0
 800b494:	d044      	beq.n	800b520 <UART_SetConfig+0x1d40>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d03e      	beq.n	800b51c <UART_SetConfig+0x1d3c>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d038      	beq.n	800b518 <UART_SetConfig+0x1d38>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d032      	beq.n	800b514 <UART_SetConfig+0x1d34>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d02c      	beq.n	800b510 <UART_SetConfig+0x1d30>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	2b05      	cmp	r3, #5
 800b4bc:	d026      	beq.n	800b50c <UART_SetConfig+0x1d2c>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	2b06      	cmp	r3, #6
 800b4c4:	d020      	beq.n	800b508 <UART_SetConfig+0x1d28>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	d01a      	beq.n	800b504 <UART_SetConfig+0x1d24>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	2b08      	cmp	r3, #8
 800b4d4:	d014      	beq.n	800b500 <UART_SetConfig+0x1d20>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	d00e      	beq.n	800b4fc <UART_SetConfig+0x1d1c>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	2b0a      	cmp	r3, #10
 800b4e4:	d008      	beq.n	800b4f8 <UART_SetConfig+0x1d18>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	2b0b      	cmp	r3, #11
 800b4ec:	d102      	bne.n	800b4f4 <UART_SetConfig+0x1d14>
 800b4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f2:	e016      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e014      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b4f8:	2380      	movs	r3, #128	; 0x80
 800b4fa:	e012      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	e010      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b500:	2320      	movs	r3, #32
 800b502:	e00e      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b504:	2310      	movs	r3, #16
 800b506:	e00c      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b508:	230c      	movs	r3, #12
 800b50a:	e00a      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b50c:	230a      	movs	r3, #10
 800b50e:	e008      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b510:	2308      	movs	r3, #8
 800b512:	e006      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b514:	2306      	movs	r3, #6
 800b516:	e004      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b518:	2304      	movs	r3, #4
 800b51a:	e002      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b51c:	2302      	movs	r3, #2
 800b51e:	e000      	b.n	800b522 <UART_SetConfig+0x1d42>
 800b520:	2301      	movs	r3, #1
 800b522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b524:	fbb2 f2f3 	udiv	r2, r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	085b      	lsrs	r3, r3, #1
 800b52e:	441a      	add	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	fbb2 f3f3 	udiv	r3, r2, r3
 800b538:	b29b      	uxth	r3, r3
 800b53a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b53c:	e2aa      	b.n	800ba94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b53e:	f7fa fe81 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 800b542:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d044      	beq.n	800b5d6 <UART_SetConfig+0x1df6>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	2b01      	cmp	r3, #1
 800b552:	d03e      	beq.n	800b5d2 <UART_SetConfig+0x1df2>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d038      	beq.n	800b5ce <UART_SetConfig+0x1dee>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	2b03      	cmp	r3, #3
 800b562:	d032      	beq.n	800b5ca <UART_SetConfig+0x1dea>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b568:	2b04      	cmp	r3, #4
 800b56a:	d02c      	beq.n	800b5c6 <UART_SetConfig+0x1de6>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	2b05      	cmp	r3, #5
 800b572:	d026      	beq.n	800b5c2 <UART_SetConfig+0x1de2>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	2b06      	cmp	r3, #6
 800b57a:	d020      	beq.n	800b5be <UART_SetConfig+0x1dde>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	2b07      	cmp	r3, #7
 800b582:	d01a      	beq.n	800b5ba <UART_SetConfig+0x1dda>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d014      	beq.n	800b5b6 <UART_SetConfig+0x1dd6>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	2b09      	cmp	r3, #9
 800b592:	d00e      	beq.n	800b5b2 <UART_SetConfig+0x1dd2>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	2b0a      	cmp	r3, #10
 800b59a:	d008      	beq.n	800b5ae <UART_SetConfig+0x1dce>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	2b0b      	cmp	r3, #11
 800b5a2:	d102      	bne.n	800b5aa <UART_SetConfig+0x1dca>
 800b5a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a8:	e016      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e014      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5ae:	2380      	movs	r3, #128	; 0x80
 800b5b0:	e012      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5b2:	2340      	movs	r3, #64	; 0x40
 800b5b4:	e010      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5b6:	2320      	movs	r3, #32
 800b5b8:	e00e      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5ba:	2310      	movs	r3, #16
 800b5bc:	e00c      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	e00a      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5c2:	230a      	movs	r3, #10
 800b5c4:	e008      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5c6:	2308      	movs	r3, #8
 800b5c8:	e006      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5ca:	2306      	movs	r3, #6
 800b5cc:	e004      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5ce:	2304      	movs	r3, #4
 800b5d0:	e002      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	e000      	b.n	800b5d8 <UART_SetConfig+0x1df8>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5da:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	085b      	lsrs	r3, r3, #1
 800b5e4:	441a      	add	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5f2:	e24f      	b.n	800ba94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f4:	f107 0318 	add.w	r3, r7, #24
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fb ffa5 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d044      	beq.n	800b692 <UART_SetConfig+0x1eb2>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d03e      	beq.n	800b68e <UART_SetConfig+0x1eae>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b02      	cmp	r3, #2
 800b616:	d038      	beq.n	800b68a <UART_SetConfig+0x1eaa>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d032      	beq.n	800b686 <UART_SetConfig+0x1ea6>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b04      	cmp	r3, #4
 800b626:	d02c      	beq.n	800b682 <UART_SetConfig+0x1ea2>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d026      	beq.n	800b67e <UART_SetConfig+0x1e9e>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b634:	2b06      	cmp	r3, #6
 800b636:	d020      	beq.n	800b67a <UART_SetConfig+0x1e9a>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	2b07      	cmp	r3, #7
 800b63e:	d01a      	beq.n	800b676 <UART_SetConfig+0x1e96>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	2b08      	cmp	r3, #8
 800b646:	d014      	beq.n	800b672 <UART_SetConfig+0x1e92>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	d00e      	beq.n	800b66e <UART_SetConfig+0x1e8e>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b654:	2b0a      	cmp	r3, #10
 800b656:	d008      	beq.n	800b66a <UART_SetConfig+0x1e8a>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	2b0b      	cmp	r3, #11
 800b65e:	d102      	bne.n	800b666 <UART_SetConfig+0x1e86>
 800b660:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b664:	e016      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b666:	2301      	movs	r3, #1
 800b668:	e014      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b66a:	2380      	movs	r3, #128	; 0x80
 800b66c:	e012      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b66e:	2340      	movs	r3, #64	; 0x40
 800b670:	e010      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b672:	2320      	movs	r3, #32
 800b674:	e00e      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b676:	2310      	movs	r3, #16
 800b678:	e00c      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b67a:	230c      	movs	r3, #12
 800b67c:	e00a      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b67e:	230a      	movs	r3, #10
 800b680:	e008      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b682:	2308      	movs	r3, #8
 800b684:	e006      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b686:	2306      	movs	r3, #6
 800b688:	e004      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b68a:	2304      	movs	r3, #4
 800b68c:	e002      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b68e:	2302      	movs	r3, #2
 800b690:	e000      	b.n	800b694 <UART_SetConfig+0x1eb4>
 800b692:	2301      	movs	r3, #1
 800b694:	fbb2 f2f3 	udiv	r2, r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	085b      	lsrs	r3, r3, #1
 800b69e:	441a      	add	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6ac:	e1f2      	b.n	800ba94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ae:	f107 030c 	add.w	r3, r7, #12
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fc f894 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d044      	beq.n	800b74c <UART_SetConfig+0x1f6c>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d03e      	beq.n	800b748 <UART_SetConfig+0x1f68>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d038      	beq.n	800b744 <UART_SetConfig+0x1f64>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d032      	beq.n	800b740 <UART_SetConfig+0x1f60>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d02c      	beq.n	800b73c <UART_SetConfig+0x1f5c>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d026      	beq.n	800b738 <UART_SetConfig+0x1f58>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	2b06      	cmp	r3, #6
 800b6f0:	d020      	beq.n	800b734 <UART_SetConfig+0x1f54>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	2b07      	cmp	r3, #7
 800b6f8:	d01a      	beq.n	800b730 <UART_SetConfig+0x1f50>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d014      	beq.n	800b72c <UART_SetConfig+0x1f4c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	2b09      	cmp	r3, #9
 800b708:	d00e      	beq.n	800b728 <UART_SetConfig+0x1f48>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	2b0a      	cmp	r3, #10
 800b710:	d008      	beq.n	800b724 <UART_SetConfig+0x1f44>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b716:	2b0b      	cmp	r3, #11
 800b718:	d102      	bne.n	800b720 <UART_SetConfig+0x1f40>
 800b71a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b71e:	e016      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b720:	2301      	movs	r3, #1
 800b722:	e014      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b724:	2380      	movs	r3, #128	; 0x80
 800b726:	e012      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	e010      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b72c:	2320      	movs	r3, #32
 800b72e:	e00e      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b730:	2310      	movs	r3, #16
 800b732:	e00c      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b734:	230c      	movs	r3, #12
 800b736:	e00a      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b738:	230a      	movs	r3, #10
 800b73a:	e008      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b73c:	2308      	movs	r3, #8
 800b73e:	e006      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b740:	2306      	movs	r3, #6
 800b742:	e004      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b744:	2304      	movs	r3, #4
 800b746:	e002      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b748:	2302      	movs	r3, #2
 800b74a:	e000      	b.n	800b74e <UART_SetConfig+0x1f6e>
 800b74c:	2301      	movs	r3, #1
 800b74e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	085b      	lsrs	r3, r3, #1
 800b758:	441a      	add	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b762:	b29b      	uxth	r3, r3
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b766:	e195      	b.n	800ba94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b768:	4b87      	ldr	r3, [pc, #540]	; (800b988 <UART_SetConfig+0x21a8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0320 	and.w	r3, r3, #32
 800b770:	2b00      	cmp	r3, #0
 800b772:	d05d      	beq.n	800b830 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b774:	4b84      	ldr	r3, [pc, #528]	; (800b988 <UART_SetConfig+0x21a8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	08db      	lsrs	r3, r3, #3
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	4a83      	ldr	r2, [pc, #524]	; (800b98c <UART_SetConfig+0x21ac>)
 800b780:	40da      	lsrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b00      	cmp	r3, #0
 800b788:	d044      	beq.n	800b814 <UART_SetConfig+0x2034>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d03e      	beq.n	800b810 <UART_SetConfig+0x2030>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b02      	cmp	r3, #2
 800b798:	d038      	beq.n	800b80c <UART_SetConfig+0x202c>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d032      	beq.n	800b808 <UART_SetConfig+0x2028>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d02c      	beq.n	800b804 <UART_SetConfig+0x2024>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	d026      	beq.n	800b800 <UART_SetConfig+0x2020>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	2b06      	cmp	r3, #6
 800b7b8:	d020      	beq.n	800b7fc <UART_SetConfig+0x201c>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	2b07      	cmp	r3, #7
 800b7c0:	d01a      	beq.n	800b7f8 <UART_SetConfig+0x2018>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	2b08      	cmp	r3, #8
 800b7c8:	d014      	beq.n	800b7f4 <UART_SetConfig+0x2014>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	2b09      	cmp	r3, #9
 800b7d0:	d00e      	beq.n	800b7f0 <UART_SetConfig+0x2010>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b0a      	cmp	r3, #10
 800b7d8:	d008      	beq.n	800b7ec <UART_SetConfig+0x200c>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	2b0b      	cmp	r3, #11
 800b7e0:	d102      	bne.n	800b7e8 <UART_SetConfig+0x2008>
 800b7e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e6:	e016      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e014      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7ec:	2380      	movs	r3, #128	; 0x80
 800b7ee:	e012      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	e010      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7f4:	2320      	movs	r3, #32
 800b7f6:	e00e      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7f8:	2310      	movs	r3, #16
 800b7fa:	e00c      	b.n	800b816 <UART_SetConfig+0x2036>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	e00a      	b.n	800b816 <UART_SetConfig+0x2036>
 800b800:	230a      	movs	r3, #10
 800b802:	e008      	b.n	800b816 <UART_SetConfig+0x2036>
 800b804:	2308      	movs	r3, #8
 800b806:	e006      	b.n	800b816 <UART_SetConfig+0x2036>
 800b808:	2306      	movs	r3, #6
 800b80a:	e004      	b.n	800b816 <UART_SetConfig+0x2036>
 800b80c:	2304      	movs	r3, #4
 800b80e:	e002      	b.n	800b816 <UART_SetConfig+0x2036>
 800b810:	2302      	movs	r3, #2
 800b812:	e000      	b.n	800b816 <UART_SetConfig+0x2036>
 800b814:	2301      	movs	r3, #1
 800b816:	fbb2 f2f3 	udiv	r2, r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	085b      	lsrs	r3, r3, #1
 800b820:	441a      	add	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b82e:	e131      	b.n	800ba94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	2b00      	cmp	r3, #0
 800b836:	d043      	beq.n	800b8c0 <UART_SetConfig+0x20e0>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d03d      	beq.n	800b8bc <UART_SetConfig+0x20dc>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b844:	2b02      	cmp	r3, #2
 800b846:	d037      	beq.n	800b8b8 <UART_SetConfig+0x20d8>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d031      	beq.n	800b8b4 <UART_SetConfig+0x20d4>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	2b04      	cmp	r3, #4
 800b856:	d02b      	beq.n	800b8b0 <UART_SetConfig+0x20d0>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	2b05      	cmp	r3, #5
 800b85e:	d025      	beq.n	800b8ac <UART_SetConfig+0x20cc>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	2b06      	cmp	r3, #6
 800b866:	d01f      	beq.n	800b8a8 <UART_SetConfig+0x20c8>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	2b07      	cmp	r3, #7
 800b86e:	d019      	beq.n	800b8a4 <UART_SetConfig+0x20c4>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	2b08      	cmp	r3, #8
 800b876:	d013      	beq.n	800b8a0 <UART_SetConfig+0x20c0>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	d00d      	beq.n	800b89c <UART_SetConfig+0x20bc>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	2b0a      	cmp	r3, #10
 800b886:	d007      	beq.n	800b898 <UART_SetConfig+0x20b8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88c:	2b0b      	cmp	r3, #11
 800b88e:	d101      	bne.n	800b894 <UART_SetConfig+0x20b4>
 800b890:	4b3f      	ldr	r3, [pc, #252]	; (800b990 <UART_SetConfig+0x21b0>)
 800b892:	e016      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b894:	4b3d      	ldr	r3, [pc, #244]	; (800b98c <UART_SetConfig+0x21ac>)
 800b896:	e014      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b898:	4b3e      	ldr	r3, [pc, #248]	; (800b994 <UART_SetConfig+0x21b4>)
 800b89a:	e012      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b89c:	4b3e      	ldr	r3, [pc, #248]	; (800b998 <UART_SetConfig+0x21b8>)
 800b89e:	e010      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8a0:	4b3e      	ldr	r3, [pc, #248]	; (800b99c <UART_SetConfig+0x21bc>)
 800b8a2:	e00e      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8a4:	4b3e      	ldr	r3, [pc, #248]	; (800b9a0 <UART_SetConfig+0x21c0>)
 800b8a6:	e00c      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8a8:	4b3e      	ldr	r3, [pc, #248]	; (800b9a4 <UART_SetConfig+0x21c4>)
 800b8aa:	e00a      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8ac:	4b3e      	ldr	r3, [pc, #248]	; (800b9a8 <UART_SetConfig+0x21c8>)
 800b8ae:	e008      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8b0:	4b3e      	ldr	r3, [pc, #248]	; (800b9ac <UART_SetConfig+0x21cc>)
 800b8b2:	e006      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8b4:	4b3e      	ldr	r3, [pc, #248]	; (800b9b0 <UART_SetConfig+0x21d0>)
 800b8b6:	e004      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <UART_SetConfig+0x21d4>)
 800b8ba:	e002      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8bc:	4b3e      	ldr	r3, [pc, #248]	; (800b9b8 <UART_SetConfig+0x21d8>)
 800b8be:	e000      	b.n	800b8c2 <UART_SetConfig+0x20e2>
 800b8c0:	4b32      	ldr	r3, [pc, #200]	; (800b98c <UART_SetConfig+0x21ac>)
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6852      	ldr	r2, [r2, #4]
 800b8c6:	0852      	lsrs	r2, r2, #1
 800b8c8:	441a      	add	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8d6:	e0dd      	b.n	800ba94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d046      	beq.n	800b96e <UART_SetConfig+0x218e>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d040      	beq.n	800b96a <UART_SetConfig+0x218a>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d03a      	beq.n	800b966 <UART_SetConfig+0x2186>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d034      	beq.n	800b962 <UART_SetConfig+0x2182>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d02e      	beq.n	800b95e <UART_SetConfig+0x217e>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	2b05      	cmp	r3, #5
 800b906:	d028      	beq.n	800b95a <UART_SetConfig+0x217a>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	2b06      	cmp	r3, #6
 800b90e:	d022      	beq.n	800b956 <UART_SetConfig+0x2176>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	2b07      	cmp	r3, #7
 800b916:	d01c      	beq.n	800b952 <UART_SetConfig+0x2172>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b08      	cmp	r3, #8
 800b91e:	d016      	beq.n	800b94e <UART_SetConfig+0x216e>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2b09      	cmp	r3, #9
 800b926:	d00f      	beq.n	800b948 <UART_SetConfig+0x2168>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b0a      	cmp	r3, #10
 800b92e:	d008      	beq.n	800b942 <UART_SetConfig+0x2162>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b0b      	cmp	r3, #11
 800b936:	d102      	bne.n	800b93e <UART_SetConfig+0x215e>
 800b938:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b93c:	e018      	b.n	800b970 <UART_SetConfig+0x2190>
 800b93e:	4b18      	ldr	r3, [pc, #96]	; (800b9a0 <UART_SetConfig+0x21c0>)
 800b940:	e016      	b.n	800b970 <UART_SetConfig+0x2190>
 800b942:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b946:	e013      	b.n	800b970 <UART_SetConfig+0x2190>
 800b948:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b94c:	e010      	b.n	800b970 <UART_SetConfig+0x2190>
 800b94e:	4b1b      	ldr	r3, [pc, #108]	; (800b9bc <UART_SetConfig+0x21dc>)
 800b950:	e00e      	b.n	800b970 <UART_SetConfig+0x2190>
 800b952:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <UART_SetConfig+0x21b0>)
 800b954:	e00c      	b.n	800b970 <UART_SetConfig+0x2190>
 800b956:	4b1a      	ldr	r3, [pc, #104]	; (800b9c0 <UART_SetConfig+0x21e0>)
 800b958:	e00a      	b.n	800b970 <UART_SetConfig+0x2190>
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <UART_SetConfig+0x21e4>)
 800b95c:	e008      	b.n	800b970 <UART_SetConfig+0x2190>
 800b95e:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <UART_SetConfig+0x21b4>)
 800b960:	e006      	b.n	800b970 <UART_SetConfig+0x2190>
 800b962:	4b19      	ldr	r3, [pc, #100]	; (800b9c8 <UART_SetConfig+0x21e8>)
 800b964:	e004      	b.n	800b970 <UART_SetConfig+0x2190>
 800b966:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <UART_SetConfig+0x21b8>)
 800b968:	e002      	b.n	800b970 <UART_SetConfig+0x2190>
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <UART_SetConfig+0x21bc>)
 800b96c:	e000      	b.n	800b970 <UART_SetConfig+0x2190>
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <UART_SetConfig+0x21c0>)
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	6852      	ldr	r2, [r2, #4]
 800b974:	0852      	lsrs	r2, r2, #1
 800b976:	441a      	add	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b980:	b29b      	uxth	r3, r3
 800b982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b984:	e086      	b.n	800ba94 <UART_SetConfig+0x22b4>
 800b986:	bf00      	nop
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	0003d090 	.word	0x0003d090
 800b994:	0007a120 	.word	0x0007a120
 800b998:	000f4240 	.word	0x000f4240
 800b99c:	001e8480 	.word	0x001e8480
 800b9a0:	003d0900 	.word	0x003d0900
 800b9a4:	00516155 	.word	0x00516155
 800b9a8:	0061a800 	.word	0x0061a800
 800b9ac:	007a1200 	.word	0x007a1200
 800b9b0:	00a2c2aa 	.word	0x00a2c2aa
 800b9b4:	00f42400 	.word	0x00f42400
 800b9b8:	01e84800 	.word	0x01e84800
 800b9bc:	0001e848 	.word	0x0001e848
 800b9c0:	00051615 	.word	0x00051615
 800b9c4:	00061a80 	.word	0x00061a80
 800b9c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d04e      	beq.n	800ba72 <UART_SetConfig+0x2292>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d047      	beq.n	800ba6c <UART_SetConfig+0x228c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d040      	beq.n	800ba66 <UART_SetConfig+0x2286>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d039      	beq.n	800ba60 <UART_SetConfig+0x2280>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d032      	beq.n	800ba5a <UART_SetConfig+0x227a>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d02b      	beq.n	800ba54 <UART_SetConfig+0x2274>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	2b06      	cmp	r3, #6
 800ba02:	d024      	beq.n	800ba4e <UART_SetConfig+0x226e>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	2b07      	cmp	r3, #7
 800ba0a:	d01d      	beq.n	800ba48 <UART_SetConfig+0x2268>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d016      	beq.n	800ba42 <UART_SetConfig+0x2262>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d00f      	beq.n	800ba3c <UART_SetConfig+0x225c>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b0a      	cmp	r3, #10
 800ba22:	d008      	beq.n	800ba36 <UART_SetConfig+0x2256>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b0b      	cmp	r3, #11
 800ba2a:	d101      	bne.n	800ba30 <UART_SetConfig+0x2250>
 800ba2c:	2380      	movs	r3, #128	; 0x80
 800ba2e:	e022      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba34:	e01f      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba3a:	e01c      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba40:	e019      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba46:	e016      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba4c:	e013      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ba52:	e010      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba54:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ba58:	e00d      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba5e:	e00a      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba60:	f241 5355 	movw	r3, #5461	; 0x1555
 800ba64:	e007      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba6a:	e004      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba70:	e001      	b.n	800ba76 <UART_SetConfig+0x2296>
 800ba72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	6852      	ldr	r2, [r2, #4]
 800ba7a:	0852      	lsrs	r2, r2, #1
 800ba7c:	441a      	add	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba8a:	e003      	b.n	800ba94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ba92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba96:	2b0f      	cmp	r3, #15
 800ba98:	d908      	bls.n	800baac <UART_SetConfig+0x22cc>
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa0:	d204      	bcs.n	800baac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa8:	60da      	str	r2, [r3, #12]
 800baaa:	e002      	b.n	800bab2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3740      	adds	r7, #64	; 0x40
 800bad6:	46bd      	mov	sp, r7
 800bad8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800badc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00a      	beq.n	800bb06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0a:	f003 0302 	and.w	r3, r3, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00a      	beq.n	800bb4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	430a      	orrs	r2, r1
 800bb48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00a      	beq.n	800bb6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00a      	beq.n	800bb8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	f003 0320 	and.w	r3, r3, #32
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	430a      	orrs	r2, r1
 800bbae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01a      	beq.n	800bbf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbda:	d10a      	bne.n	800bbf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	605a      	str	r2, [r3, #4]
  }
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bc30:	f7f6 fb9a 	bl	8002368 <HAL_GetTick>
 800bc34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0308 	and.w	r3, r3, #8
 800bc40:	2b08      	cmp	r3, #8
 800bc42:	d10e      	bne.n	800bc62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f82c 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e022      	b.n	800bca8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0304 	and.w	r3, r3, #4
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	d10e      	bne.n	800bc8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f816 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e00c      	b.n	800bca8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2220      	movs	r2, #32
 800bc92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc0:	e062      	b.n	800bd88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d05e      	beq.n	800bd88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcca:	f7f6 fb4d 	bl	8002368 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d302      	bcc.n	800bce0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d11d      	bne.n	800bd1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bcee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689a      	ldr	r2, [r3, #8]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0201 	bic.w	r2, r2, #1
 800bcfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e045      	b.n	800bda8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d02e      	beq.n	800bd88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd38:	d126      	bne.n	800bd88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd42:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	689a      	ldr	r2, [r3, #8]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0201 	bic.w	r2, r2, #1
 800bd62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2220      	movs	r2, #32
 800bd78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e00f      	b.n	800bda8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	69da      	ldr	r2, [r3, #28]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	4013      	ands	r3, r2
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	bf0c      	ite	eq
 800bd98:	2301      	moveq	r3, #1
 800bd9a:	2300      	movne	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	79fb      	ldrb	r3, [r7, #7]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d08d      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d101      	bne.n	800bdc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e027      	b.n	800be16 <HAL_UARTEx_DisableFifoMode+0x66>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2224      	movs	r2, #36	; 0x24
 800bdd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 0201 	bic.w	r2, r2, #1
 800bdec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bdf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be32:	2b01      	cmp	r3, #1
 800be34:	d101      	bne.n	800be3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be36:	2302      	movs	r3, #2
 800be38:	e02d      	b.n	800be96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2224      	movs	r2, #36	; 0x24
 800be46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f022 0201 	bic.w	r2, r2, #1
 800be60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f850 	bl	800bf1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2220      	movs	r2, #32
 800be88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d101      	bne.n	800beb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800beb2:	2302      	movs	r3, #2
 800beb4:	e02d      	b.n	800bf12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2224      	movs	r2, #36	; 0x24
 800bec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f022 0201 	bic.w	r2, r2, #1
 800bedc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f812 	bl	800bf1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b089      	sub	sp, #36	; 0x24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf24:	4a2f      	ldr	r2, [pc, #188]	; (800bfe4 <UARTEx_SetNbDataToProcess+0xc8>)
 800bf26:	f107 0314 	add.w	r3, r7, #20
 800bf2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bf32:	4a2d      	ldr	r2, [pc, #180]	; (800bfe8 <UARTEx_SetNbDataToProcess+0xcc>)
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d108      	bne.n	800bf5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf58:	e03d      	b.n	800bfd6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf5a:	2308      	movs	r3, #8
 800bf5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf5e:	2308      	movs	r3, #8
 800bf60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	0e5b      	lsrs	r3, r3, #25
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f003 0307 	and.w	r3, r3, #7
 800bf70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	0f5b      	lsrs	r3, r3, #29
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 0307 	and.w	r3, r3, #7
 800bf80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bf82:	7fbb      	ldrb	r3, [r7, #30]
 800bf84:	7f3a      	ldrb	r2, [r7, #28]
 800bf86:	f107 0120 	add.w	r1, r7, #32
 800bf8a:	440a      	add	r2, r1
 800bf8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bf90:	fb02 f303 	mul.w	r3, r2, r3
 800bf94:	7f3a      	ldrb	r2, [r7, #28]
 800bf96:	f107 0120 	add.w	r1, r7, #32
 800bf9a:	440a      	add	r2, r1
 800bf9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bfa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bfac:	7ffb      	ldrb	r3, [r7, #31]
 800bfae:	7f7a      	ldrb	r2, [r7, #29]
 800bfb0:	f107 0120 	add.w	r1, r7, #32
 800bfb4:	440a      	add	r2, r1
 800bfb6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bfba:	fb02 f303 	mul.w	r3, r2, r3
 800bfbe:	7f7a      	ldrb	r2, [r7, #29]
 800bfc0:	f107 0120 	add.w	r1, r7, #32
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bfca:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bfd6:	bf00      	nop
 800bfd8:	3724      	adds	r7, #36	; 0x24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	0800d340 	.word	0x0800d340
 800bfe8:	0800d348 	.word	0x0800d348

0800bfec <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	f023 0101 	bic.w	r1, r3, #1
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	2b08      	cmp	r3, #8
 800c014:	d102      	bne.n	800c01c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	e001      	b.n	800c020 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank],
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c02a:	4b2b      	ldr	r3, [pc, #172]	; (800c0d8 <FMC_NORSRAM_Init+0xec>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	6851      	ldr	r1, [r2, #4]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	4311      	orrs	r1, r2
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	6892      	ldr	r2, [r2, #8]
 800c03a:	4311      	orrs	r1, r2
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	68d2      	ldr	r2, [r2, #12]
 800c040:	4311      	orrs	r1, r2
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	6912      	ldr	r2, [r2, #16]
 800c046:	4311      	orrs	r1, r2
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	6952      	ldr	r2, [r2, #20]
 800c04c:	4311      	orrs	r1, r2
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	6992      	ldr	r2, [r2, #24]
 800c052:	4311      	orrs	r1, r2
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	69d2      	ldr	r2, [r2, #28]
 800c058:	4311      	orrs	r1, r2
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	6a12      	ldr	r2, [r2, #32]
 800c05e:	4311      	orrs	r1, r2
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c064:	4311      	orrs	r1, r2
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c06a:	4311      	orrs	r1, r2
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c070:	4311      	orrs	r1, r2
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c076:	4311      	orrs	r1, r2
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c07c:	4311      	orrs	r1, r2
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c082:	4311      	orrs	r1, r2
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	6812      	ldr	r2, [r2, #0]
 800c088:	4319      	orrs	r1, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              Init->ContinuousClock         |
              Init->WriteFifo               |
              Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c098:	d10c      	bne.n	800c0b4 <FMC_NORSRAM_Init+0xc8>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d008      	beq.n	800c0b4 <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d006      	beq.n	800c0ca <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	ffc00480 	.word	0xffc00480

0800c0dc <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	011b      	lsls	r3, r3, #4
 800c100:	431a      	orrs	r2, r3
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	431a      	orrs	r2, r3
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	041b      	lsls	r3, r3, #16
 800c110:	431a      	orrs	r2, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	3b01      	subs	r3, #1
 800c118:	051b      	lsls	r3, r3, #20
 800c11a:	431a      	orrs	r2, r3
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	3b02      	subs	r3, #2
 800c122:	061b      	lsls	r3, r3, #24
 800c124:	431a      	orrs	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	3201      	adds	r2, #1
 800c130:	4319      	orrs	r1, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c144:	d113      	bne.n	800c16e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c14e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	051b      	lsls	r3, r3, #20
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	431a      	orrs	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	371c      	adds	r7, #28
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c190:	d11d      	bne.n	800c1ce <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c19c:	4013      	ands	r3, r2
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	6811      	ldr	r1, [r2, #0]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	6852      	ldr	r2, [r2, #4]
 800c1a6:	0112      	lsls	r2, r2, #4
 800c1a8:	4311      	orrs	r1, r2
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	6892      	ldr	r2, [r2, #8]
 800c1ae:	0212      	lsls	r2, r2, #8
 800c1b0:	4311      	orrs	r1, r2
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	6992      	ldr	r2, [r2, #24]
 800c1b6:	4311      	orrs	r1, r2
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	68d2      	ldr	r2, [r2, #12]
 800c1bc:	0412      	lsls	r2, r2, #16
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	ea43 0102 	orr.w	r1, r3, r2
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c1cc:	e005      	b.n	800c1da <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c1d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	cff00000 	.word	0xcff00000

0800c1ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d121      	bne.n	800c242 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <FMC_SDRAM_Init+0xb4>)
 800c204:	4013      	ands	r3, r2
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	6851      	ldr	r1, [r2, #4]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	6892      	ldr	r2, [r2, #8]
 800c20e:	4311      	orrs	r1, r2
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	68d2      	ldr	r2, [r2, #12]
 800c214:	4311      	orrs	r1, r2
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6912      	ldr	r2, [r2, #16]
 800c21a:	4311      	orrs	r1, r2
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	6952      	ldr	r2, [r2, #20]
 800c220:	4311      	orrs	r1, r2
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	6992      	ldr	r2, [r2, #24]
 800c226:	4311      	orrs	r1, r2
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	69d2      	ldr	r2, [r2, #28]
 800c22c:	4311      	orrs	r1, r2
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	6a12      	ldr	r2, [r2, #32]
 800c232:	4311      	orrs	r1, r2
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c238:	430a      	orrs	r2, r1
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	e026      	b.n	800c290 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	69d9      	ldr	r1, [r3, #28]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	4319      	orrs	r1, r3
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	430b      	orrs	r3, r1
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <FMC_SDRAM_Init+0xb4>)
 800c266:	4013      	ands	r3, r2
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	6851      	ldr	r1, [r2, #4]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	6892      	ldr	r2, [r2, #8]
 800c270:	4311      	orrs	r1, r2
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	68d2      	ldr	r2, [r2, #12]
 800c276:	4311      	orrs	r1, r2
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	6912      	ldr	r2, [r2, #16]
 800c27c:	4311      	orrs	r1, r2
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	6952      	ldr	r2, [r2, #20]
 800c282:	4311      	orrs	r1, r2
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	6992      	ldr	r2, [r2, #24]
 800c288:	430a      	orrs	r2, r1
 800c28a:	431a      	orrs	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	ffff8000 	.word	0xffff8000

0800c2a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d128      	bne.n	800c308 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	1e59      	subs	r1, r3, #1
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4319      	orrs	r1, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	4319      	orrs	r1, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	031b      	lsls	r3, r3, #12
 800c2e0:	4319      	orrs	r1, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	041b      	lsls	r3, r3, #16
 800c2ea:	4319      	orrs	r1, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	051b      	lsls	r3, r3, #20
 800c2f4:	4319      	orrs	r1, r3
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	061b      	lsls	r3, r3, #24
 800c2fe:	430b      	orrs	r3, r1
 800c300:	431a      	orrs	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	609a      	str	r2, [r3, #8]
 800c306:	e02d      	b.n	800c364 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	4b19      	ldr	r3, [pc, #100]	; (800c374 <FMC_SDRAM_Timing_Init+0xd0>)
 800c30e:	4013      	ands	r3, r2
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	68d2      	ldr	r2, [r2, #12]
 800c314:	3a01      	subs	r2, #1
 800c316:	0311      	lsls	r1, r2, #12
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	6952      	ldr	r2, [r2, #20]
 800c31c:	3a01      	subs	r2, #1
 800c31e:	0512      	lsls	r2, r2, #20
 800c320:	430a      	orrs	r2, r1
 800c322:	431a      	orrs	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	1e59      	subs	r1, r3, #1
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	011b      	lsls	r3, r3, #4
 800c33e:	4319      	orrs	r1, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	3b01      	subs	r3, #1
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	4319      	orrs	r1, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	3b01      	subs	r3, #1
 800c350:	041b      	lsls	r3, r3, #16
 800c352:	4319      	orrs	r1, r3
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	3b01      	subs	r3, #1
 800c35a:	061b      	lsls	r3, r3, #24
 800c35c:	430b      	orrs	r3, r1
 800c35e:	431a      	orrs	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	ff0f0fff 	.word	0xff0f0fff

0800c378 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c378:	b084      	sub	sp, #16
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	f107 001c 	add.w	r0, r7, #28
 800c386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c38e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c390:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c392:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c396:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c39a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c39e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	4b07      	ldr	r3, [pc, #28]	; (800c3c8 <SDMMC_Init+0x50>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	b004      	add	sp, #16
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	ffc02c00 	.word	0xffc02c00

0800c3cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f043 0203 	orr.w	r2, r3, #3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0303 	and.w	r3, r3, #3
}
 800c418:	4618      	mov	r0, r3
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c442:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c448:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c44e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	4b06      	ldr	r3, [pc, #24]	; (800c474 <SDMMC_SendCommand+0x50>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	431a      	orrs	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	fffee0c0 	.word	0xfffee0c0

0800c478 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	b2db      	uxtb	r3, r3
}
 800c486:	4618      	mov	r0, r3
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3314      	adds	r3, #20
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c4e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c4ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c502:	2300      	movs	r3, #0

}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c51e:	2310      	movs	r3, #16
 800c520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c522:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c528:	2300      	movs	r3, #0
 800c52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c532:	f107 0308 	add.w	r3, r7, #8
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ff73 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c542:	2110      	movs	r1, #16
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f9e3 	bl	800c910 <SDMMC_GetCmdResp1>
 800c54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54c:	69fb      	ldr	r3, [r7, #28]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3720      	adds	r7, #32
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b08a      	sub	sp, #40	; 0x28
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c566:	2307      	movs	r3, #7
 800c568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c56a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c56e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c578:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c57a:	f107 0310 	add.w	r3, r7, #16
 800c57e:	4619      	mov	r1, r3
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7ff ff4f 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c586:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58a:	2107      	movs	r1, #7
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 f9bf 	bl	800c910 <SDMMC_GetCmdResp1>
 800c592:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	; 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b088      	sub	sp, #32
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff ff2e 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f977 	bl	800c8bc <SDMMC_GetCmdError>
 800c5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3720      	adds	r7, #32
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b088      	sub	sp, #32
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c5e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5fc:	f107 0308 	add.w	r3, r7, #8
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ff0e 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fb6b 	bl	800cce4 <SDMMC_GetCmdResp7>
 800c60e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c610:	69fb      	ldr	r3, [r7, #28]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3720      	adds	r7, #32
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b088      	sub	sp, #32
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c628:	2337      	movs	r3, #55	; 0x37
 800c62a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c632:	2300      	movs	r3, #0
 800c634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c63a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c63c:	f107 0308 	add.w	r3, r7, #8
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff feee 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c648:	f241 3288 	movw	r2, #5000	; 0x1388
 800c64c:	2137      	movs	r1, #55	; 0x37
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f95e 	bl	800c910 <SDMMC_GetCmdResp1>
 800c654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c656:	69fb      	ldr	r3, [r7, #28]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3720      	adds	r7, #32
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c66e:	2329      	movs	r3, #41	; 0x29
 800c670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c672:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c680:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c682:	f107 0308 	add.w	r3, r7, #8
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff fecb 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fa76 	bl	800cb80 <SDMMC_GetCmdResp3>
 800c694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c696:	69fb      	ldr	r3, [r7, #28]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3720      	adds	r7, #32
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b088      	sub	sp, #32
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c6ae:	2306      	movs	r3, #6
 800c6b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c2:	f107 0308 	add.w	r3, r7, #8
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff feab 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c6ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d2:	2106      	movs	r1, #6
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f91b 	bl	800c910 <SDMMC_GetCmdResp1>
 800c6da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3720      	adds	r7, #32
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b088      	sub	sp, #32
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c6f2:	2333      	movs	r3, #51	; 0x33
 800c6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c706:	f107 0308 	add.w	r3, r7, #8
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fe89 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c712:	f241 3288 	movw	r2, #5000	; 0x1388
 800c716:	2133      	movs	r1, #51	; 0x33
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f8f9 	bl	800c910 <SDMMC_GetCmdResp1>
 800c71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c720:	69fb      	ldr	r3, [r7, #28]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3720      	adds	r7, #32
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b088      	sub	sp, #32
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c736:	2302      	movs	r3, #2
 800c738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c73a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c73e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fe67 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9ca 	bl	800caf0 <SDMMC_GetCmdResp2>
 800c75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c75e:	69fb      	ldr	r3, [r7, #28]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b088      	sub	sp, #32
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c776:	2309      	movs	r3, #9
 800c778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c77a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c780:	2300      	movs	r3, #0
 800c782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c78a:	f107 0308 	add.w	r3, r7, #8
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fe47 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9aa 	bl	800caf0 <SDMMC_GetCmdResp2>
 800c79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c79e:	69fb      	ldr	r3, [r7, #28]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ca:	f107 0308 	add.w	r3, r7, #8
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fe27 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	2103      	movs	r1, #3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa0c 	bl	800cbf8 <SDMMC_GetCmdResp6>
 800c7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3720      	adds	r7, #32
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c7fa:	230d      	movs	r3, #13
 800c7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c80c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c80e:	f107 0308 	add.w	r3, r7, #8
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fe05 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c81e:	210d      	movs	r1, #13
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f875 	bl	800c910 <SDMMC_GetCmdResp1>
 800c826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c828:	69fb      	ldr	r3, [r7, #28]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3720      	adds	r7, #32
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b088      	sub	sp, #32
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c83e:	230d      	movs	r3, #13
 800c840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c842:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c848:	2300      	movs	r3, #0
 800c84a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c84c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c852:	f107 0308 	add.w	r3, r7, #8
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff fde3 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c85e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c862:	210d      	movs	r1, #13
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f853 	bl	800c910 <SDMMC_GetCmdResp1>
 800c86a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c86c:	69fb      	ldr	r3, [r7, #28]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3720      	adds	r7, #32
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b088      	sub	sp, #32
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c87e:	2300      	movs	r3, #0
 800c880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c882:	230b      	movs	r3, #11
 800c884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c88c:	2300      	movs	r3, #0
 800c88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c896:	f107 0308 	add.w	r3, r7, #8
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff fdc1 	bl	800c424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a6:	210b      	movs	r1, #11
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f831 	bl	800c910 <SDMMC_GetCmdResp1>
 800c8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8b0:	69fb      	ldr	r3, [r7, #28]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3720      	adds	r7, #32
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c8bc:	b490      	push	{r4, r7}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <SDMMC_GetCmdError+0x48>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a0f      	ldr	r2, [pc, #60]	; (800c908 <SDMMC_GetCmdError+0x4c>)
 800c8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ce:	0a5b      	lsrs	r3, r3, #9
 800c8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c8d8:	4623      	mov	r3, r4
 800c8da:	1e5c      	subs	r4, r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d102      	bne.n	800c8e6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8e4:	e009      	b.n	800c8fa <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0f2      	beq.n	800c8d8 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a05      	ldr	r2, [pc, #20]	; (800c90c <SDMMC_GetCmdError+0x50>)
 800c8f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bc90      	pop	{r4, r7}
 800c902:	4770      	bx	lr
 800c904:	24000004 	.word	0x24000004
 800c908:	10624dd3 	.word	0x10624dd3
 800c90c:	002000c5 	.word	0x002000c5

0800c910 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	460b      	mov	r3, r1
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c91e:	4b6f      	ldr	r3, [pc, #444]	; (800cadc <SDMMC_GetCmdResp1+0x1cc>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a6f      	ldr	r2, [pc, #444]	; (800cae0 <SDMMC_GetCmdResp1+0x1d0>)
 800c924:	fba2 2303 	umull	r2, r3, r2, r3
 800c928:	0a5b      	lsrs	r3, r3, #9
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c930:	4623      	mov	r3, r4
 800c932:	1e5c      	subs	r4, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c93c:	e0c9      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c942:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	4b67      	ldr	r3, [pc, #412]	; (800cae4 <SDMMC_GetCmdResp1+0x1d4>)
 800c948:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0f0      	beq.n	800c930 <SDMMC_GetCmdResp1+0x20>
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1eb      	bne.n	800c930 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b00      	cmp	r3, #0
 800c962:	d004      	beq.n	800c96e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2204      	movs	r2, #4
 800c968:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c96a:	2304      	movs	r3, #4
 800c96c:	e0b1      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d004      	beq.n	800c984 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c980:	2301      	movs	r3, #1
 800c982:	e0a6      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4a58      	ldr	r2, [pc, #352]	; (800cae8 <SDMMC_GetCmdResp1+0x1d8>)
 800c988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7ff fd74 	bl	800c478 <SDMMC_GetCommandResponse>
 800c990:	4603      	mov	r3, r0
 800c992:	461a      	mov	r2, r3
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	4293      	cmp	r3, r2
 800c998:	d001      	beq.n	800c99e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e099      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c99e:	2100      	movs	r1, #0
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff fd76 	bl	800c492 <SDMMC_GetResponse>
 800c9a6:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4b50      	ldr	r3, [pc, #320]	; (800caec <SDMMC_GetCmdResp1+0x1dc>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e08d      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da02      	bge.n	800c9c2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9c0:	e087      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	e080      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c9da:	2380      	movs	r3, #128	; 0x80
 800c9dc:	e079      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c9e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ec:	e071      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c9f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9fc:	e069      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0c:	e061      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca1c:	e059      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca2c:	e051      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca3c:	e049      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca4c:	e041      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ca58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca5c:	e039      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca6c:	e031      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca7c:	e029      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ca88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca8c:	e021      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ca98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ca9c:	e019      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800caa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800caac:	e011      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cab8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cabc:	e009      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f003 0308 	and.w	r3, r3, #8
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cac8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cacc:	e001      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}
 800cada:	bf00      	nop
 800cadc:	24000004 	.word	0x24000004
 800cae0:	10624dd3 	.word	0x10624dd3
 800cae4:	00200045 	.word	0x00200045
 800cae8:	002000c5 	.word	0x002000c5
 800caec:	fdffe008 	.word	0xfdffe008

0800caf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800caf0:	b490      	push	{r4, r7}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caf8:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <SDMMC_GetCmdResp2+0x84>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <SDMMC_GetCmdResp2+0x88>)
 800cafe:	fba2 2303 	umull	r2, r3, r2, r3
 800cb02:	0a5b      	lsrs	r3, r3, #9
 800cb04:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb08:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	1e5c      	subs	r4, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb18:	e026      	b.n	800cb68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0f0      	beq.n	800cb0c <SDMMC_GetCmdResp2+0x1c>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1eb      	bne.n	800cb0c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb38:	f003 0304 	and.w	r3, r3, #4
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2204      	movs	r2, #4
 800cb44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb46:	2304      	movs	r3, #4
 800cb48:	e00e      	b.n	800cb68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e003      	b.n	800cb68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a06      	ldr	r2, [pc, #24]	; (800cb7c <SDMMC_GetCmdResp2+0x8c>)
 800cb64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bc90      	pop	{r4, r7}
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	24000004 	.word	0x24000004
 800cb78:	10624dd3 	.word	0x10624dd3
 800cb7c:	002000c5 	.word	0x002000c5

0800cb80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cb80:	b490      	push	{r4, r7}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb88:	4b18      	ldr	r3, [pc, #96]	; (800cbec <SDMMC_GetCmdResp3+0x6c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a18      	ldr	r2, [pc, #96]	; (800cbf0 <SDMMC_GetCmdResp3+0x70>)
 800cb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb92:	0a5b      	lsrs	r3, r3, #9
 800cb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb98:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	1e5c      	subs	r4, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cba8:	e01b      	b.n	800cbe2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0f0      	beq.n	800cb9c <SDMMC_GetCmdResp3+0x1c>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1eb      	bne.n	800cb9c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc8:	f003 0304 	and.w	r3, r3, #4
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2204      	movs	r2, #4
 800cbd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbd6:	2304      	movs	r3, #4
 800cbd8:	e003      	b.n	800cbe2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a05      	ldr	r2, [pc, #20]	; (800cbf4 <SDMMC_GetCmdResp3+0x74>)
 800cbde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bc90      	pop	{r4, r7}
 800cbea:	4770      	bx	lr
 800cbec:	24000004 	.word	0x24000004
 800cbf0:	10624dd3 	.word	0x10624dd3
 800cbf4:	002000c5 	.word	0x002000c5

0800cbf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	460b      	mov	r3, r1
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc06:	4b34      	ldr	r3, [pc, #208]	; (800ccd8 <SDMMC_GetCmdResp6+0xe0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a34      	ldr	r2, [pc, #208]	; (800ccdc <SDMMC_GetCmdResp6+0xe4>)
 800cc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc10:	0a5b      	lsrs	r3, r3, #9
 800cc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc16:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cc1a:	4623      	mov	r3, r4
 800cc1c:	1e5c      	subs	r4, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d102      	bne.n	800cc28 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc26:	e052      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0f0      	beq.n	800cc1a <SDMMC_GetCmdResp6+0x22>
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1eb      	bne.n	800cc1a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2204      	movs	r2, #4
 800cc52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc54:	2304      	movs	r3, #4
 800cc56:	e03a      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5c:	f003 0301 	and.w	r3, r3, #1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d004      	beq.n	800cc6e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e02f      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff fc02 	bl	800c478 <SDMMC_GetCommandResponse>
 800cc74:	4603      	mov	r3, r0
 800cc76:	461a      	mov	r2, r3
 800cc78:	7afb      	ldrb	r3, [r7, #11]
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d001      	beq.n	800cc82 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e025      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4a16      	ldr	r2, [pc, #88]	; (800cce0 <SDMMC_GetCmdResp6+0xe8>)
 800cc86:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc88:	2100      	movs	r1, #0
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fc01 	bl	800c492 <SDMMC_GetResponse>
 800cc90:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d106      	bne.n	800ccaa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	0c1b      	lsrs	r3, r3, #16
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e011      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccb8:	e009      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccc8:	e001      	b.n	800ccce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ccca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd90      	pop	{r4, r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	24000004 	.word	0x24000004
 800ccdc:	10624dd3 	.word	0x10624dd3
 800cce0:	002000c5 	.word	0x002000c5

0800cce4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cce4:	b490      	push	{r4, r7}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccec:	4b21      	ldr	r3, [pc, #132]	; (800cd74 <SDMMC_GetCmdResp7+0x90>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a21      	ldr	r2, [pc, #132]	; (800cd78 <SDMMC_GetCmdResp7+0x94>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	0a5b      	lsrs	r3, r3, #9
 800ccf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccfc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cd00:	4623      	mov	r3, r4
 800cd02:	1e5c      	subs	r4, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d102      	bne.n	800cd0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd0c:	e02c      	b.n	800cd68 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0f0      	beq.n	800cd00 <SDMMC_GetCmdResp7+0x1c>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1eb      	bne.n	800cd00 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d004      	beq.n	800cd3e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2204      	movs	r2, #4
 800cd38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	e014      	b.n	800cd68 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e009      	b.n	800cd68 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2240      	movs	r2, #64	; 0x40
 800cd64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd66:	2300      	movs	r3, #0

}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bc90      	pop	{r4, r7}
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	24000004 	.word	0x24000004
 800cd78:	10624dd3 	.word	0x10624dd3

0800cd7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	f107 001c 	add.w	r0, r7, #28
 800cd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d120      	bne.n	800cdd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	4b25      	ldr	r3, [pc, #148]	; (800ce3c <USB_CoreInit+0xc0>)
 800cda6:	4013      	ands	r3, r2
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d105      	bne.n	800cdca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fa4c 	bl	800d268 <USB_CoreReset>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]
 800cdd4:	e01a      	b.n	800ce0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fa40 	bl	800d268 <USB_CoreReset>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	639a      	str	r2, [r3, #56]	; 0x38
 800cdfe:	e005      	b.n	800ce0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d10b      	bne.n	800ce2a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	f043 0206 	orr.w	r2, r3, #6
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	f043 0220 	orr.w	r2, r3, #32
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce36:	b004      	add	sp, #16
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	ffbdffbf 	.word	0xffbdffbf

0800ce40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f023 0201 	bic.w	r2, r3, #1
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d106      	bne.n	800ce8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	60da      	str	r2, [r3, #12]
 800ce8c:	e00b      	b.n	800cea6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	60da      	str	r2, [r3, #12]
 800cea0:	e001      	b.n	800cea6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e003      	b.n	800ceae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cea6:	2032      	movs	r0, #50	; 0x32
 800cea8:	f7f5 fa6a 	bl	8002380 <HAL_Delay>

  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
	...

0800ceb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ceb8:	b084      	sub	sp, #16
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b086      	sub	sp, #24
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]
 800ced6:	e009      	b.n	800ceec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	3340      	adds	r3, #64	; 0x40
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	2200      	movs	r2, #0
 800cee4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	3301      	adds	r3, #1
 800ceea:	613b      	str	r3, [r7, #16]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	2b0e      	cmp	r3, #14
 800cef0:	d9f2      	bls.n	800ced8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d11c      	bne.n	800cf32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf06:	f043 0302 	orr.w	r3, r3, #2
 800cf0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	e005      	b.n	800cf3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf44:	461a      	mov	r2, r3
 800cf46:	2300      	movs	r3, #0
 800cf48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf50:	4619      	mov	r1, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf58:	461a      	mov	r2, r3
 800cf5a:	680b      	ldr	r3, [r1, #0]
 800cf5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d10c      	bne.n	800cf7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d104      	bne.n	800cf74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f949 	bl	800d204 <USB_SetDevSpeed>
 800cf72:	e008      	b.n	800cf86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cf74:	2101      	movs	r1, #1
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f944 	bl	800d204 <USB_SetDevSpeed>
 800cf7c:	e003      	b.n	800cf86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cf7e:	2103      	movs	r1, #3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f93f 	bl	800d204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf86:	2110      	movs	r1, #16
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f8f3 	bl	800d174 <USB_FlushTxFifo>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f911 	bl	800d1c0 <USB_FlushRxFifo>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfae:	461a      	mov	r2, r3
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfba:	461a      	mov	r2, r3
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	2300      	movs	r3, #0
 800cfca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfcc:	2300      	movs	r3, #0
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	e043      	b.n	800d05a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfe8:	d118      	bne.n	800d01c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	015a      	lsls	r2, r3, #5
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	4413      	add	r3, r2
 800cff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffc:	461a      	mov	r2, r3
 800cffe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d002:	6013      	str	r3, [r2, #0]
 800d004:	e013      	b.n	800d02e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	015a      	lsls	r2, r3, #5
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	4413      	add	r3, r2
 800d00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d012:	461a      	mov	r2, r3
 800d014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	e008      	b.n	800d02e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d028:	461a      	mov	r2, r3
 800d02a:	2300      	movs	r3, #0
 800d02c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	015a      	lsls	r2, r3, #5
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	4413      	add	r3, r2
 800d036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d03a:	461a      	mov	r2, r3
 800d03c:	2300      	movs	r3, #0
 800d03e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	461a      	mov	r2, r3
 800d04e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d052:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	3301      	adds	r3, #1
 800d058:	613b      	str	r3, [r7, #16]
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d3b7      	bcc.n	800cfd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d062:	2300      	movs	r3, #0
 800d064:	613b      	str	r3, [r7, #16]
 800d066:	e043      	b.n	800d0f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d07a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d07e:	d118      	bne.n	800d0b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10a      	bne.n	800d09c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d092:	461a      	mov	r2, r3
 800d094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	e013      	b.n	800d0c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	e008      	b.n	800d0c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0be:	461a      	mov	r2, r3
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	015a      	lsls	r2, r3, #5
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	4413      	add	r3, r2
 800d0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d0e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	613b      	str	r3, [r7, #16]
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d3b7      	bcc.n	800d068 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d10a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d118:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d105      	bne.n	800d12c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	f043 0210 	orr.w	r2, r3, #16
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	699a      	ldr	r2, [r3, #24]
 800d130:	4b0e      	ldr	r3, [pc, #56]	; (800d16c <USB_DevInit+0x2b4>)
 800d132:	4313      	orrs	r3, r2
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d005      	beq.n	800d14a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	f043 0208 	orr.w	r2, r3, #8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d105      	bne.n	800d15c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	699a      	ldr	r2, [r3, #24]
 800d154:	4b06      	ldr	r3, [pc, #24]	; (800d170 <USB_DevInit+0x2b8>)
 800d156:	4313      	orrs	r3, r2
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d168:	b004      	add	sp, #16
 800d16a:	4770      	bx	lr
 800d16c:	803c3800 	.word	0x803c3800
 800d170:	40000004 	.word	0x40000004

0800d174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	019b      	lsls	r3, r3, #6
 800d186:	f043 0220 	orr.w	r2, r3, #32
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3301      	adds	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <USB_FlushTxFifo+0x48>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d901      	bls.n	800d1a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e006      	b.n	800d1ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	d0f0      	beq.n	800d18e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	00030d40 	.word	0x00030d40

0800d1c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2210      	movs	r2, #16
 800d1d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4a09      	ldr	r2, [pc, #36]	; (800d200 <USB_FlushRxFifo+0x40>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d901      	bls.n	800d1e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	e006      	b.n	800d1f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	f003 0310 	and.w	r3, r3, #16
 800d1ec:	2b10      	cmp	r3, #16
 800d1ee:	d0f0      	beq.n	800d1d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	00030d40 	.word	0x00030d40

0800d204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	68f9      	ldr	r1, [r7, #12]
 800d220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d224:	4313      	orrs	r3, r2
 800d226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d250:	f043 0302 	orr.w	r3, r3, #2
 800d254:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d256:	2003      	movs	r0, #3
 800d258:	f7f5 f892 	bl	8002380 <HAL_Delay>

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	3301      	adds	r3, #1
 800d278:	60fb      	str	r3, [r7, #12]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4a13      	ldr	r2, [pc, #76]	; (800d2cc <USB_CoreReset+0x64>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d901      	bls.n	800d286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	e01b      	b.n	800d2be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	daf2      	bge.n	800d274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d28e:	2300      	movs	r3, #0
 800d290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	f043 0201 	orr.w	r2, r3, #1
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <USB_CoreReset+0x64>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d901      	bls.n	800d2b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e006      	b.n	800d2be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d0f0      	beq.n	800d29e <USB_CoreReset+0x36>

  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	00030d40 	.word	0x00030d40

0800d2d0 <__libc_init_array>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	4e0d      	ldr	r6, [pc, #52]	; (800d308 <__libc_init_array+0x38>)
 800d2d4:	4c0d      	ldr	r4, [pc, #52]	; (800d30c <__libc_init_array+0x3c>)
 800d2d6:	1ba4      	subs	r4, r4, r6
 800d2d8:	10a4      	asrs	r4, r4, #2
 800d2da:	2500      	movs	r5, #0
 800d2dc:	42a5      	cmp	r5, r4
 800d2de:	d109      	bne.n	800d2f4 <__libc_init_array+0x24>
 800d2e0:	4e0b      	ldr	r6, [pc, #44]	; (800d310 <__libc_init_array+0x40>)
 800d2e2:	4c0c      	ldr	r4, [pc, #48]	; (800d314 <__libc_init_array+0x44>)
 800d2e4:	f000 f820 	bl	800d328 <_init>
 800d2e8:	1ba4      	subs	r4, r4, r6
 800d2ea:	10a4      	asrs	r4, r4, #2
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	42a5      	cmp	r5, r4
 800d2f0:	d105      	bne.n	800d2fe <__libc_init_array+0x2e>
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2f8:	4798      	blx	r3
 800d2fa:	3501      	adds	r5, #1
 800d2fc:	e7ee      	b.n	800d2dc <__libc_init_array+0xc>
 800d2fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d302:	4798      	blx	r3
 800d304:	3501      	adds	r5, #1
 800d306:	e7f2      	b.n	800d2ee <__libc_init_array+0x1e>
 800d308:	0800d368 	.word	0x0800d368
 800d30c:	0800d368 	.word	0x0800d368
 800d310:	0800d368 	.word	0x0800d368
 800d314:	0800d36c 	.word	0x0800d36c

0800d318 <memset>:
 800d318:	4402      	add	r2, r0
 800d31a:	4603      	mov	r3, r0
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d100      	bne.n	800d322 <memset+0xa>
 800d320:	4770      	bx	lr
 800d322:	f803 1b01 	strb.w	r1, [r3], #1
 800d326:	e7f9      	b.n	800d31c <memset+0x4>

0800d328 <_init>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr

0800d334 <_fini>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	bf00      	nop
 800d338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33a:	bc08      	pop	{r3}
 800d33c:	469e      	mov	lr, r3
 800d33e:	4770      	bx	lr
