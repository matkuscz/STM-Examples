
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd7c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d034  0800d034  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d03c  0800d03c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800d044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800d054  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800d0b4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00062868  240000d0  0800d114  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24062938  0800d114  00022938  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a287  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000050bd  00000000  00000000  0005a385  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002318  00000000  00000000  0005f448  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002148  00000000  00000000  00061760  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e716  00000000  00000000  000638a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00020363  00000000  00000000  000a1fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00187737  00000000  00000000  000c2321  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00249a58  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009a5c  00000000  00000000  00249ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cffc 	.word	0x0800cffc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800cffc 	.word	0x0800cffc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fe01 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f82f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fddd 	bl	80011a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ea:	f000 f959 	bl	80008a0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005ee:	f000 f9cf 	bl	8000990 <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005f2:	f000 fa05 	bl	8000a00 <MX_ETH_Init>
  MX_FMC_Init();
 80005f6:	f000 fcd9 	bl	8000fac <MX_FMC_Init>
  MX_I2C1_Init();
 80005fa:	f000 fa53 	bl	8000aa4 <MX_I2C1_Init>
  MX_QUADSPI_Init();
 80005fe:	f000 fb1b 	bl	8000c38 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000602:	f000 fb41 	bl	8000c88 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000606:	f000 fbfd 	bl	8000e04 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fc1f 	bl	8000e4c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 fc69 	bl	8000ee4 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000612:	f000 fc99 	bl	8000f48 <MX_USB_OTG_HS_PCD_Init>
  MX_LTDC_Init();
 8000616:	f000 fa85 	bl	8000b24 <MX_LTDC_Init>





  int popo = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  // stejny




  int xu = 3;
 800061e:	2303      	movs	r3, #3
 8000620:	613b      	str	r3, [r7, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int a,b,c;
	  a = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
	  b = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	60bb      	str	r3, [r7, #8]
	  c = a + b;
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4413      	add	r3, r2
 8000630:	607b      	str	r3, [r7, #4]

	  unsigned int adr = &pokus;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <main+0x68>)
 8000634:	603b      	str	r3, [r7, #0]


	  b++;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
  {
 800063c:	e7f1      	b.n	8000622 <main+0x4a>
 800063e:	bf00      	nop
 8000640:	24000a34 	.word	0x24000a34

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0cc      	sub	sp, #304	; 0x130
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800064e:	224c      	movs	r2, #76	; 0x4c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00c fcca 	bl	800cfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00c fcc3 	bl	800cfec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4618      	mov	r0, r3
 800066c:	23bc      	movs	r3, #188	; 0xbc
 800066e:	461a      	mov	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f00c fcbb 	bl	800cfec <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000676:	2002      	movs	r0, #2
 8000678:	f004 fc1e 	bl	8004eb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4b83      	ldr	r3, [pc, #524]	; (8000890 <SystemClock_Config+0x24c>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	4a82      	ldr	r2, [pc, #520]	; (8000890 <SystemClock_Config+0x24c>)
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800068e:	4b80      	ldr	r3, [pc, #512]	; (8000890 <SystemClock_Config+0x24c>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	f003 0201 	and.w	r2, r3, #1
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4b7e      	ldr	r3, [pc, #504]	; (8000894 <SystemClock_Config+0x250>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a2:	4a7c      	ldr	r2, [pc, #496]	; (8000894 <SystemClock_Config+0x250>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b7a      	ldr	r3, [pc, #488]	; (8000894 <SystemClock_Config+0x250>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b75      	ldr	r3, [pc, #468]	; (8000894 <SystemClock_Config+0x250>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c8:	d1f8      	bne.n	80006bc <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006ca:	4b73      	ldr	r3, [pc, #460]	; (8000898 <SystemClock_Config+0x254>)
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	4a72      	ldr	r2, [pc, #456]	; (8000898 <SystemClock_Config+0x254>)
 80006d0:	f023 0303 	bic.w	r3, r3, #3
 80006d4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006d6:	2322      	movs	r3, #34	; 0x22
 80006d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006dc:	2301      	movs	r3, #1
 80006de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e2:	2320      	movs	r3, #32
 80006e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000700:	230a      	movs	r3, #10
 8000702:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000718:	230c      	movs	r3, #12
 800071a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fcd8 	bl	80050e4 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800073a:	f000 fe5f 	bl	80013fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	233f      	movs	r3, #63	; 0x3f
 8000740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000762:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000770:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f005 f86c 	bl	8005854 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000782:	f000 fe3b 	bl	80013fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <SystemClock_Config+0x258>)
 800078c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2204      	movs	r2, #4
 8000794:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	220a      	movs	r2, #10
 800079c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2201      	movs	r2, #1
 80007a4:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2202      	movs	r2, #2
 80007ac:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2202      	movs	r2, #2
 80007b4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	22c0      	movs	r2, #192	; 0xc0
 80007bc:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2220      	movs	r2, #32
 80007c4:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2220      	movs	r2, #32
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2281      	movs	r2, #129	; 0x81
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2202      	movs	r2, #2
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2202      	movs	r2, #2
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2202      	movs	r2, #2
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4618      	mov	r0, r3
 8000866:	f005 fbbd 	bl	8005fe4 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x230>
  {
    Error_Handler();
 8000870:	f000 fdc4 	bl	80013fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000874:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f005 f98e 	bl	8005b9c <HAL_RCC_MCOConfig>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000880:	f004 fb52 	bl	8004f28 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000884:	bf00      	nop
 8000886:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	58000400 	.word	0x58000400
 8000894:	58024800 	.word	0x58024800
 8000898:	58024400 	.word	0x58024400
 800089c:	232d0109 	.word	0x232d0109

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]
 80008c2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <MX_ADC1_Init+0xe4>)
 80008c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008d0:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008de:	2204      	movs	r2, #4
 80008e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_ADC1_Init+0xe0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_ADC1_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_ADC1_Init+0xe0>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_ADC1_Init+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_ADC1_Init+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_ADC1_Init+0xe0>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <MX_ADC1_Init+0xe0>)
 8000922:	f001 fec5 	bl	80026b0 <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800092c:	f000 fd66 	bl	80013fc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_ADC1_Init+0xe0>)
 800093c:	f002 fc92 	bl	8003264 <HAL_ADCEx_MultiModeConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000946:	f000 fd59 	bl	80013fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0xe8>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2306      	movs	r3, #6
 8000950:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_ADC1_Init+0xec>)
 8000958:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800095a:	2304      	movs	r3, #4
 800095c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_ADC1_Init+0xe0>)
 8000968:	f002 f842 	bl	80029f0 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000972:	f000 fd43 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240625f4 	.word	0x240625f4
 8000984:	40022000 	.word	0x40022000
 8000988:	04300002 	.word	0x04300002
 800098c:	47ff0000 	.word	0x47ff0000

08000990 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <MX_DFSDM1_Init+0x6c>)
 8000998:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 800099c:	2201      	movs	r2, #1
 800099e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009e4:	f002 fdfc 	bl	80035e0 <HAL_DFSDM_ChannelInit>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80009ee:	f000 fd05 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000120 	.word	0x24000120
 80009fc:	40017020 	.word	0x40017020

08000a00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_ETH_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	3302      	adds	r3, #2
 8000a22:	22e1      	movs	r2, #225	; 0xe1
 8000a24:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	3305      	adds	r3, #5
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_ETH_Init+0x98>)
 8000a4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_ETH_Init+0x9c>)
 8000a54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a60:	f002 fed4 	bl	800380c <HAL_ETH_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fcc7 	bl	80013fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_ETH_Init+0xa0>)
 8000a74:	f00c faba 	bl	800cfec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_ETH_Init+0xa0>)
 8000a7a:	2221      	movs	r2, #33	; 0x21
 8000a7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_ETH_Init+0xa0>)
 8000a80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_ETH_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	24062844 	.word	0x24062844
 8000a94:	40028000 	.word	0x40028000
 8000a98:	24000070 	.word	0x24000070
 8000a9c:	24000010 	.word	0x24000010
 8000aa0:	240628b4 	.word	0x240628b4

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ae0:	f003 fc74 	bl	80043cc <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fc87 	bl	80013fc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000af2:	f003 fcfb 	bl	80044ec <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fc7e 	bl	80013fc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000b04:	f003 fd3d 	bl	8004582 <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fc75 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000560 	.word	0x24000560
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	10909cec 	.word	0x10909cec

08000b24 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2234      	movs	r2, #52	; 0x34
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00c fa5b 	bl	800cfec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b38:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <MX_LTDC_Init+0x110>)
 8000b3a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b54:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b62:	220e      	movs	r2, #14
 8000b64:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b68:	2205      	movs	r2, #5
 8000b6a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b6e:	f240 228e 	movw	r2, #654	; 0x28e
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b76:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b7e:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b86:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ba4:	4822      	ldr	r0, [pc, #136]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000ba6:	f003 fd39 	bl	800461c <HAL_LTDC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bb0:	f000 fc24 	bl	80013fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 640;
 8000bb8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000bbc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000bc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000bf0:	23ff      	movs	r3, #255	; 0xff
 8000bf2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000c04:	f003 fdda 	bl	80047bc <HAL_LTDC_ConfigLayer>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000c0e:	f000 fbf5 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  //pLayerCfg.FBStartAdress = (uint32_t)&image_data_Image;
  //pLayerCfg.Alpha = 255; // Solid color
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_LTDC_Init+0x10c>)
 8000c1a:	f003 fdcf 	bl	80047bc <HAL_LTDC_ConfigLayer>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_LTDC_Init+0x104>
  {
	  Error_Handler();
 8000c24:	f000 fbea 	bl	80013fc <Error_Handler>



  /* USER CODE END LTDC_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	240624b4 	.word	0x240624b4
 8000c34:	50001000 	.word	0x50001000

08000c38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <MX_QUADSPI_Init+0x4c>)
 8000c40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_QUADSPI_Init+0x48>)
 8000c6e:	f004 f96b 	bl	8004f48 <HAL_QSPI_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000c78:	f000 fbc0 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240628e8 	.word	0x240628e8
 8000c84:	52005000 	.word	0x52005000

08000c88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c8c:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000c8e:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <MX_SAI1_Init+0x16c>)
 8000c90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c98:	4b55      	ldr	r3, [pc, #340]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000ca0:	2240      	movs	r2, #64	; 0x40
 8000ca2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ca4:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000caa:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cb6:	4b4e      	ldr	r3, [pc, #312]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cbc:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cc8:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cca:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <MX_SAI1_Init+0x170>)
 8000ccc:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cd4:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cda:	4b45      	ldr	r3, [pc, #276]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000ce6:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d32:	482f      	ldr	r0, [pc, #188]	; (8000df0 <MX_SAI1_Init+0x168>)
 8000d34:	f006 fff6 	bl	8007d24 <HAL_SAI_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000d3e:	f000 fb5d 	bl	80013fc <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <MX_SAI1_Init+0x178>)
 8000d46:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_SAI1_Init+0x174>)
 8000dde:	f006 ffa1 	bl	8007d24 <HAL_SAI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000de8:	f000 fb08 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24062778 	.word	0x24062778
 8000df4:	40015804 	.word	0x40015804
 8000df8:	0002ee00 	.word	0x0002ee00
 8000dfc:	2406255c 	.word	0x2406255c
 8000e00:	40015824 	.word	0x40015824

08000e04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <MX_SDMMC1_SD_Init+0x44>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e20:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_SDMMC1_SD_Init+0x40>)
 8000e30:	f007 fa22 	bl	8008278 <HAL_SD_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e3a:	f000 fadf 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	240009b4 	.word	0x240009b4
 8000e48:	52007000 	.word	0x52007000

08000e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e52:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000e96:	f008 faaf 	bl	80093f8 <HAL_UART_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f000 faac 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000ea8:	f00a fe17 	bl	800bada <HAL_UARTEx_SetTxFifoThreshold>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eb2:	f000 faa3 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000eba:	f00a fe4c 	bl	800bb56 <HAL_UARTEx_SetRxFifoThreshold>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec4:	f000 fa9a 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_USART1_UART_Init+0x90>)
 8000eca:	f00a fdcd 	bl	800ba68 <HAL_UARTEx_DisableFifoMode>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 fa92 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	24062658 	.word	0x24062658
 8000ee0:	40011000 	.word	0x40011000

08000ee4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000eec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef0:	2209      	movs	r2, #9
 8000ef2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2c:	f003 fe7c 	bl	8004c28 <HAL_PCD_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f36:	f000 fa61 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240005ac 	.word	0x240005ac
 8000f44:	40080000 	.word	0x40080000

08000f48 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f54:	2209      	movs	r2, #9
 8000f56:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f90:	f003 fe4a 	bl	8004c28 <HAL_PCD_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f9a:	f000 fa2f 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000158 	.word	0x24000158
 8000fa8:	40040000 	.word	0x40040000

08000fac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <MX_FMC_Init+0x1e0>)
 8000fda:	4a6d      	ldr	r2, [pc, #436]	; (8001190 <MX_FMC_Init+0x1e4>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fde:	4b6b      	ldr	r3, [pc, #428]	; (800118c <MX_FMC_Init+0x1e0>)
 8000fe0:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <MX_FMC_Init+0x1e8>)
 8000fe2:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000fe4:	4b69      	ldr	r3, [pc, #420]	; (800118c <MX_FMC_Init+0x1e0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <MX_FMC_Init+0x1e0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <MX_FMC_Init+0x1e0>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ff6:	4b65      	ldr	r3, [pc, #404]	; (800118c <MX_FMC_Init+0x1e0>)
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ffc:	4b63      	ldr	r3, [pc, #396]	; (800118c <MX_FMC_Init+0x1e0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <MX_FMC_Init+0x1e0>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001008:	4b60      	ldr	r3, [pc, #384]	; (800118c <MX_FMC_Init+0x1e0>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <MX_FMC_Init+0x1e0>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001014:	4b5d      	ldr	r3, [pc, #372]	; (800118c <MX_FMC_Init+0x1e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800101a:	4b5c      	ldr	r3, [pc, #368]	; (800118c <MX_FMC_Init+0x1e0>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8001020:	4b5a      	ldr	r3, [pc, #360]	; (800118c <MX_FMC_Init+0x1e0>)
 8001022:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <MX_FMC_Init+0x1e0>)
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800102e:	4b57      	ldr	r3, [pc, #348]	; (800118c <MX_FMC_Init+0x1e0>)
 8001030:	2200      	movs	r2, #0
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001034:	4b55      	ldr	r3, [pc, #340]	; (800118c <MX_FMC_Init+0x1e0>)
 8001036:	2200      	movs	r2, #0
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <MX_FMC_Init+0x1e0>)
 800103c:	2200      	movs	r2, #0
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001040:	230f      	movs	r3, #15
 8001042:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001044:	230f      	movs	r3, #15
 8001046:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001050:	2310      	movs	r3, #16
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001054:	2311      	movs	r3, #17
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4849      	ldr	r0, [pc, #292]	; (800118c <MX_FMC_Init+0x1e0>)
 8001066:	f003 fd81 	bl	8004b6c <HAL_NOR_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8001070:	f000 f9c4 	bl	80013fc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001074:	4b48      	ldr	r3, [pc, #288]	; (8001198 <MX_FMC_Init+0x1ec>)
 8001076:	4a46      	ldr	r2, [pc, #280]	; (8001190 <MX_FMC_Init+0x1e4>)
 8001078:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <MX_FMC_Init+0x1ec>)
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <MX_FMC_Init+0x1e8>)
 800107e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <MX_FMC_Init+0x1ec>)
 8001082:	2204      	movs	r2, #4
 8001084:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <MX_FMC_Init+0x1ec>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <MX_FMC_Init+0x1ec>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <MX_FMC_Init+0x1ec>)
 8001094:	2210      	movs	r2, #16
 8001096:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <MX_FMC_Init+0x1ec>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <MX_FMC_Init+0x1ec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010dc:	230f      	movs	r3, #15
 80010de:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010e0:	230f      	movs	r3, #15
 80010e2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80010e4:	23ff      	movs	r3, #255	; 0xff
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80010e8:	230f      	movs	r3, #15
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010ec:	2310      	movs	r3, #16
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010f0:	2311      	movs	r3, #17
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <MX_FMC_Init+0x1ec>)
 8001102:	f008 f929 	bl	8009358 <HAL_SRAM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 800110c:	f000 f976 	bl	80013fc <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_FMC_Init+0x1f0>)
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <MX_FMC_Init+0x1f4>)
 8001114:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_FMC_Init+0x1f0>)
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_FMC_Init+0x1f0>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_FMC_Init+0x1f0>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_FMC_Init+0x1f0>)
 800112a:	2220      	movs	r2, #32
 800112c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_FMC_Init+0x1f0>)
 8001130:	2240      	movs	r2, #64	; 0x40
 8001132:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_FMC_Init+0x1f0>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_FMC_Init+0x1f0>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_FMC_Init+0x1f0>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_FMC_Init+0x1f0>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_FMC_Init+0x1f0>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001152:	2310      	movs	r3, #16
 8001154:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001156:	2310      	movs	r3, #16
 8001158:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800115a:	2310      	movs	r3, #16
 800115c:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800115e:	2310      	movs	r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001162:	2310      	movs	r3, #16
 8001164:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001166:	2310      	movs	r3, #16
 8001168:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800116a:	2310      	movs	r3, #16
 800116c:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_FMC_Init+0x1f0>)
 8001174:	f008 f8b4 	bl	80092e0 <HAL_SDRAM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 800117e:	f000 f93d 	bl	80013fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240626e4 	.word	0x240626e4
 8001190:	52004000 	.word	0x52004000
 8001194:	52004104 	.word	0x52004104
 8001198:	2406272c 	.word	0x2406272c
 800119c:	24062810 	.word	0x24062810
 80011a0:	52004140 	.word	0x52004140

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ba:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a87      	ldr	r2, [pc, #540]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e8:	4b7d      	ldr	r3, [pc, #500]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011f6:	4b7a      	ldr	r3, [pc, #488]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a78      	ldr	r2, [pc, #480]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	623b      	str	r3, [r7, #32]
 8001212:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001214:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a71      	ldr	r2, [pc, #452]	; (80013e0 <MX_GPIO_Init+0x23c>)
 800121c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <MX_GPIO_Init+0x23c>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a5a      	ldr	r2, [pc, #360]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800128c:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <MX_GPIO_Init+0x23c>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <MX_GPIO_Init+0x23c>)
 8001294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <MX_GPIO_Init+0x23c>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a44      	ldr	r2, [pc, #272]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <MX_GPIO_Init+0x23c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2108      	movs	r1, #8
 8001308:	4836      	ldr	r0, [pc, #216]	; (80013e4 <MX_GPIO_Init+0x240>)
 800130a:	f003 f845 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001314:	4834      	ldr	r0, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x244>)
 8001316:	f003 f83f 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LED3_RGB_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2150      	movs	r1, #80	; 0x50
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_GPIO_Init+0x248>)
 8001320:	f003 f83a 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 8001324:	2308      	movs	r3, #8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001338:	4619      	mov	r1, r3
 800133a:	482a      	ldr	r0, [pc, #168]	; (80013e4 <MX_GPIO_Init+0x240>)
 800133c:	f002 fe7c 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001350:	230a      	movs	r3, #10
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	4825      	ldr	r0, [pc, #148]	; (80013f0 <MX_GPIO_Init+0x24c>)
 800135c:	f002 fe6c 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8001360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_GPIO_Init+0x250>)
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001372:	4619      	mov	r1, r3
 8001374:	4820      	ldr	r0, [pc, #128]	; (80013f8 <MX_GPIO_Init+0x254>)
 8001376:	f002 fe5f 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_GPIO_Init+0x248>)
 8001398:	f002 fe4e 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_GPIO_Init+0x244>)
 80013b6:	f002 fe3f 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 80013ba:	2350      	movs	r3, #80	; 0x50
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_GPIO_Init+0x248>)
 80013d2:	f002 fe31 	bl	8004038 <HAL_GPIO_Init>

}
 80013d6:	bf00      	nop
 80013d8:	3740      	adds	r7, #64	; 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58020000 	.word	0x58020000
 80013f0:	58021000 	.word	0x58021000
 80013f4:	11110000 	.word	0x11110000
 80013f8:	58022000 	.word	0x58022000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_MspInit+0x30>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x30>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x30>)
 8001424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	58024400 	.word	0x58024400

08001440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <HAL_ADC_MspInit+0x70>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d129      	bne.n	80014a6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 8001454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800148e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001492:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001496:	f000 ff75 	bl	8002384 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800149a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800149e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80014a2:	f000 ff6f 	bl	8002384 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000
 80014b4:	58024400 	.word	0x58024400

080014b8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_DFSDM_ChannelMspInit+0xa4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13d      	bne.n	8001554 <HAL_DFSDM_ChannelMspInit+0x9c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014de:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	4a18      	ldr	r2, [pc, #96]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001514:	2304      	movs	r3, #4
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001524:	2306      	movs	r3, #6
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <HAL_DFSDM_ChannelMspInit+0xac>)
 8001530:	f002 fd82 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001534:	2308      	movs	r3, #8
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001544:	2303      	movs	r3, #3
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_DFSDM_ChannelMspInit+0xac>)
 8001550:	f002 fd72 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	240000ec 	.word	0x240000ec
 8001560:	58024400 	.word	0x58024400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_ETH_MspInit+0x144>)
 8001586:	4293      	cmp	r3, r2
 8001588:	f040 808b 	bne.w	80016a2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800158c:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 800158e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 8001594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001598:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800159c:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 800159e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a6:	623b      	str	r3, [r7, #32]
 80015a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015c8:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ce:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_ETH_MspInit+0x148>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1 
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8001640:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001652:	230b      	movs	r3, #11
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4815      	ldr	r0, [pc, #84]	; (80016b4 <HAL_ETH_MspInit+0x14c>)
 800165e:	f002 fceb 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001662:	2332      	movs	r3, #50	; 0x32
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001672:	230b      	movs	r3, #11
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <HAL_ETH_MspInit+0x150>)
 800167e:	f002 fcdb 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001682:	2386      	movs	r3, #134	; 0x86
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001692:	230b      	movs	r3, #11
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <HAL_ETH_MspInit+0x154>)
 800169e:	f002 fccb 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3738      	adds	r7, #56	; 0x38
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40028000 	.word	0x40028000
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_I2C_MspInit+0x88>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12d      	bne.n	800173e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001700:	23c0      	movs	r3, #192	; 0xc0
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	2312      	movs	r3, #18
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001710:	2304      	movs	r3, #4
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <HAL_I2C_MspInit+0x90>)
 800171c:	f002 fc8c 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_I2C_MspInit+0x8c>)
 8001722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x8c>)
 8001728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x8c>)
 8001732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	58024400 	.word	0x58024400
 8001750:	58020400 	.word	0x58020400

08001754 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_LTDC_MspInit+0x108>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d16d      	bne.n	8001852 <HAL_LTDC_MspInit+0xfe>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 8001778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 8001788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a4:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_LTDC_MspInit+0x10c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5 
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin 
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fe:	230e      	movs	r3, #14
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4816      	ldr	r0, [pc, #88]	; (8001864 <HAL_LTDC_MspInit+0x110>)
 800180a:	f002 fc15 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin 
 800180e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001812:	61fb      	str	r3, [r7, #28]
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin 
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin 
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001820:	230e      	movs	r3, #14
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <HAL_LTDC_MspInit+0x114>)
 800182c:	f002 fc04 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001830:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001842:	230e      	movs	r3, #14
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <HAL_LTDC_MspInit+0x118>)
 800184e:	f002 fbf3 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	50001000 	.word	0x50001000
 8001860:	58024400 	.word	0x58024400
 8001864:	58022800 	.word	0x58022800
 8001868:	58022400 	.word	0x58022400
 800186c:	58022000 	.word	0x58022000

08001870 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_QSPI_MspInit+0x188>)
 800188e:	4293      	cmp	r3, r2
 8001890:	f040 80ad 	bne.w	80019ee <HAL_QSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 8001896:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d0:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018d8:	f043 0320 	orr.w	r3, r3, #32
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a41      	ldr	r2, [pc, #260]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 80018f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_QSPI_MspInit+0x18c>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK 
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 800192a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800193c:	2309      	movs	r3, #9
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	482e      	ldr	r0, [pc, #184]	; (8001a00 <HAL_QSPI_MspInit+0x190>)
 8001948:	f002 fb76 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800195c:	230a      	movs	r3, #10
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <HAL_QSPI_MspInit+0x190>)
 8001968:	f002 fb66 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 800196c:	23c0      	movs	r3, #192	; 0xc0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800197c:	2309      	movs	r3, #9
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	481f      	ldr	r0, [pc, #124]	; (8001a04 <HAL_QSPI_MspInit+0x194>)
 8001988:	f002 fb56 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800198c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800199e:	230a      	movs	r3, #10
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <HAL_QSPI_MspInit+0x194>)
 80019aa:	f002 fb45 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 80019ae:	230c      	movs	r3, #12
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019be:	2309      	movs	r3, #9
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	480f      	ldr	r0, [pc, #60]	; (8001a08 <HAL_QSPI_MspInit+0x198>)
 80019ca:	f002 fb35 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80019ce:	2304      	movs	r3, #4
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019de:	2309      	movs	r3, #9
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <HAL_QSPI_MspInit+0x19c>)
 80019ea:	f002 fb25 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	52005000 	.word	0x52005000
 80019fc:	58024400 	.word	0x58024400
 8001a00:	58021800 	.word	0x58021800
 8001a04:	58021400 	.word	0x58021400
 8001a08:	58021c00 	.word	0x58021c00
 8001a0c:	58020400 	.word	0x58020400

08001a10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_SD_MspInit+0x128>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d17d      	bne.n	8001b2e <HAL_SD_MspInit+0x11e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a38:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4a39      	ldr	r2, [pc, #228]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_SD_MspInit+0x12c>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR 
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin 
 8001aaa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001aae:	61fb      	str	r3, [r7, #28]
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001abc:	230c      	movs	r3, #12
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481e      	ldr	r0, [pc, #120]	; (8001b40 <HAL_SD_MspInit+0x130>)
 8001ac8:	f002 fab6 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001acc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4816      	ldr	r0, [pc, #88]	; (8001b44 <HAL_SD_MspInit+0x134>)
 8001aea:	f002 faa5 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001aee:	2304      	movs	r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001afe:	230c      	movs	r3, #12
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	480f      	ldr	r0, [pc, #60]	; (8001b48 <HAL_SD_MspInit+0x138>)
 8001b0a:	f002 fa95 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_SD_MspInit+0x130>)
 8001b2a:	f002 fa85 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	52007000 	.word	0x52007000
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020800 	.word	0x58020800
 8001b44:	58020400 	.word	0x58020400
 8001b48:	58020c00 	.word	0x58020c00

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_UART_MspInit+0x88>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12e      	bne.n	8001bcc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001baa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001bc8:	f002 fa36 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020400 	.word	0x58020400

08001be0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7b      	ldr	r2, [pc, #492]	; (8001dec <HAL_PCD_MspInit+0x20c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12f      	bne.n	8001c62 <HAL_PCD_MspInit+0x82>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a79      	ldr	r2, [pc, #484]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b77      	ldr	r3, [pc, #476]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM 
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c32:	230a      	movs	r3, #10
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	486d      	ldr	r0, [pc, #436]	; (8001df4 <HAL_PCD_MspInit+0x214>)
 8001c3e:	f002 f9fb 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c42:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c48:	4a69      	ldr	r2, [pc, #420]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c52:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001c60:	e0c0      	b.n	8001de4 <HAL_PCD_MspInit+0x204>
  else if(hpcd->Instance==USB_OTG_HS)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a64      	ldr	r2, [pc, #400]	; (8001df8 <HAL_PCD_MspInit+0x218>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	f040 80bb 	bne.w	8001de4 <HAL_PCD_MspInit+0x204>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c8c:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin 
 8001d04:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2302      	movs	r3, #2
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d16:	230a      	movs	r3, #10
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4836      	ldr	r0, [pc, #216]	; (8001dfc <HAL_PCD_MspInit+0x21c>)
 8001d22:	f002 f989 	bl	8004038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d34:	2302      	movs	r3, #2
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d38:	230a      	movs	r3, #10
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	4619      	mov	r1, r3
 8001d42:	482f      	ldr	r0, [pc, #188]	; (8001e00 <HAL_PCD_MspInit+0x220>)
 8001d44:	f002 f978 	bl	8004038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2302      	movs	r3, #2
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d58:	230a      	movs	r3, #10
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	4828      	ldr	r0, [pc, #160]	; (8001e04 <HAL_PCD_MspInit+0x224>)
 8001d64:	f002 f968 	bl	8004038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d74:	2302      	movs	r3, #2
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d80:	4619      	mov	r1, r3
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <HAL_PCD_MspInit+0x228>)
 8001d84:	f002 f958 	bl	8004038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001d88:	2328      	movs	r3, #40	; 0x28
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d94:	2302      	movs	r3, #2
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <HAL_PCD_MspInit+0x214>)
 8001da4:	f002 f948 	bl	8004038 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dcc:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001dce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_PCD_MspInit+0x210>)
 8001dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
}
 8001de4:	bf00      	nop
 8001de6:	3740      	adds	r7, #64	; 0x40
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40080000 	.word	0x40080000
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58020000 	.word	0x58020000
 8001df8:	40040000 	.word	0x40040000
 8001dfc:	58020400 	.word	0x58020400
 8001e00:	58022000 	.word	0x58022000
 8001e04:	58020800 	.word	0x58020800
 8001e08:	58021c00 	.word	0x58021c00

08001e0c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e20:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_FMC_MspInit+0x10c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d172      	bne.n	8001f0e <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <HAL_FMC_MspInit+0x10c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_FMC_MspInit+0x110>)
 8001e30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e34:	4a39      	ldr	r2, [pc, #228]	; (8001f1c <HAL_FMC_MspInit+0x110>)
 8001e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_FMC_MspInit+0x110>)
 8001e40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin 
 8001e4c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001e50:	607b      	str	r3, [r7, #4]
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin 
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e5e:	230c      	movs	r3, #12
 8001e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	482e      	ldr	r0, [pc, #184]	; (8001f20 <HAL_FMC_MspInit+0x114>)
 8001e68:	f002 f8e6 	bl	8004038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5 
 8001e6c:	f248 533f 	movw	r3, #34111	; 0x853f
 8001e70:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin 
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e7e:	230c      	movs	r3, #12
 8001e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4827      	ldr	r0, [pc, #156]	; (8001f24 <HAL_FMC_MspInit+0x118>)
 8001e88:	f002 f8d6 	bl	8004038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin 
 8001e8c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001e90:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin 
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin 
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4820      	ldr	r0, [pc, #128]	; (8001f28 <HAL_FMC_MspInit+0x11c>)
 8001ea8:	f002 f8c6 	bl	8004038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin 
 8001eac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001eb0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin 
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4819      	ldr	r0, [pc, #100]	; (8001f2c <HAL_FMC_MspInit+0x120>)
 8001ec8:	f002 f8b6 	bl	8004038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin 
 8001ecc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ed0:	607b      	str	r3, [r7, #4]
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin 
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ede:	230c      	movs	r3, #12
 8001ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <HAL_FMC_MspInit+0x124>)
 8001ee8:	f002 f8a6 	bl	8004038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin 
 8001eec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ef0:	607b      	str	r3, [r7, #4]
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin 
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001efe:	230c      	movs	r3, #12
 8001f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	480b      	ldr	r0, [pc, #44]	; (8001f34 <HAL_FMC_MspInit+0x128>)
 8001f08:	f002 f896 	bl	8004038 <HAL_GPIO_Init>
 8001f0c:	e000      	b.n	8001f10 <HAL_FMC_MspInit+0x104>
    return;
 8001f0e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	240000f0 	.word	0x240000f0
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58022000 	.word	0x58022000
 8001f24:	58021800 	.word	0x58021800
 8001f28:	58020c00 	.word	0x58020c00
 8001f2c:	58021000 	.word	0x58021000
 8001f30:	58021c00 	.word	0x58021c00
 8001f34:	58021400 	.word	0x58021400

08001f38 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001f40:	f7ff ff64 	bl	8001e0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f54:	f7ff ff5a 	bl	8001e0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f68:	f7ff ff50 	bl	8001e0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <HAL_SAI_MspInit+0xe4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d137      	bne.n	8001ff6 <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_SAI_MspInit+0xe8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10e      	bne.n	8001fac <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_SAI_MspInit+0xec>)
 8001f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f94:	4a32      	ldr	r2, [pc, #200]	; (8002060 <HAL_SAI_MspInit+0xec>)
 8001f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_SAI_MspInit+0xec>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_SAI_MspInit+0xe8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_SAI_MspInit+0xe8>)
 8001fb4:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 8001fb6:	2370      	movs	r3, #112	; 0x70
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4824      	ldr	r0, [pc, #144]	; (8002064 <HAL_SAI_MspInit+0xf0>)
 8001fd2:	f002 f831 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481d      	ldr	r0, [pc, #116]	; (8002068 <HAL_SAI_MspInit+0xf4>)
 8001ff2:	f002 f821 	bl	8004038 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_SAI_MspInit+0xf8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d127      	bne.n	8002050 <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_SAI_MspInit+0xe8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10e      	bne.n	8002026 <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_SAI_MspInit+0xec>)
 800200a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_SAI_MspInit+0xec>)
 8002010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002014:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_SAI_MspInit+0xec>)
 800201a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_SAI_MspInit+0xe8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_SAI_MspInit+0xe8>)
 800202e:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002030:	2308      	movs	r3, #8
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002040:	2306      	movs	r3, #6
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <HAL_SAI_MspInit+0xf0>)
 800204c:	f001 fff4 	bl	8004038 <HAL_GPIO_Init>

    }
}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40015804 	.word	0x40015804
 800205c:	240000f4 	.word	0x240000f4
 8002060:	58024400 	.word	0x58024400
 8002064:	58021000 	.word	0x58021000
 8002068:	58021800 	.word	0x58021800
 800206c:	40015824 	.word	0x40015824

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 f8fc 	bl	80022c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <SystemInit+0xac>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <SystemInit+0xac>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <SystemInit+0xb0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <SystemInit+0xb0>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <SystemInit+0xb0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <SystemInit+0xb0>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4921      	ldr	r1, [pc, #132]	; (800217c <SystemInit+0xb0>)
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <SystemInit+0xb4>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <SystemInit+0xb0>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <SystemInit+0xb0>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <SystemInit+0xb0>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <SystemInit+0xb0>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <SystemInit+0xb0>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <SystemInit+0xb0>)
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <SystemInit+0xb0>)
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <SystemInit+0xb0>)
 800212a:	2200      	movs	r2, #0
 800212c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <SystemInit+0xb0>)
 8002130:	2200      	movs	r2, #0
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <SystemInit+0xb0>)
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <SystemInit+0xb0>)
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <SystemInit+0xb0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <SystemInit+0xb0>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <SystemInit+0xb0>)
 800214e:	2200      	movs	r2, #0
 8002150:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <SystemInit+0xb8>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <SystemInit+0xbc>)
 8002158:	4013      	ands	r3, r2
 800215a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215e:	d202      	bcs.n	8002166 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <SystemInit+0xc0>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SystemInit+0xac>)
 8002168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00
 800217c:	58024400 	.word	0x58024400
 8002180:	eaf6ed7f 	.word	0xeaf6ed7f
 8002184:	5c001000 	.word	0x5c001000
 8002188:	ffff0000 	.word	0xffff0000
 800218c:	51008108 	.word	0x51008108

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002196:	e003      	b.n	80021a0 <LoopCopyDataInit>

08002198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800219a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800219c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800219e:	3104      	adds	r1, #4

080021a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021a8:	d3f6      	bcc.n	8002198 <CopyDataInit>
  ldr  r2, =_sbss
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021ac:	e002      	b.n	80021b4 <LoopFillZerobss>

080021ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021b0:	f842 3b04 	str.w	r3, [r2], #4

080021b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021b8:	d3f9      	bcc.n	80021ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ba:	f7ff ff87 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f00a fef1 	bl	800cfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7fe fa09 	bl	80005d8 <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80021cc:	0800d044 	.word	0x0800d044
  ldr  r0, =_sdata
 80021d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80021d4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80021d8:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80021dc:	24062938 	.word	0x24062938

080021e0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC3_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f001 f9c7 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ee:	f003 fd3f 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_Init+0x60>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_Init+0x64>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	fa21 f303 	lsr.w	r3, r1, r3
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <HAL_Init+0x68>)
 800220c:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_Init+0x68>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_Init+0x60>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	490b      	ldr	r1, [pc, #44]	; (8002248 <HAL_Init+0x64>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_Init+0x6c>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f812 	bl	8002254 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e002      	b.n	8002240 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800223a:	f7ff f8e7 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	0800d024 	.word	0x0800d024
 800224c:	24000000 	.word	0x24000000
 8002250:	24000004 	.word	0x24000004

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_InitTick+0x60>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e021      	b.n	80022ac <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_InitTick+0x64>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_InitTick+0x60>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fbb3 f3f1 	udiv	r3, r3, r1
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f001 f9a1 	bl	80035c6 <HAL_SYSTICK_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00e      	b.n	80022ac <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d80a      	bhi.n	80022aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f001 f979 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_InitTick+0x68>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2400000c 	.word	0x2400000c
 80022b8:	24000000 	.word	0x24000000
 80022bc:	24000008 	.word	0x24000008

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2400000c 	.word	0x2400000c
 80022e4:	24062934 	.word	0x24062934

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	24062934 	.word	0x24062934

08002300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff ffee 	bl	80022e8 <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d005      	beq.n	8002326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_Delay+0x40>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002326:	bf00      	nop
 8002328:	f7ff ffde 	bl	80022e8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f7      	bhi.n	8002328 <HAL_Delay+0x28>
  {
  }
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2400000c 	.word	0x2400000c

08002344 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetREVID+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0c1b      	lsrs	r3, r3, #16
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	5c001000 	.word	0x5c001000

0800235c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	58000400 	.word	0x58000400

08002384 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	4904      	ldr	r1, [pc, #16]	; (80023ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	58000400 	.word	0x58000400

080023b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002418:	b490      	push	{r4, r7}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3360      	adds	r3, #96	; 0x60
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	430b      	orrs	r3, r1
 8002444:	4313      	orrs	r3, r2
 8002446:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bc90      	pop	{r4, r7}
 8002450:	4770      	bx	lr

08002452 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	611a      	str	r2, [r3, #16]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002484:	b490      	push	{r4, r7}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3360      	adds	r3, #96	; 0x60
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	6023      	str	r3, [r4, #0]
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc90      	pop	{r4, r7}
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024b4:	b490      	push	{r4, r7}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3330      	adds	r3, #48	; 0x30
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	4413      	add	r3, r2
 80024d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	211f      	movs	r1, #31
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 011f 	and.w	r1, r3, #31
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	4313      	orrs	r3, r2
 80024fa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bc90      	pop	{r4, r7}
 8002504:	4770      	bx	lr

08002506 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002506:	b490      	push	{r4, r7}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3314      	adds	r3, #20
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0e5b      	lsrs	r3, r3, #25
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	0d1b      	lsrs	r3, r3, #20
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2107      	movs	r1, #7
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0d1b      	lsrs	r3, r3, #20
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bc90      	pop	{r4, r7}
 8002554:	4770      	bx	lr
	...

08002558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0318 	and.w	r3, r3, #24
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <LL_ADC_SetChannelSingleDiff+0x44>)
 800257c:	40d9      	lsrs	r1, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	400b      	ands	r3, r1
 8002582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	000fffff 	.word	0x000fffff

080025a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6093      	str	r3, [r2, #8]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	5fffffc0 	.word	0x5fffffc0

080025c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <LL_ADC_EnableInternalRegulator+0x24>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	6fffffc0 	.word	0x6fffffc0

08002614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <LL_ADC_IsEnabled+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_IsEnabled+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d101      	bne.n	800267a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d101      	bne.n	80026a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e18e      	b.n	80029e8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7fe feb1 	bl	8001440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff67 	bl	80025c4 <LL_ADC_IsDeepPowerDownEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff4d 	bl	80025a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff82 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff66 	bl	80025ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002720:	4b9a      	ldr	r3, [pc, #616]	; (800298c <HAL_ADC_Init+0x2dc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a9a      	ldr	r2, [pc, #616]	; (8002990 <HAL_ADC_Init+0x2e0>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002730:	e002      	b.n	8002738 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3b01      	subs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f9      	bne.n	8002732 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff66 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff77 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 8002774:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8129 	bne.w	80029d6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8125 	bne.w	80029d6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff4b 	bl	800263c <LL_ADC_IsEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d136      	bne.n	800281a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a78      	ldr	r2, [pc, #480]	; (8002994 <HAL_ADC_Init+0x2e4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_Init+0x110>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a77      	ldr	r2, [pc, #476]	; (8002998 <HAL_ADC_Init+0x2e8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10e      	bne.n	80027de <HAL_ADC_Init+0x12e>
 80027c0:	4874      	ldr	r0, [pc, #464]	; (8002994 <HAL_ADC_Init+0x2e4>)
 80027c2:	f7ff ff3b 	bl	800263c <LL_ADC_IsEnabled>
 80027c6:	4604      	mov	r4, r0
 80027c8:	4873      	ldr	r0, [pc, #460]	; (8002998 <HAL_ADC_Init+0x2e8>)
 80027ca:	f7ff ff37 	bl	800263c <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4323      	orrs	r3, r4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e008      	b.n	80027f0 <HAL_ADC_Init+0x140>
 80027de:	486f      	ldr	r0, [pc, #444]	; (800299c <HAL_ADC_Init+0x2ec>)
 80027e0:	f7ff ff2c 	bl	800263c <LL_ADC_IsEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a66      	ldr	r2, [pc, #408]	; (8002994 <HAL_ADC_Init+0x2e4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_Init+0x158>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a65      	ldr	r2, [pc, #404]	; (8002998 <HAL_ADC_Init+0x2e8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADC_Init+0x15c>
 8002808:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_ADC_Init+0x2f0>)
 800280a:	e000      	b.n	800280e <HAL_ADC_Init+0x15e>
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_ADC_Init+0x2f4>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7ff fdcb 	bl	80023b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800281a:	f7ff fd93 	bl	8002344 <HAL_GetREVID>
 800281e:	4602      	mov	r2, r0
 8002820:	f241 0303 	movw	r3, #4099	; 0x1003
 8002824:	429a      	cmp	r2, r3
 8002826:	d914      	bls.n	8002852 <HAL_ADC_Init+0x1a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b10      	cmp	r3, #16
 800282e:	d110      	bne.n	8002852 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7d5b      	ldrb	r3, [r3, #21]
 8002834:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800283a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002840:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7f1b      	ldrb	r3, [r3, #28]
 8002846:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002848:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800284a:	f043 030c 	orr.w	r3, r3, #12
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e00d      	b.n	800286e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7d5b      	ldrb	r3, [r3, #21]
 8002856:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002862:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7f1b      	ldrb	r3, [r3, #28]
 8002868:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d106      	bne.n	8002884 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	3b01      	subs	r3, #1
 800287c:	045b      	lsls	r3, r3, #17
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_ADC_Init+0x2f8>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fed2 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 80028be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fedf 	bl	8002688 <LL_ADC_INJ_IsConversionOngoing>
 80028ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d14a      	bne.n	8002968 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d147      	bne.n	8002968 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7d1b      	ldrb	r3, [r3, #20]
 80028dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <HAL_ADC_Init+0x2fc>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	69b9      	ldr	r1, [r7, #24]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002900:	2b01      	cmp	r3, #1
 8002902:	d11b      	bne.n	800293c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_ADC_Init+0x300>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002918:	3a01      	subs	r2, #1
 800291a:	0411      	lsls	r1, r2, #16
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800292c:	430a      	orrs	r2, r1
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	e007      	b.n	800294c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fb58 	bl	8003018 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d121      	bne.n	80029b4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f023 010f 	bic.w	r1, r3, #15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	1e5a      	subs	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
 8002988:	e01c      	b.n	80029c4 <HAL_ADC_Init+0x314>
 800298a:	bf00      	nop
 800298c:	24000000 	.word	0x24000000
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	40022000 	.word	0x40022000
 8002998:	40022100 	.word	0x40022100
 800299c:	58026000 	.word	0x58026000
 80029a0:	40022300 	.word	0x40022300
 80029a4:	58026300 	.word	0x58026300
 80029a8:	fff0c003 	.word	0xfff0c003
 80029ac:	ffffbffc 	.word	0xffffbffc
 80029b0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020f 	bic.w	r2, r2, #15
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f023 0303 	bic.w	r3, r3, #3
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
 80029d4:	e007      	b.n	80029e6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}

080029f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b099      	sub	sp, #100	; 0x64
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a99      	ldr	r2, [pc, #612]	; (8002c70 <HAL_ADC_ConfigChannel+0x280>)
 8002a0a:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x2a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e2e6      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5f8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe1b 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 82cb 	bne.w	8002fca <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x62>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	e00f      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x82>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	69d1      	ldr	r1, [r2, #28]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fd11 	bl	80024b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fde3 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fdf0 	bl	8002688 <LL_ADC_INJ_IsConversionOngoing>
 8002aa8:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 80b3 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 80af 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7ff fd1d 	bl	8002506 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <HAL_ADC_ConfigChannel+0x284>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad8:	d10b      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x102>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	e01d      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x13e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x128>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	e00a      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x13e>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d027      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	f7ff fc67 	bl	8002418 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6919      	ldr	r1, [r3, #16]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	7e5b      	ldrb	r3, [r3, #25]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x170>
 8002b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x172>
 8002b60:	2300      	movs	r3, #0
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7ff fc8e 	bl	8002484 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6919      	ldr	r1, [r3, #16]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x18e>
 8002b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b7c:	e000      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x190>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	461a      	mov	r2, r3
 8002b82:	f7ff fc66 	bl	8002452 <LL_ADC_SetDataRightShift>
 8002b86:	e047      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bf2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	069b      	lsls	r3, r3, #26
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fd0d 	bl	800263c <LL_ADC_IsEnabled>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 81d9 	bne.w	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff fc8e 	bl	8002558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_ADC_ConfigChannel+0x280>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	f040 8101 	bne.w	8002e4a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10f      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x288>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	bf94      	ite	ls
 8002c68:	2301      	movls	r3, #1
 8002c6a:	2300      	movhi	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e016      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x2ae>
 8002c70:	47ff0000 	.word	0x47ff0000
 8002c74:	5c001000 	.word	0x5c001000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d064      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x2ce>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cbc:	e00e      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x2ec>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x30c>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e010      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x32e>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x354>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	051b      	lsls	r3, r3, #20
 8002d42:	e011      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x378>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	e069      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x398>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	069b      	lsls	r3, r3, #26
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d86:	e00e      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x3b6>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	61fb      	str	r3, [r7, #28]
  return result;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	069b      	lsls	r3, r3, #26
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3d6>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	e010      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x3f8>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	617b      	str	r3, [r7, #20]
  return result;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10d      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x424>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b1e      	subs	r3, #30
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e12:	e014      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x44e>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	60fb      	str	r3, [r7, #12]
  return result;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	3b1e      	subs	r3, #30
 8002e38:	051b      	lsls	r3, r3, #20
 8002e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7ff fb5e 	bl	8002506 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f280 80c4 	bge.w	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x478>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a64      	ldr	r2, [pc, #400]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x47c>
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_ADC_ConfigChannel+0x608>)
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x47e>
 8002e6c:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_ADC_ConfigChannel+0x60c>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fac4 	bl	80023fc <LL_ADC_GetCommonPathInternalCh>
 8002e74:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5d      	ldr	r2, [pc, #372]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_ConfigChannel+0x49a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5b      	ldr	r2, [pc, #364]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10e      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x4b8>
 8002e8a:	4859      	ldr	r0, [pc, #356]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002e8c:	f7ff fbd6 	bl	800263c <LL_ADC_IsEnabled>
 8002e90:	4604      	mov	r4, r0
 8002e92:	4858      	ldr	r0, [pc, #352]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002e94:	f7ff fbd2 	bl	800263c <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4323      	orrs	r3, r4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e008      	b.n	8002eba <HAL_ADC_ConfigChannel+0x4ca>
 8002ea8:	4855      	ldr	r0, [pc, #340]	; (8003000 <HAL_ADC_ConfigChannel+0x610>)
 8002eaa:	f7ff fbc7 	bl	800263c <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d07b      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a50      	ldr	r2, [pc, #320]	; (8003004 <HAL_ADC_ConfigChannel+0x614>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d12e      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x536>
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d129      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4a      	ldr	r2, [pc, #296]	; (8003000 <HAL_ADC_ConfigChannel+0x610>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d17f      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a43      	ldr	r2, [pc, #268]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x500>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a42      	ldr	r2, [pc, #264]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x504>
 8002ef0:	4a41      	ldr	r2, [pc, #260]	; (8002ff8 <HAL_ADC_ConfigChannel+0x608>)
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x506>
 8002ef4:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <HAL_ADC_ConfigChannel+0x60c>)
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff fa69 	bl	80023d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f04:	4b40      	ldr	r3, [pc, #256]	; (8003008 <HAL_ADC_ConfigChannel+0x618>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	4a40      	ldr	r2, [pc, #256]	; (800300c <HAL_ADC_ConfigChannel+0x61c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f24:	e05a      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a39      	ldr	r2, [pc, #228]	; (8003010 <HAL_ADC_ConfigChannel+0x620>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d11e      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x57e>
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d119      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_ADC_ConfigChannel+0x610>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d14b      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x568>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x56c>
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_ADC_ConfigChannel+0x608>)
 8002f5a:	e000      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x56e>
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_ADC_ConfigChannel+0x60c>)
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7ff fa35 	bl	80023d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6c:	e036      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_ADC_ConfigChannel+0x624>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d131      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
 8002f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d12c      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_ADC_ConfigChannel+0x610>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d127      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_ADC_ConfigChannel+0x600>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x5b0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_ADC_ConfigChannel+0x604>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x5b4>
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_ADC_ConfigChannel+0x608>)
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x5b6>
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <HAL_ADC_ConfigChannel+0x60c>)
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7ff fa11 	bl	80023d6 <LL_ADC_SetCommonPathInternalCh>
 8002fb4:	e012      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fc8:	e008      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3764      	adds	r7, #100	; 0x64
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40022100 	.word	0x40022100
 8002ff8:	40022300 	.word	0x40022300
 8002ffc:	58026300 	.word	0x58026300
 8003000:	58026000 	.word	0x58026000
 8003004:	cb840000 	.word	0xcb840000
 8003008:	24000000 	.word	0x24000000
 800300c:	053e2d63 	.word	0x053e2d63
 8003010:	c7520000 	.word	0xc7520000
 8003014:	cfb80000 	.word	0xcfb80000

08003018 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <ADC_ConfigureBoostMode+0x1e0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <ADC_ConfigureBoostMode+0x1c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	; (80031fc <ADC_ConfigureBoostMode+0x1e4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d109      	bne.n	8003048 <ADC_ConfigureBoostMode+0x30>
 8003034:	4b72      	ldr	r3, [pc, #456]	; (8003200 <ADC_ConfigureBoostMode+0x1e8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e008      	b.n	800305a <ADC_ConfigureBoostMode+0x42>
 8003048:	4b6e      	ldr	r3, [pc, #440]	; (8003204 <ADC_ConfigureBoostMode+0x1ec>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01a      	beq.n	8003094 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800305e:	f002 ff79 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8003062:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800306c:	d006      	beq.n	800307c <ADC_ConfigureBoostMode+0x64>
 800306e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003072:	d00b      	beq.n	800308c <ADC_ConfigureBoostMode+0x74>
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d000      	beq.n	800307c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800307a:	e05d      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	60fb      	str	r3, [r7, #12]
        break;
 800308a:	e055      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	60fb      	str	r3, [r7, #12]
        break;
 8003092:	e051      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003094:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003098:	f003 fe94 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 800309c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030a6:	d02a      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
 80030a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030ac:	d813      	bhi.n	80030d6 <ADC_ConfigureBoostMode+0xbe>
 80030ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030b2:	d024      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
 80030b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030b8:	d806      	bhi.n	80030c8 <ADC_ConfigureBoostMode+0xb0>
 80030ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030be:	d01e      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
 80030c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030c4:	d01b      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80030c6:	e037      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030cc:	d017      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
 80030ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030d2:	d014      	beq.n	80030fe <ADC_ConfigureBoostMode+0xe6>
        break;
 80030d4:	e030      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030da:	d021      	beq.n	8003120 <ADC_ConfigureBoostMode+0x108>
 80030dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030e0:	d806      	bhi.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030e6:	d013      	beq.n	8003110 <ADC_ConfigureBoostMode+0xf8>
 80030e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ec:	d014      	beq.n	8003118 <ADC_ConfigureBoostMode+0x100>
        break;
 80030ee:	e023      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030f4:	d018      	beq.n	8003128 <ADC_ConfigureBoostMode+0x110>
 80030f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030fa:	d019      	beq.n	8003130 <ADC_ConfigureBoostMode+0x118>
        break;
 80030fc:	e01c      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	60fb      	str	r3, [r7, #12]
        break;
 800310e:	e013      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
      break;
 8003116:	e00f      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	60fb      	str	r3, [r7, #12]
        break;
 800311e:	e00b      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	60fb      	str	r3, [r7, #12]
        break;
 8003126:	e007      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	09db      	lsrs	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
        break;
 800312e:	e003      	b.n	8003138 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	60fb      	str	r3, [r7, #12]
        break;
 8003136:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003138:	f7ff f904 	bl	8002344 <HAL_GetREVID>
 800313c:	4602      	mov	r2, r0
 800313e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003142:	429a      	cmp	r2, r3
 8003144:	d815      	bhi.n	8003172 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <ADC_ConfigureBoostMode+0x1f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d908      	bls.n	8003160 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 800315e:	e047      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	e03e      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <ADC_ConfigureBoostMode+0x1f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d808      	bhi.n	8003192 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	e02e      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <ADC_ConfigureBoostMode+0x1f4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d90e      	bls.n	80031b8 <ADC_ConfigureBoostMode+0x1a0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <ADC_ConfigureBoostMode+0x1f8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d80a      	bhi.n	80031b8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e01b      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <ADC_ConfigureBoostMode+0x1f8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d90e      	bls.n	80031de <ADC_ConfigureBoostMode+0x1c6>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a14      	ldr	r2, [pc, #80]	; (8003214 <ADC_ConfigureBoostMode+0x1fc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d80a      	bhi.n	80031de <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e008      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	e7ff      	b.n	80031f0 <ADC_ConfigureBoostMode+0x1d8>
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40022100 	.word	0x40022100
 8003200:	40022300 	.word	0x40022300
 8003204:	58026300 	.word	0x58026300
 8003208:	01312d00 	.word	0x01312d00
 800320c:	005f5e10 	.word	0x005f5e10
 8003210:	00bebc20 	.word	0x00bebc20
 8003214:	017d7840 	.word	0x017d7840

08003218 <LL_ADC_IsEnabled>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <LL_ADC_IsEnabled+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_ADC_IsEnabled+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_ADC_REG_IsConversionOngoing>:
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d101      	bne.n	8003256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b09f      	sub	sp, #124	; 0x7c
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0ba      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5c      	ldr	r2, [pc, #368]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d102      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003294:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	e001      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e09d      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ffbd 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 80032c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ffb7 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d17f      	bne.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d17c      	bne.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a47      	ldr	r2, [pc, #284]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a46      	ldr	r2, [pc, #280]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80032f0:	4b45      	ldr	r3, [pc, #276]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032f2:	e000      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80032f4:	4b45      	ldr	r3, [pc, #276]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d039      	beq.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	431a      	orrs	r2, r3
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10e      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003326:	4836      	ldr	r0, [pc, #216]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003328:	f7ff ff76 	bl	8003218 <LL_ADC_IsEnabled>
 800332c:	4604      	mov	r4, r0
 800332e:	4835      	ldr	r0, [pc, #212]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003330:	f7ff ff72 	bl	8003218 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003344:	4832      	ldr	r0, [pc, #200]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003346:	f7ff ff67 	bl	8003218 <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d047      	beq.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003360:	4013      	ands	r3, r2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	431a      	orrs	r2, r3
 800336e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003370:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003372:	e03a      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10e      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003394:	481a      	ldr	r0, [pc, #104]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003396:	f7ff ff3f 	bl	8003218 <LL_ADC_IsEnabled>
 800339a:	4604      	mov	r4, r0
 800339c:	4819      	ldr	r0, [pc, #100]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800339e:	f7ff ff3b 	bl	8003218 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4323      	orrs	r3, r4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	e008      	b.n	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80033b2:	4817      	ldr	r0, [pc, #92]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033b4:	f7ff ff30 	bl	8003218 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	e009      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033e8:	e000      	b.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	377c      	adds	r7, #124	; 0x7c
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	40022000 	.word	0x40022000
 8003404:	40022100 	.word	0x40022100
 8003408:	40022300 	.word	0x40022300
 800340c:	58026300 	.word	0x58026300
 8003410:	58026000 	.word	0x58026000
 8003414:	fffff0e0 	.word	0xfffff0e0

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 8003442:	4313      	orrs	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00
 800345c:	05fa0000 	.word	0x05fa0000

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff47 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035a0:	f7ff ff5e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff90 	bl	80034d0 <NVIC_EncodePriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5f 	bl	800347c <__NVIC_SetPriority>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ffb2 	bl	8003538 <SysTick_Config>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0ac      	b.n	800374c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f8b2 	bl	8003760 <DFSDM_GetChannelFromInstance>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_DFSDM_ChannelInit+0x174>)
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e09f      	b.n	800374c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fd ff53 	bl	80014b8 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_DFSDM_ChannelInit+0x178>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a4f      	ldr	r2, [pc, #316]	; (8003758 <HAL_DFSDM_ChannelInit+0x178>)
 800361a:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1U)
 800361c:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_DFSDM_ChannelInit+0x178>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d125      	bne.n	8003670 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 800362a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003630:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4948      	ldr	r1, [pc, #288]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003644:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003648:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003652:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	3b01      	subs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	493f      	ldr	r1, [pc, #252]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003664:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3c      	ldr	r2, [pc, #240]	; (800375c <HAL_DFSDM_ChannelInit+0x17c>)
 800366a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800366e:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800367e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800368e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003694:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 020f 	bic.w	r2, r2, #15
 80036ac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80036d4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f002 0207 	and.w	r2, r2, #7
 8003700:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800372c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f810 	bl	8003760 <DFSDM_GetChannelFromInstance>
 8003740:	4601      	mov	r1, r0
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_DFSDM_ChannelInit+0x174>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	240000fc 	.word	0x240000fc
 8003758:	240000f8 	.word	0x240000f8
 800375c:	40017000 	.word	0x40017000

08003760 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a20      	ldr	r2, [pc, #128]	; (80037ec <DFSDM_GetChannelFromInstance+0x8c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d102      	bne.n	8003776 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e032      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <DFSDM_GetChannelFromInstance+0x90>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d102      	bne.n	8003784 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e02b      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <DFSDM_GetChannelFromInstance+0x94>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d102      	bne.n	8003792 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800378c:	2302      	movs	r3, #2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e024      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel3)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <DFSDM_GetChannelFromInstance+0x98>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d102      	bne.n	80037a0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800379a:	2303      	movs	r3, #3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e01d      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <DFSDM_GetChannelFromInstance+0x9c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d102      	bne.n	80037ae <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80037a8:	2304      	movs	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e016      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel5)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <DFSDM_GetChannelFromInstance+0xa0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d102      	bne.n	80037bc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80037b6:	2305      	movs	r3, #5
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e00f      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel6)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <DFSDM_GetChannelFromInstance+0xa4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d102      	bne.n	80037ca <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80037c4:	2306      	movs	r3, #6
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e008      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel7)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <DFSDM_GetChannelFromInstance+0xa8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d102      	bne.n	80037d8 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 80037d2:	2307      	movs	r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e001      	b.n	80037dc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else
  {
    channel = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  }
  return channel;
 80037dc:	68fb      	ldr	r3, [r7, #12]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40017000 	.word	0x40017000
 80037f0:	40017020 	.word	0x40017020
 80037f4:	40017040 	.word	0x40017040
 80037f8:	40017060 	.word	0x40017060
 80037fc:	40017080 	.word	0x40017080
 8003800:	400170a0 	.word	0x400170a0
 8003804:	400170c0 	.word	0x400170c0
 8003808:	400170e0 	.word	0x400170e0

0800380c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0c6      	b.n	80039ac <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fe9e 	bl	8001568 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2223      	movs	r2, #35	; 0x23
 8003830:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003832:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <HAL_ETH_Init+0x1a8>)
 8003834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003838:	4a5e      	ldr	r2, [pc, #376]	; (80039b4 <HAL_ETH_Init+0x1a8>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003842:	4b5c      	ldr	r3, [pc, #368]	; (80039b4 <HAL_ETH_Init+0x1a8>)
 8003844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7a1b      	ldrb	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003858:	2000      	movs	r0, #0
 800385a:	f7fe fd7f 	bl	800235c <HAL_SYSCFG_ETHInterfaceSelect>
 800385e:	e003      	b.n	8003868 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003860:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003864:	f7fe fd7a 	bl	800235c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003880:	f7fe fd32 	bl	80022e8 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003886:	e00f      	b.n	80038a8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003888:	f7fe fd2e 	bl	80022e8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003896:	d907      	bls.n	80038a8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	22e0      	movs	r2, #224	; 0xe0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e081      	b.n	80039ac <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e6      	bne.n	8003888 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fac0 	bl	8003e40 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80038c0:	f002 fb48 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <HAL_ETH_Init+0x1ac>)
 80038c8:	fba3 2302 	umull	r2, r3, r3, r2
 80038cc:	0c9a      	lsrs	r2, r3, #18
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3a01      	subs	r2, #1
 80038d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa13 	bl	8003d04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038f8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	22e0      	movs	r2, #224	; 0xe0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e04a      	b.n	80039ac <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f241 1308 	movw	r3, #4360	; 0x1108
 800391e:	4413      	add	r3, r2
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_ETH_Init+0x1b0>)
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6952      	ldr	r2, [r2, #20]
 800392a:	0052      	lsls	r2, r2, #1
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	6809      	ldr	r1, [r1, #0]
 8003930:	431a      	orrs	r2, r3
 8003932:	f241 1308 	movw	r3, #4360	; 0x1108
 8003936:	440b      	add	r3, r1
 8003938:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fad8 	bl	8003ef0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb1c 	bl	8003f7e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3305      	adds	r3, #5
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	3303      	adds	r3, #3
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	061a      	lsls	r2, r3, #24
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	3302      	adds	r3, #2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	3301      	adds	r3, #1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003984:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003992:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003994:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2210      	movs	r2, #16
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2210      	movs	r2, #16
 80039a8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58024400 	.word	0x58024400
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	ffff8001 	.word	0xffff8001

080039c0 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80039d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80039da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	7b1b      	ldrb	r3, [r3, #12]
 80039e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80039e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	7b5b      	ldrb	r3, [r3, #13]
 80039e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	7b9b      	ldrb	r3, [r3, #14]
 80039f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80039f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	7bdb      	ldrb	r3, [r3, #15]
 80039f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	7c12      	ldrb	r2, [r2, #16]
 8003a00:	2a00      	cmp	r2, #0
 8003a02:	d102      	bne.n	8003a0a <ETH_SetMACConfig+0x4a>
 8003a04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a08:	e000      	b.n	8003a0c <ETH_SetMACConfig+0x4c>
 8003a0a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a0c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	7c52      	ldrb	r2, [r2, #17]
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	d102      	bne.n	8003a1c <ETH_SetMACConfig+0x5c>
 8003a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a1a:	e000      	b.n	8003a1e <ETH_SetMACConfig+0x5e>
 8003a1c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a1e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7c9b      	ldrb	r3, [r3, #18]
 8003a24:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a26:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003a2c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003a32:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	7f1b      	ldrb	r3, [r3, #28]
 8003a38:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003a3a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	7f5b      	ldrb	r3, [r3, #29]
 8003a40:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003a42:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	7f92      	ldrb	r2, [r2, #30]
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d102      	bne.n	8003a52 <ETH_SetMACConfig+0x92>
 8003a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a50:	e000      	b.n	8003a54 <ETH_SetMACConfig+0x94>
 8003a52:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003a54:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7fdb      	ldrb	r3, [r3, #31]
 8003a5a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003a5c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d102      	bne.n	8003a6e <ETH_SetMACConfig+0xae>
 8003a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a6c:	e000      	b.n	8003a70 <ETH_SetMACConfig+0xb0>
 8003a6e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003a70:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003a76:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003a80:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <ETH_SetMACConfig+0x22c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aaa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003aac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ab4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003ab6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003abe:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003ac0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	d102      	bne.n	8003ad2 <ETH_SetMACConfig+0x112>
 8003acc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ad0:	e000      	b.n	8003ad4 <ETH_SetMACConfig+0x114>
 8003ad2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003ad4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <ETH_SetMACConfig+0x230>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <ETH_SetMACConfig+0x234>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b22:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	d101      	bne.n	8003b32 <ETH_SetMACConfig+0x172>
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	e000      	b.n	8003b34 <ETH_SetMACConfig+0x174>
 8003b32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b34:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b46:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003b5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003b64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f023 0103 	bic.w	r1, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003b8a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d101      	bne.n	8003bae <ETH_SetMACConfig+0x1ee>
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	e000      	b.n	8003bb0 <ETH_SetMACConfig+0x1f0>
 8003bae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003bb0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003bb8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003bba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003bc2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003bd0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	00048083 	.word	0x00048083
 8003bf0:	c0f88000 	.word	0xc0f88000
 8003bf4:	fffffef0 	.word	0xfffffef0

08003bf8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <ETH_SetDMAConfig+0xf8>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	6809      	ldr	r1, [r1, #0]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003c1e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	791b      	ldrb	r3, [r3, #4]
 8003c24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c2a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	7b1b      	ldrb	r3, [r3, #12]
 8003c30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f241 0304 	movw	r3, #4100	; 0x1004
 8003c3e:	4413      	add	r3, r2
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <ETH_SetDMAConfig+0xfc>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6811      	ldr	r1, [r2, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003c52:	440b      	add	r3, r1
 8003c54:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7b5b      	ldrb	r3, [r3, #13]
 8003c5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <ETH_SetDMAConfig+0x100>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003c7e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	7d1b      	ldrb	r3, [r3, #20]
 8003c88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c8a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	7f5b      	ldrb	r3, [r3, #29]
 8003c90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003c9e:	4413      	add	r3, r2
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <ETH_SetDMAConfig+0x104>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6811      	ldr	r1, [r2, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	f241 1304 	movw	r3, #4356	; 0x1104
 8003cb2:	440b      	add	r3, r1
 8003cb4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7f1b      	ldrb	r3, [r3, #28]
 8003cba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ccc:	4413      	add	r3, r2
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <ETH_SetDMAConfig+0x108>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6811      	ldr	r1, [r2, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ce0:	440b      	add	r3, r1
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	ffff87fd 	.word	0xffff87fd
 8003cf4:	ffff2ffe 	.word	0xffff2ffe
 8003cf8:	fffec000 	.word	0xfffec000
 8003cfc:	ffc0efef 	.word	0xffc0efef
 8003d00:	7fc0ffff 	.word	0x7fc0ffff

08003d04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b0a4      	sub	sp, #144	; 0x90
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d12:	2300      	movs	r3, #0
 8003d14:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d44:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003d5c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d86:	2300      	movs	r3, #0
 8003d88:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003dae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003db8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003dde:	2300      	movs	r3, #0
 8003de0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fde6 	bl	80039c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003e24:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e2a:	f107 0308 	add.w	r3, r7, #8
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fee1 	bl	8003bf8 <ETH_SetDMAConfig>
}
 8003e36:	bf00      	nop
 8003e38:	3790      	adds	r7, #144	; 0x90
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e5a:	f002 f87b 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8003e5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d908      	bls.n	8003e7a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d804      	bhi.n	8003e7a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e027      	b.n	8003eca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d908      	bls.n	8003e94 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d804      	bhi.n	8003e94 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e01a      	b.n	8003eca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d903      	bls.n	8003ea4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d911      	bls.n	8003ec8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d908      	bls.n	8003ebe <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a0f      	ldr	r2, [pc, #60]	; (8003eec <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d804      	bhi.n	8003ebe <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e005      	b.n	8003eca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e000      	b.n	8003eca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003ec8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	01312cff 	.word	0x01312cff
 8003ee0:	02160ebf 	.word	0x02160ebf
 8003ee4:	039386ff 	.word	0x039386ff
 8003ee8:	05f5e0ff 	.word	0x05f5e0ff
 8003eec:	08f0d17f 	.word	0x08f0d17f

08003ef0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e01d      	b.n	8003f3a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2200      	movs	r2, #0
 8003f26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	3206      	adds	r2, #6
 8003f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d9de      	bls.n	8003efe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f241 132c 	movw	r3, #4396	; 0x112c
 8003f4e:	4413      	add	r3, r2
 8003f50:	2203      	movs	r2, #3
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68d9      	ldr	r1, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003f60:	4413      	add	r3, r2
 8003f62:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e024      	b.n	8003fd6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6919      	ldr	r1, [r3, #16]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	330a      	adds	r3, #10
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9d7      	bls.n	8003f8c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f241 1330 	movw	r3, #4400	; 0x1130
 8004002:	4413      	add	r3, r2
 8004004:	2203      	movs	r2, #3
 8004006:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6919      	ldr	r1, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	f241 131c 	movw	r3, #4380	; 0x111c
 8004014:	4413      	add	r3, r2
 8004016:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f241 1328 	movw	r3, #4392	; 0x1128
 8004028:	4413      	add	r3, r2
 800402a:	6019      	str	r1, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004046:	4b89      	ldr	r3, [pc, #548]	; (800426c <HAL_GPIO_Init+0x234>)
 8004048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800404a:	e194      	b.n	8004376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8186 	beq.w	8004370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x3c>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b12      	cmp	r3, #18
 8004072:	d123      	bne.n	80040bc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	220f      	movs	r2, #15
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	08da      	lsrs	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3208      	adds	r2, #8
 80040b6:	69b9      	ldr	r1, [r7, #24]
 80040b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0203 	and.w	r2, r3, #3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d00b      	beq.n	8004110 <HAL_GPIO_Init+0xd8>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d007      	beq.n	8004110 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004104:	2b11      	cmp	r3, #17
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b12      	cmp	r3, #18
 800410e:	d130      	bne.n	8004172 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004146:	2201      	movs	r2, #1
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0201 	and.w	r2, r3, #1
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80e0 	beq.w	8004370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_GPIO_Init+0x238>)
 80041b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041b6:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <HAL_GPIO_Init+0x238>)
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_GPIO_Init+0x238>)
 80041c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_GPIO_Init+0x23c>)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <HAL_GPIO_Init+0x240>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d052      	beq.n	80042a0 <HAL_GPIO_Init+0x268>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1f      	ldr	r2, [pc, #124]	; (800427c <HAL_GPIO_Init+0x244>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_GPIO_Init+0x22e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_GPIO_Init+0x248>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02b      	beq.n	8004262 <HAL_GPIO_Init+0x22a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_GPIO_Init+0x24c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d025      	beq.n	800425e <HAL_GPIO_Init+0x226>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_GPIO_Init+0x250>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01f      	beq.n	800425a <HAL_GPIO_Init+0x222>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_GPIO_Init+0x254>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d019      	beq.n	8004256 <HAL_GPIO_Init+0x21e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <HAL_GPIO_Init+0x258>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_GPIO_Init+0x21a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_GPIO_Init+0x25c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00d      	beq.n	800424e <HAL_GPIO_Init+0x216>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_GPIO_Init+0x260>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <HAL_GPIO_Init+0x212>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_GPIO_Init+0x264>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_GPIO_Init+0x20e>
 8004242:	2309      	movs	r3, #9
 8004244:	e02d      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 8004246:	230a      	movs	r3, #10
 8004248:	e02b      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 800424a:	2308      	movs	r3, #8
 800424c:	e029      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 800424e:	2307      	movs	r3, #7
 8004250:	e027      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 8004252:	2306      	movs	r3, #6
 8004254:	e025      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 8004256:	2305      	movs	r3, #5
 8004258:	e023      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 800425a:	2304      	movs	r3, #4
 800425c:	e021      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 800425e:	2303      	movs	r3, #3
 8004260:	e01f      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 8004262:	2302      	movs	r3, #2
 8004264:	e01d      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 8004266:	2301      	movs	r3, #1
 8004268:	e01b      	b.n	80042a2 <HAL_GPIO_Init+0x26a>
 800426a:	bf00      	nop
 800426c:	58000080 	.word	0x58000080
 8004270:	58024400 	.word	0x58024400
 8004274:	58000400 	.word	0x58000400
 8004278:	58020000 	.word	0x58020000
 800427c:	58020400 	.word	0x58020400
 8004280:	58020800 	.word	0x58020800
 8004284:	58020c00 	.word	0x58020c00
 8004288:	58021000 	.word	0x58021000
 800428c:	58021400 	.word	0x58021400
 8004290:	58021800 	.word	0x58021800
 8004294:	58021c00 	.word	0x58021c00
 8004298:	58022000 	.word	0x58022000
 800429c:	58022400 	.word	0x58022400
 80042a0:	2300      	movs	r3, #0
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	f002 0203 	and.w	r2, r2, #3
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	4093      	lsls	r3, r2
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b2:	4938      	ldr	r1, [pc, #224]	; (8004394 <HAL_GPIO_Init+0x35c>)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3301      	adds	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	f47f ae63 	bne.w	800404c <HAL_GPIO_Init+0x14>
  }
}
 8004386:	bf00      	nop
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	58000400 	.word	0x58000400

08004398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	807b      	strh	r3, [r7, #2]
 80043a4:	4613      	mov	r3, r2
 80043a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043a8:	787b      	ldrb	r3, [r7, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043b4:	e003      	b.n	80043be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043b6:	887b      	ldrh	r3, [r7, #2]
 80043b8:	041a      	lsls	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	619a      	str	r2, [r3, #24]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07f      	b.n	80044de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd f964 	bl	80016c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800441c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800442c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	e006      	b.n	8004454 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004452:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d104      	bne.n	8004466 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_I2C_Init+0x11c>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	ea42 0103 	orr.w	r1, r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	02008000 	.word	0x02008000

080044ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d138      	bne.n	8004574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800450c:	2302      	movs	r3, #2
 800450e:	e032      	b.n	8004576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800453e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b20      	cmp	r3, #32
 8004596:	d139      	bne.n	800460c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e033      	b.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	; 0x24
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800460c:	2302      	movs	r3, #2
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0bf      	b.n	80047ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd f886 	bl	8001754 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800465e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004674:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b4a      	ldr	r3, [pc, #296]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 8004690:	400b      	ands	r3, r1
 8004692:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68d9      	ldr	r1, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 80046be:	400b      	ands	r3, r1
 80046c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 80046ec:	400b      	ands	r3, r1
 80046ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 800471a:	400b      	ands	r3, r1
 800471c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6959      	ldr	r1, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0206 	orr.w	r2, r2, #6
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	f000f800 	.word	0xf000f800

080047bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047bc:	b5b0      	push	{r4, r5, r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_LTDC_ConfigLayer+0x1a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e02c      	b.n	8004830 <HAL_LTDC_ConfigLayer+0x74>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2134      	movs	r1, #52	; 0x34
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f811 	bl	8004838 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}

08004838 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	4413      	add	r3, r2
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4413      	add	r3, r2
 8004866:	3384      	adds	r3, #132	; 0x84
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	4611      	mov	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	01d2      	lsls	r2, r2, #7
 8004874:	440a      	add	r2, r1
 8004876:	3284      	adds	r2, #132	; 0x84
 8004878:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800487c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488e:	4413      	add	r3, r2
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	01db      	lsls	r3, r3, #7
 800489c:	440b      	add	r3, r1
 800489e:	3384      	adds	r3, #132	; 0x84
 80048a0:	4619      	mov	r1, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b6:	4413      	add	r3, r2
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	01db      	lsls	r3, r3, #7
 80048c6:	4413      	add	r3, r2
 80048c8:	3384      	adds	r3, #132	; 0x84
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	4611      	mov	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	01d2      	lsls	r2, r2, #7
 80048d6:	440a      	add	r2, r1
 80048d8:	3284      	adds	r2, #132	; 0x84
 80048da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ee:	4413      	add	r3, r2
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	01db      	lsls	r3, r3, #7
 80048fc:	440b      	add	r3, r1
 80048fe:	3384      	adds	r3, #132	; 0x84
 8004900:	4619      	mov	r1, r3
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	01db      	lsls	r3, r3, #7
 8004912:	4413      	add	r3, r2
 8004914:	3384      	adds	r3, #132	; 0x84
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4611      	mov	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	01d2      	lsls	r2, r2, #7
 8004922:	440a      	add	r2, r1
 8004924:	3284      	adds	r2, #132	; 0x84
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	01db      	lsls	r3, r3, #7
 8004936:	4413      	add	r3, r2
 8004938:	3384      	adds	r3, #132	; 0x84
 800493a:	461a      	mov	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	4413      	add	r3, r2
 800496a:	3384      	adds	r3, #132	; 0x84
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	01db      	lsls	r3, r3, #7
 8004978:	4413      	add	r3, r2
 800497a:	3384      	adds	r3, #132	; 0x84
 800497c:	461a      	mov	r2, r3
 800497e:	2300      	movs	r3, #0
 8004980:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004988:	461a      	mov	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	431a      	orrs	r2, r3
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	01db      	lsls	r3, r3, #7
 800499c:	440b      	add	r3, r1
 800499e:	3384      	adds	r3, #132	; 0x84
 80049a0:	4619      	mov	r1, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	4413      	add	r3, r2
 80049b4:	3384      	adds	r3, #132	; 0x84
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	4611      	mov	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	01d2      	lsls	r2, r2, #7
 80049c2:	440a      	add	r2, r1
 80049c4:	3284      	adds	r2, #132	; 0x84
 80049c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	3384      	adds	r3, #132	; 0x84
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	4413      	add	r3, r2
 80049ee:	3384      	adds	r3, #132	; 0x84
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	440b      	add	r3, r1
 80049fe:	3384      	adds	r3, #132	; 0x84
 8004a00:	4619      	mov	r1, r3
 8004a02:	4b58      	ldr	r3, [pc, #352]	; (8004b64 <LTDC_SetConfig+0x32c>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	68f9      	ldr	r1, [r7, #12]
 8004a12:	6809      	ldr	r1, [r1, #0]
 8004a14:	4608      	mov	r0, r1
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	01c9      	lsls	r1, r1, #7
 8004a1a:	4401      	add	r1, r0
 8004a1c:	3184      	adds	r1, #132	; 0x84
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	01db      	lsls	r3, r3, #7
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3384      	adds	r3, #132	; 0x84
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3384      	adds	r3, #132	; 0x84
 8004a40:	461a      	mov	r2, r3
 8004a42:	2300      	movs	r3, #0
 8004a44:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	4413      	add	r3, r2
 8004a52:	3384      	adds	r3, #132	; 0x84
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004a64:	2304      	movs	r3, #4
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e01b      	b.n	8004aa2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d102      	bne.n	8004a78 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004a72:	2303      	movs	r3, #3
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e014      	b.n	8004aa2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00b      	beq.n	8004a98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d007      	beq.n	8004a98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d003      	beq.n	8004a98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a94:	2b07      	cmp	r3, #7
 8004a96:	d102      	bne.n	8004a9e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	e001      	b.n	8004aa2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	4413      	add	r3, r2
 8004aae:	3384      	adds	r3, #132	; 0x84
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	01d2      	lsls	r2, r2, #7
 8004abc:	440a      	add	r2, r1
 8004abe:	3284      	adds	r2, #132	; 0x84
 8004ac0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	041a      	lsls	r2, r3, #16
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1acb      	subs	r3, r1, r3
 8004adc:	69f9      	ldr	r1, [r7, #28]
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	3307      	adds	r3, #7
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6809      	ldr	r1, [r1, #0]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	01c9      	lsls	r1, r1, #7
 8004aee:	4401      	add	r1, r0
 8004af0:	3184      	adds	r1, #132	; 0x84
 8004af2:	4313      	orrs	r3, r2
 8004af4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	4413      	add	r3, r2
 8004b02:	3384      	adds	r3, #132	; 0x84
 8004b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	440b      	add	r3, r1
 8004b12:	3384      	adds	r3, #132	; 0x84
 8004b14:	4619      	mov	r1, r3
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <LTDC_SetConfig+0x330>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	4413      	add	r3, r2
 8004b28:	3384      	adds	r3, #132	; 0x84
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3384      	adds	r3, #132	; 0x84
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	4611      	mov	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	01d2      	lsls	r2, r2, #7
 8004b4c:	440a      	add	r2, r1
 8004b4e:	3284      	adds	r2, #132	; 0x84
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6013      	str	r3, [r2, #0]
}
 8004b56:	bf00      	nop
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	fffff8f8 	.word	0xfffff8f8
 8004b68:	fffff800 	.word	0xfffff800

08004b6c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e049      	b.n	8004c16 <HAL_NOR_Init+0xaa>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7fd f9ce 	bl	8001f38 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f007 f87c 	bl	800bca4 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	f007 f8ec 	bl	800bd94 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6858      	ldr	r0, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	f007 f933 	bl	800be34 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	f041 0101 	orr.w	r1, r1, #1
 8004be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_NOR_Init+0xb4>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e002      	b.n	8004c00 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_NOR_Init+0xb4>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_NOR_Init+0xb8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <HAL_NOR_Init+0xb8>)
 8004c06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2400011c 	.word	0x2400011c
 8004c24:	52004000 	.word	0x52004000

08004c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2a:	b08f      	sub	sp, #60	; 0x3c
 8004c2c:	af0a      	add	r7, sp, #40	; 0x28
 8004c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e116      	b.n	8004e68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7fc ffc3 	bl	8001be0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f007 ff3d 	bl	800caf8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	687e      	ldr	r6, [r7, #4]
 8004c86:	466d      	mov	r5, sp
 8004c88:	f106 0410 	add.w	r4, r6, #16
 8004c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c9c:	1d33      	adds	r3, r6, #4
 8004c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ca0:	6838      	ldr	r0, [r7, #0]
 8004ca2:	f007 fec7 	bl	800ca34 <USB_CoreInit>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0d7      	b.n	8004e68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f007 ff2b 	bl	800cb1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e04a      	b.n	8004d60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	333d      	adds	r3, #61	; 0x3d
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	333c      	adds	r3, #60	; 0x3c
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	b298      	uxth	r0, r3
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3342      	adds	r3, #66	; 0x42
 8004d06:	4602      	mov	r2, r0
 8004d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	333f      	adds	r3, #63	; 0x3f
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3344      	adds	r3, #68	; 0x44
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3348      	adds	r3, #72	; 0x48
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3350      	adds	r3, #80	; 0x50
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d3af      	bcc.n	8004cca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	e044      	b.n	8004dfa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d86:	7bfa      	ldrb	r2, [r7, #15]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	3301      	adds	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3b5      	bcc.n	8004d70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	687e      	ldr	r6, [r7, #4]
 8004e0c:	466d      	mov	r5, sp
 8004e0e:	f106 0410 	add.w	r4, r6, #16
 8004e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e22:	1d33      	adds	r3, r6, #4
 8004e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e26:	6838      	ldr	r0, [r7, #0]
 8004e28:	f007 fea2 	bl	800cb70 <USB_DevInit>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e014      	b.n	8004e68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f80a 	bl	8004e70 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f008 f852 	bl	800cf0a <USB_DevDisconnect>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	10000003 	.word	0x10000003

08004eb8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8004ec0:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <HAL_PWREx_ConfigSupply+0x6c>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d008      	beq.n	8004ede <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ecc:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <HAL_PWREx_ConfigSupply+0x6c>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e01d      	b.n	8004f1a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_PWREx_ConfigSupply+0x6c>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	490f      	ldr	r1, [pc, #60]	; (8004f24 <HAL_PWREx_ConfigSupply+0x6c>)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eee:	f7fd f9fb 	bl	80022e8 <HAL_GetTick>
 8004ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004ef4:	e009      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004ef6:	f7fd f9f7 	bl	80022e8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f04:	d901      	bls.n	8004f0a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e007      	b.n	8004f1a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_PWREx_ConfigSupply+0x6c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d1ee      	bne.n	8004ef6 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	58024800 	.word	0x58024800

08004f28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f36:	60d3      	str	r3, [r2, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	58024800 	.word	0x58024800

08004f48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi: QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f50:	f7fd f9ca 	bl	80022e8 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e073      	b.n	8005048 <HAL_QSPI_Init+0x100>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_QSPI_Init+0x28>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e06b      	b.n	8005048 <HAL_QSPI_Init+0x100>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fc fc6f 	bl	8001870 <HAL_QSPI_MspInit>
#endif
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004f92:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f85e 	bl	8005058 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	021a      	lsls	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2120      	movs	r1, #32
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f856 	bl	8005074 <QSPI_WaitFlagStateUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d135      	bne.n	800503e <HAL_QSPI_Init+0xf6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_QSPI_Init+0x108>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6852      	ldr	r2, [r2, #4]
 8004fe0:	0611      	lsls	r1, r2, #24
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68d2      	ldr	r2, [r2, #12]
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	69d2      	ldr	r2, [r2, #28]
 8004fec:	4311      	orrs	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6a12      	ldr	r2, [r2, #32]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_QSPI_Init+0x10c>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	0411      	lsls	r1, r2, #16
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6952      	ldr	r2, [r2, #20]
 8005010:	4311      	orrs	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6992      	ldr	r2, [r2, #24]
 8005016:	4311      	orrs	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005046:	7afb      	ldrb	r3, [r7, #11]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	00ffff2f 	.word	0x00ffff2f
 8005054:	ffe0f8fe 	.word	0xffe0f8fe

08005058 <HAL_QSPI_SetTimeout>:
  * @param  hqspi: QSPI handle.
  * @param  Timeout: Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005084:	e01a      	b.n	80050bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d016      	beq.n	80050bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fd f92b 	bl	80022e8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2204      	movs	r2, #4
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b0:	f043 0201 	orr.w	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e00e      	b.n	80050da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1d6      	bne.n	8005086 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e3a4      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8087 	beq.w	8005212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005104:	4b9a      	ldr	r3, [pc, #616]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800510e:	4b98      	ldr	r3, [pc, #608]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	2b10      	cmp	r3, #16
 8005118:	d007      	beq.n	800512a <HAL_RCC_OscConfig+0x46>
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b18      	cmp	r3, #24
 800511e:	d110      	bne.n	8005142 <HAL_RCC_OscConfig+0x5e>
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d10b      	bne.n	8005142 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512a:	4b91      	ldr	r3, [pc, #580]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06c      	beq.n	8005210 <HAL_RCC_OscConfig+0x12c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d168      	bne.n	8005210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e37e      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x76>
 800514c:	4b88      	ldr	r3, [pc, #544]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a87      	ldr	r2, [pc, #540]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e02e      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x98>
 8005162:	4b83      	ldr	r3, [pc, #524]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a82      	ldr	r2, [pc, #520]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b80      	ldr	r3, [pc, #512]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7f      	ldr	r2, [pc, #508]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e01d      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0xbc>
 8005186:	4b7a      	ldr	r3, [pc, #488]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a79      	ldr	r2, [pc, #484]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b77      	ldr	r3, [pc, #476]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a76      	ldr	r2, [pc, #472]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 80051a0:	4b73      	ldr	r3, [pc, #460]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a72      	ldr	r2, [pc, #456]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b70      	ldr	r3, [pc, #448]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6f      	ldr	r2, [pc, #444]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd f892 	bl	80022e8 <HAL_GetTick>
 80051c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd f88e 	bl	80022e8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e332      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051da:	4b65      	ldr	r3, [pc, #404]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0xe4>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd f87e 	bl	80022e8 <HAL_GetTick>
 80051ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fd f87a 	bl	80022e8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e31e      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005202:	4b5b      	ldr	r3, [pc, #364]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x10c>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80b0 	beq.w	8005380 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005220:	4b53      	ldr	r3, [pc, #332]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005228:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800522a:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_RCC_OscConfig+0x162>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b18      	cmp	r3, #24
 800523a:	d149      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1ec>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d144      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_RCC_OscConfig+0x17a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e2f0      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800525e:	4b44      	ldr	r3, [pc, #272]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0219 	bic.w	r2, r3, #25
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4941      	ldr	r1, [pc, #260]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd f83a 	bl	80022e8 <HAL_GetTick>
 8005274:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005278:	f7fd f836 	bl	80022e8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e2da      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	f7fd f855 	bl	8002344 <HAL_GetREVID>
 800529a:	4602      	mov	r2, r0
 800529c:	f241 0303 	movw	r3, #4099	; 0x1003
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d80a      	bhi.n	80052ba <HAL_RCC_OscConfig+0x1d6>
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	492f      	ldr	r1, [pc, #188]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b8:	e062      	b.n	8005380 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	4929      	ldr	r1, [pc, #164]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	e057      	b.n	8005380 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d038      	beq.n	800534a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 0219 	bic.w	r2, r3, #25
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4922      	ldr	r1, [pc, #136]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fc fffd 	bl	80022e8 <HAL_GetTick>
 80052ee:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f2:	f7fc fff9 	bl	80022e8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e29d      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005310:	f7fd f818 	bl	8002344 <HAL_GetREVID>
 8005314:	4602      	mov	r2, r0
 8005316:	f241 0303 	movw	r3, #4099	; 0x1003
 800531a:	429a      	cmp	r2, r3
 800531c:	d80a      	bhi.n	8005334 <HAL_RCC_OscConfig+0x250>
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	031b      	lsls	r3, r3, #12
 800532c:	4910      	ldr	r1, [pc, #64]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
 8005332:	e025      	b.n	8005380 <HAL_RCC_OscConfig+0x29c>
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	490b      	ldr	r1, [pc, #44]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
 8005348:	e01a      	b.n	8005380 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <HAL_RCC_OscConfig+0x28c>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fc ffc7 	bl	80022e8 <HAL_GetTick>
 800535a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535e:	f7fc ffc3 	bl	80022e8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d903      	bls.n	8005374 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e267      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
 8005370:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005374:	4ba0      	ldr	r3, [pc, #640]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 808f 	beq.w	80054ac <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538e:	4b9a      	ldr	r3, [pc, #616]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005396:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005398:	4b97      	ldr	r3, [pc, #604]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d007      	beq.n	80053b4 <HAL_RCC_OscConfig+0x2d0>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b18      	cmp	r3, #24
 80053a8:	d12d      	bne.n	8005406 <HAL_RCC_OscConfig+0x322>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d128      	bne.n	8005406 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053b4:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_OscConfig+0x2e8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e239      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053cc:	f7fc ffba 	bl	8002344 <HAL_GetREVID>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d80a      	bhi.n	80053f0 <HAL_RCC_OscConfig+0x30c>
 80053da:	4b87      	ldr	r3, [pc, #540]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	069b      	lsls	r3, r3, #26
 80053e8:	4983      	ldr	r1, [pc, #524]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053ee:	e05d      	b.n	80054ac <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053f0:	4b81      	ldr	r3, [pc, #516]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	497e      	ldr	r1, [pc, #504]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005404:	e052      	b.n	80054ac <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d035      	beq.n	800547a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800540e:	4b7a      	ldr	r3, [pc, #488]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a79      	ldr	r2, [pc, #484]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fc ff65 	bl	80022e8 <HAL_GetTick>
 800541e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005422:	f7fc ff61 	bl	80022e8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e205      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005434:	4b70      	ldr	r3, [pc, #448]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005440:	f7fc ff80 	bl	8002344 <HAL_GetREVID>
 8005444:	4602      	mov	r2, r0
 8005446:	f241 0303 	movw	r3, #4099	; 0x1003
 800544a:	429a      	cmp	r2, r3
 800544c:	d80a      	bhi.n	8005464 <HAL_RCC_OscConfig+0x380>
 800544e:	4b6a      	ldr	r3, [pc, #424]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	069b      	lsls	r3, r3, #26
 800545c:	4966      	ldr	r1, [pc, #408]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
 8005462:	e023      	b.n	80054ac <HAL_RCC_OscConfig+0x3c8>
 8005464:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	4961      	ldr	r1, [pc, #388]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005474:	4313      	orrs	r3, r2
 8005476:	60cb      	str	r3, [r1, #12]
 8005478:	e018      	b.n	80054ac <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800547a:	4b5f      	ldr	r3, [pc, #380]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5e      	ldr	r2, [pc, #376]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fc ff2f 	bl	80022e8 <HAL_GetTick>
 800548a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800548e:	f7fc ff2b 	bl	80022e8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1cf      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054a0:	4b55      	ldr	r3, [pc, #340]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d036      	beq.n	8005526 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c0:	4b4d      	ldr	r3, [pc, #308]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c4:	4a4c      	ldr	r2, [pc, #304]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fc ff0c 	bl	80022e8 <HAL_GetTick>
 80054d0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d4:	f7fc ff08 	bl	80022e8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1ac      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054e6:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x3f0>
 80054f2:	e018      	b.n	8005526 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f4:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f8:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fc fef2 	bl	80022e8 <HAL_GetTick>
 8005504:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005508:	f7fc feee 	bl	80022e8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e192      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800551a:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d036      	beq.n	80055a0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d019      	beq.n	800556e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553a:	4b2f      	ldr	r3, [pc, #188]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005544:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005546:	f7fc fecf 	bl	80022e8 <HAL_GetTick>
 800554a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800554e:	f7fc fecb 	bl	80022e8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e16f      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005560:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x46a>
 800556c:	e018      	b.n	80055a0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005578:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800557a:	f7fc feb5 	bl	80022e8 <HAL_GetTick>
 800557e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005582:	f7fc feb1 	bl	80022e8 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e155      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005594:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8086 	beq.w	80056ba <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_OscConfig+0x518>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a12      	ldr	r2, [pc, #72]	; (80055fc <HAL_RCC_OscConfig+0x518>)
 80055b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055ba:	f7fc fe95 	bl	80022e8 <HAL_GetTick>
 80055be:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7fc fe91 	bl	80022e8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b64      	cmp	r3, #100	; 0x64
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e135      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCC_OscConfig+0x518>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10b      	bne.n	8005600 <HAL_RCC_OscConfig+0x51c>
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a02      	ldr	r2, [pc, #8]	; (80055f8 <HAL_RCC_OscConfig+0x514>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e032      	b.n	800565c <HAL_RCC_OscConfig+0x578>
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	58024800 	.word	0x58024800
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10c      	bne.n	8005622 <HAL_RCC_OscConfig+0x53e>
 8005608:	4b8f      	ldr	r3, [pc, #572]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	4a8e      	ldr	r2, [pc, #568]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	6713      	str	r3, [r2, #112]	; 0x70
 8005614:	4b8c      	ldr	r3, [pc, #560]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a8b      	ldr	r2, [pc, #556]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800561a:	f023 0304 	bic.w	r3, r3, #4
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	e01c      	b.n	800565c <HAL_RCC_OscConfig+0x578>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x560>
 800562a:	4b87      	ldr	r3, [pc, #540]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a86      	ldr	r2, [pc, #536]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	4b84      	ldr	r3, [pc, #528]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a83      	ldr	r2, [pc, #524]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0x578>
 8005644:	4b80      	ldr	r3, [pc, #512]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a7f      	ldr	r2, [pc, #508]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	4b7d      	ldr	r3, [pc, #500]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a7c      	ldr	r2, [pc, #496]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc fe40 	bl	80022e8 <HAL_GetTick>
 8005668:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800566a:	e00a      	b.n	8005682 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fc fe3c 	bl	80022e8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0de      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005682:	4b71      	ldr	r3, [pc, #452]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ee      	beq.n	800566c <HAL_RCC_OscConfig+0x588>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fc fe2a 	bl	80022e8 <HAL_GetTick>
 8005694:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fc fe26 	bl	80022e8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0c8      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056ae:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80bd 	beq.w	800583e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056cc:	2b18      	cmp	r3, #24
 80056ce:	f000 80b4 	beq.w	800583a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	f040 8095 	bne.w	8005806 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056dc:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a59      	ldr	r2, [pc, #356]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc fdfe 	bl	80022e8 <HAL_GetTick>
 80056ec:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc fdfa 	bl	80022e8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e09e      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005702:	4b51      	ldr	r3, [pc, #324]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005712:	4b4e      	ldr	r3, [pc, #312]	; (800584c <HAL_RCC_OscConfig+0x768>)
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800571e:	0112      	lsls	r2, r2, #4
 8005720:	430a      	orrs	r2, r1
 8005722:	4949      	ldr	r1, [pc, #292]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005724:	4313      	orrs	r3, r2
 8005726:	628b      	str	r3, [r1, #40]	; 0x28
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	3b01      	subs	r3, #1
 800572e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	3b01      	subs	r3, #1
 8005738:	025b      	lsls	r3, r3, #9
 800573a:	b29b      	uxth	r3, r3
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	3b01      	subs	r3, #1
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005758:	493b      	ldr	r1, [pc, #236]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800575a:	4313      	orrs	r3, r2
 800575c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800575e:	4b3a      	ldr	r3, [pc, #232]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a39      	ldr	r2, [pc, #228]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <HAL_RCC_OscConfig+0x76c>)
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005776:	00d2      	lsls	r2, r2, #3
 8005778:	4933      	ldr	r1, [pc, #204]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800577a:	4313      	orrs	r3, r2
 800577c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800577e:	4b32      	ldr	r3, [pc, #200]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	f023 020c 	bic.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	492f      	ldr	r1, [pc, #188]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800578c:	4313      	orrs	r3, r2
 800578e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	f023 0202 	bic.w	r2, r3, #2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	492a      	ldr	r1, [pc, #168]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057a2:	4b29      	ldr	r3, [pc, #164]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	4a28      	ldr	r2, [pc, #160]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ae:	4b26      	ldr	r3, [pc, #152]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	4a25      	ldr	r2, [pc, #148]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057ba:	4b23      	ldr	r3, [pc, #140]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a22      	ldr	r2, [pc, #136]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057c6:	4b20      	ldr	r3, [pc, #128]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d2:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fc fd83 	bl	80022e8 <HAL_GetTick>
 80057e2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fc fd7f 	bl	80022e8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e023      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x702>
 8005804:	e01b      	b.n	800583e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800580c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fc fd69 	bl	80022e8 <HAL_GetTick>
 8005816:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581a:	f7fc fd65 	bl	80022e8 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e009      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <HAL_RCC_OscConfig+0x764>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <HAL_RCC_OscConfig+0x736>
 8005838:	e001      	b.n	800583e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	58024400 	.word	0x58024400
 800584c:	fffffc0c 	.word	0xfffffc0c
 8005850:	ffff0007 	.word	0xffff0007

08005854 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e18d      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b8a      	ldr	r3, [pc, #552]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b87      	ldr	r3, [pc, #540]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	4985      	ldr	r1, [pc, #532]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e175      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d908      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4975      	ldr	r1, [pc, #468]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d010      	beq.n	80058f4 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058de:	429a      	cmp	r2, r3
 80058e0:	d908      	bls.n	80058f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058e2:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	496a      	ldr	r1, [pc, #424]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	4b64      	ldr	r3, [pc, #400]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800590c:	429a      	cmp	r2, r3
 800590e:	d908      	bls.n	8005922 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005910:	4b61      	ldr	r3, [pc, #388]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	495e      	ldr	r1, [pc, #376]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800591e:	4313      	orrs	r3, r2
 8005920:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800593a:	429a      	cmp	r2, r3
 800593c:	d908      	bls.n	8005950 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4953      	ldr	r1, [pc, #332]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800594c:	4313      	orrs	r3, r2
 800594e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d010      	beq.n	800597e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	429a      	cmp	r2, r3
 800596a:	d908      	bls.n	800597e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f023 020f 	bic.w	r2, r3, #15
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4947      	ldr	r1, [pc, #284]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800597a:	4313      	orrs	r3, r2
 800597c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d055      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800598a:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4940      	ldr	r1, [pc, #256]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005998:	4313      	orrs	r3, r2
 800599a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d107      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059a4:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d121      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0e7      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d115      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0db      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059d4:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0cf      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0c7      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f023 0207 	bic.w	r2, r3, #7
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4925      	ldr	r1, [pc, #148]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fc6f 	bl	80022e8 <HAL_GetTick>
 8005a0a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a0e:	f7fc fc6b 	bl	80022e8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0af      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d1eb      	bne.n	8005a0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d208      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f023 020f 	bic.w	r2, r3, #15
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	490e      	ldr	r1, [pc, #56]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d214      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 020f 	bic.w	r2, r3, #15
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e077      	b.n	8005b84 <HAL_RCC_ClockConfig+0x330>
 8005a94:	52002000 	.word	0x52002000
 8005a98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d208      	bcs.n	8005aca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab8:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4931      	ldr	r1, [pc, #196]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	4b2c      	ldr	r3, [pc, #176]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d208      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4926      	ldr	r1, [pc, #152]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d208      	bcs.n	8005b26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	491a      	ldr	r1, [pc, #104]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d208      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	490f      	ldr	r1, [pc, #60]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b54:	f000 f88c 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8005b58:	4601      	mov	r1, r0
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_RCC_ClockConfig+0x338>)
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <HAL_RCC_ClockConfig+0x33c>)
 8005b66:	5cd3      	ldrb	r3, [r2, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8005b70:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <HAL_RCC_ClockConfig+0x340>)
 8005b72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005b74:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <HAL_RCC_ClockConfig+0x344>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fc fb6b 	bl	8002254 <HAL_InitTick>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005b82:	7afb      	ldrb	r3, [r7, #11]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	0800d024 	.word	0x0800d024
 8005b94:	24000000 	.word	0x24000000
 8005b98:	24000008 	.word	0x24000008

08005b9c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	; 0x30
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d12a      	bne.n	8005c04 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005bae:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005bde:	2300      	movs	r3, #0
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005be2:	f107 031c 	add.w	r3, r7, #28
 8005be6:	4619      	mov	r1, r3
 8005be8:	481f      	ldr	r0, [pc, #124]	; (8005c68 <HAL_RCC_MCOConfig+0xcc>)
 8005bea:	f7fe fa25 	bl	8004038 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005bee:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	4919      	ldr	r1, [pc, #100]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005c02:	e02a      	b.n	8005c5a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005c04:	4b17      	ldr	r3, [pc, #92]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c0a:	4a16      	ldr	r2, [pc, #88]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005c0c:	f043 0304 	orr.w	r3, r3, #4
 8005c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c34:	2300      	movs	r3, #0
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c38:	f107 031c 	add.w	r3, r7, #28
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	480b      	ldr	r0, [pc, #44]	; (8005c6c <HAL_RCC_MCOConfig+0xd0>)
 8005c40:	f7fe f9fa 	bl	8004038 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01d9      	lsls	r1, r3, #7
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	430b      	orrs	r3, r1
 8005c54:	4903      	ldr	r1, [pc, #12]	; (8005c64 <HAL_RCC_MCOConfig+0xc8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	610b      	str	r3, [r1, #16]
}
 8005c5a:	bf00      	nop
 8005c5c:	3730      	adds	r7, #48	; 0x30
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	58020000 	.word	0x58020000
 8005c6c:	58020800 	.word	0x58020800

08005c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c76:	4baf      	ldr	r3, [pc, #700]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7e:	2b18      	cmp	r3, #24
 8005c80:	f200 814e 	bhi.w	8005f20 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005f21 	.word	0x08005f21
 8005c94:	08005f21 	.word	0x08005f21
 8005c98:	08005f21 	.word	0x08005f21
 8005c9c:	08005f21 	.word	0x08005f21
 8005ca0:	08005f21 	.word	0x08005f21
 8005ca4:	08005f21 	.word	0x08005f21
 8005ca8:	08005f21 	.word	0x08005f21
 8005cac:	08005d17 	.word	0x08005d17
 8005cb0:	08005f21 	.word	0x08005f21
 8005cb4:	08005f21 	.word	0x08005f21
 8005cb8:	08005f21 	.word	0x08005f21
 8005cbc:	08005f21 	.word	0x08005f21
 8005cc0:	08005f21 	.word	0x08005f21
 8005cc4:	08005f21 	.word	0x08005f21
 8005cc8:	08005f21 	.word	0x08005f21
 8005ccc:	08005d1d 	.word	0x08005d1d
 8005cd0:	08005f21 	.word	0x08005f21
 8005cd4:	08005f21 	.word	0x08005f21
 8005cd8:	08005f21 	.word	0x08005f21
 8005cdc:	08005f21 	.word	0x08005f21
 8005ce0:	08005f21 	.word	0x08005f21
 8005ce4:	08005f21 	.word	0x08005f21
 8005ce8:	08005f21 	.word	0x08005f21
 8005cec:	08005d23 	.word	0x08005d23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf0:	4b90      	ldr	r3, [pc, #576]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cfc:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	4a8c      	ldr	r2, [pc, #560]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d0e:	e10a      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d10:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d12:	61bb      	str	r3, [r7, #24]
    break;
 8005d14:	e107      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d16:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005d18:	61bb      	str	r3, [r7, #24]
    break;
 8005d1a:	e104      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d1c:	4b88      	ldr	r3, [pc, #544]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005d1e:	61bb      	str	r3, [r7, #24]
    break;
 8005d20:	e101      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d22:	4b84      	ldr	r3, [pc, #528]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d2c:	4b81      	ldr	r3, [pc, #516]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d38:	4b7e      	ldr	r3, [pc, #504]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d42:	4b7c      	ldr	r3, [pc, #496]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80da 	beq.w	8005f1a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d05a      	beq.n	8005e22 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d302      	bcc.n	8005d76 <HAL_RCC_GetSysClockFreq+0x106>
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d078      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005d74:	e099      	b.n	8005eaa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d76:	4b6f      	ldr	r3, [pc, #444]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d02d      	beq.n	8005dde <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d82:	4b6c      	ldr	r3, [pc, #432]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	08db      	lsrs	r3, r3, #3
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d92:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dac:	4b61      	ldr	r3, [pc, #388]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005ddc:	e087      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f48 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df0:	4b50      	ldr	r3, [pc, #320]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e00:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e04:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e20:	e065      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f4c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e34:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e48:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e64:	e043      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e70:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e78:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e88:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea8:	e021      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f4c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ecc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eec:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005eee:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	0a5b      	lsrs	r3, r3, #9
 8005ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef8:	3301      	adds	r3, #1
 8005efa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 3a90 	vmov	r3, s15
 8005f16:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f18:	e005      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
    break;
 8005f1e:	e002      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f22:	61bb      	str	r3, [r7, #24]
    break;
 8005f24:	bf00      	nop
  }

  return sysclockfreq;
 8005f26:	69bb      	ldr	r3, [r7, #24]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3724      	adds	r7, #36	; 0x24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	58024400 	.word	0x58024400
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	003d0900 	.word	0x003d0900
 8005f40:	017d7840 	.word	0x017d7840
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4bbebc20 	.word	0x4bbebc20

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f58:	f001 fd64 	bl	8007a24 <HAL_RCCEx_GetD1SysClockFreq>
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f68:	5cd3      	ldrb	r3, [r2, r3]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x34>)
 8005f74:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8005f76:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x34>)
 8005f78:	681b      	ldr	r3, [r3, #0]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400
 8005f84:	0800d024 	.word	0x0800d024
 8005f88:	24000004 	.word	0x24000004

08005f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f90:	f7ff ffe0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f94:	4601      	mov	r1, r0
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4a04      	ldr	r2, [pc, #16]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fa2:	5cd3      	ldrb	r3, [r2, r3]
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	0800d024 	.word	0x0800d024

08005fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fbc:	f7ff ffca 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	58024400 	.word	0x58024400
 8005fe0:	0800d024 	.word	0x0800d024

08005fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fec:	2300      	movs	r3, #0
 8005fee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d03d      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006008:	d013      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600e:	d802      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006014:	e01f      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601a:	d013      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800601c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006020:	d01c      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006022:	e018      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006024:	4baf      	ldr	r3, [pc, #700]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4aae      	ldr	r2, [pc, #696]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800602a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800602e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006030:	e015      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	2102      	movs	r1, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fd0f 	bl	8007a5c <RCCEx_PLL2_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006042:	e00c      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3324      	adds	r3, #36	; 0x24
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fdb8 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006054:	e003      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	75fb      	strb	r3, [r7, #23]
      break;
 800605a:	e000      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800605c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006064:	4b9f      	ldr	r3, [pc, #636]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006070:	499c      	ldr	r1, [pc, #624]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006072:	4313      	orrs	r3, r2
 8006074:	650b      	str	r3, [r1, #80]	; 0x50
 8006076:	e001      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03d      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	2b04      	cmp	r3, #4
 800608e:	d826      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060ad 	.word	0x080060ad
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060e5 	.word	0x080060e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ac:	4b8d      	ldr	r3, [pc, #564]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4a8c      	ldr	r2, [pc, #560]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fccb 	bl	8007a5c <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060ca:	e00c      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fd74 	bl	8007bc0 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	75fb      	strb	r3, [r7, #23]
      break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ec:	4b7d      	ldr	r3, [pc, #500]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	f023 0207 	bic.w	r2, r3, #7
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	497a      	ldr	r1, [pc, #488]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	650b      	str	r3, [r1, #80]	; 0x50
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610c:	2b00      	cmp	r3, #0
 800610e:	d03e      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d01c      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d804      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d00d      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006124:	e01e      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006126:	2bc0      	cmp	r3, #192	; 0xc0
 8006128:	d01f      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800612a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612e:	d01e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006130:	e018      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006132:	4b6c      	ldr	r3, [pc, #432]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800613e:	e017      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fc88 	bl	8007a5c <RCCEx_PLL2_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006150:	e00e      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3324      	adds	r3, #36	; 0x24
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f001 fd31 	bl	8007bc0 <RCCEx_PLL3_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006162:	e005      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
      break;
 8006168:	e002      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800616e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006176:	4b5b      	ldr	r3, [pc, #364]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	4958      	ldr	r1, [pc, #352]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006184:	4313      	orrs	r3, r2
 8006186:	650b      	str	r3, [r1, #80]	; 0x50
 8006188:	e001      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	2b00      	cmp	r3, #0
 8006198:	d044      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a4:	d01f      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80061a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061aa:	d805      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061b4:	d00e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80061b6:	e01f      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80061b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061bc:	d01f      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80061be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c2:	d01e      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061c4:	e018      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c6:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4a46      	ldr	r2, [pc, #280]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061d2:	e017      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fc3e 	bl	8007a5c <RCCEx_PLL2_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80061e4:	e00e      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3324      	adds	r3, #36	; 0x24
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fce7 	bl	8007bc0 <RCCEx_PLL3_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f6:	e005      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	e002      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80061fe:	bf00      	nop
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800620a:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006218:	4932      	ldr	r1, [pc, #200]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800621a:	4313      	orrs	r3, r2
 800621c:	658b      	str	r3, [r1, #88]	; 0x58
 800621e:	e001      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622c:	2b00      	cmp	r3, #0
 800622e:	d044      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800623a:	d01f      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800623c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006240:	d805      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800624a:	d00e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800624c:	e01f      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800624e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006252:	d01f      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006258:	d01e      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800625a:	e018      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006268:	e017      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3304      	adds	r3, #4
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fbf3 	bl	8007a5c <RCCEx_PLL2_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800627a:	e00e      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3324      	adds	r3, #36	; 0x24
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fc9c 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800628c:	e005      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
      break;
 8006292:	e002      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062a0:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062ae:	490d      	ldr	r1, [pc, #52]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	658b      	str	r3, [r1, #88]	; 0x58
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d035      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d00c      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d802      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01b      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80062d6:	e017      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d00c      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d018      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80062e0:	e012      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e8:	4baf      	ldr	r3, [pc, #700]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4aae      	ldr	r2, [pc, #696]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062f4:	e00e      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	2102      	movs	r1, #2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fbad 	bl	8007a5c <RCCEx_PLL2_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006306:	e005      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
      break;
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800631a:	4ba3      	ldr	r3, [pc, #652]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	49a0      	ldr	r1, [pc, #640]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006328:	4313      	orrs	r3, r2
 800632a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800632c:	e001      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d042      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006346:	d01f      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d805      	bhi.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	d00e      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006358:	e01f      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800635a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800635e:	d01f      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006364:	d01e      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006366:	e018      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006368:	4b8f      	ldr	r3, [pc, #572]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a8e      	ldr	r2, [pc, #568]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006374:	e017      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fb6d 	bl	8007a5c <RCCEx_PLL2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006386:	e00e      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fc16 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063ac:	4b7e      	ldr	r3, [pc, #504]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	497b      	ldr	r1, [pc, #492]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	650b      	str	r3, [r1, #80]	; 0x50
 80063be:	e001      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d042      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d8:	d01b      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80063da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063de:	d805      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d022      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063ea:	e01b      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80063ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063f0:	d01d      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80063f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f6:	d01c      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80063f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063fc:	d01b      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80063fe:	e011      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	2101      	movs	r1, #1
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fb28 	bl	8007a5c <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006410:	e012      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	2101      	movs	r1, #1
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fbd1 	bl	8007bc0 <RCCEx_PLL3_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006422:	e009      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
      break;
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800642a:	bf00      	nop
 800642c:	e004      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800643e:	4b5a      	ldr	r3, [pc, #360]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644a:	4957      	ldr	r1, [pc, #348]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800644c:	4313      	orrs	r3, r2
 800644e:	650b      	str	r3, [r1, #80]	; 0x50
 8006450:	e001      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d044      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800646c:	d01b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800646e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006472:	d805      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d022      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800647e:	e01b      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d01d      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800648a:	d01c      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800648c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006490:	d01b      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006492:	e011      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3304      	adds	r3, #4
 8006498:	2101      	movs	r1, #1
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fade 	bl	8007a5c <RCCEx_PLL2_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064a4:	e012      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3324      	adds	r3, #36	; 0x24
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fb87 	bl	8007bc0 <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064b6:	e009      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
      break;
 80064bc:	e006      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064be:	bf00      	nop
 80064c0:	e004      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064d2:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064e0:	4931      	ldr	r1, [pc, #196]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	658b      	str	r3, [r1, #88]	; 0x58
 80064e6:	e001      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d02d      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006500:	d005      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006506:	d009      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800651a:	e00c      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fa9a 	bl	8007a5c <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800653c:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800653e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006540:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	4917      	ldr	r1, [pc, #92]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	650b      	str	r3, [r1, #80]	; 0x50
 800654e:	e001      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d035      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006564:	2b03      	cmp	r3, #3
 8006566:	d81b      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006568:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	080065ad 	.word	0x080065ad
 8006574:	08006581 	.word	0x08006581
 8006578:	0800658f 	.word	0x0800658f
 800657c:	080065ad 	.word	0x080065ad
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800658c:	e00f      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fa61 	bl	8007a5c <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800659e:	e006      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
      break;
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
      break;
 80065ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065b4:	4bba      	ldr	r3, [pc, #744]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	f023 0203 	bic.w	r2, r3, #3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	49b7      	ldr	r1, [pc, #732]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065c6:	e001      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8086 	beq.w	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065da:	4bb2      	ldr	r3, [pc, #712]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4ab1      	ldr	r2, [pc, #708]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065e6:	f7fb fe7f 	bl	80022e8 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ec:	e009      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ee:	f7fb fe7b 	bl	80022e8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b64      	cmp	r3, #100	; 0x64
 80065fa:	d902      	bls.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006600:	e005      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006602:	4ba8      	ldr	r3, [pc, #672]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0ef      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d166      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006614:	4ba2      	ldr	r3, [pc, #648]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800661e:	4053      	eors	r3, r2
 8006620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006624:	2b00      	cmp	r3, #0
 8006626:	d013      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006628:	4b9d      	ldr	r3, [pc, #628]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b9b      	ldr	r3, [pc, #620]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a9a      	ldr	r2, [pc, #616]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800663e:	4b98      	ldr	r3, [pc, #608]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	4a97      	ldr	r2, [pc, #604]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006648:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800664a:	4a95      	ldr	r2, [pc, #596]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d115      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fb fe44 	bl	80022e8 <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006662:	e00b      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006664:	f7fb fe40 	bl	80022e8 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d902      	bls.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	75fb      	strb	r3, [r7, #23]
            break;
 800667a:	e005      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800667c:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ed      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d126      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669c:	d10d      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800669e:	4b80      	ldr	r3, [pc, #512]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ac:	0919      	lsrs	r1, r3, #4
 80066ae:	4b7e      	ldr	r3, [pc, #504]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80066b0:	400b      	ands	r3, r1
 80066b2:	497b      	ldr	r1, [pc, #492]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	610b      	str	r3, [r1, #16]
 80066b8:	e005      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80066ba:	4b79      	ldr	r3, [pc, #484]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	4a78      	ldr	r2, [pc, #480]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066c4:	6113      	str	r3, [r2, #16]
 80066c6:	4b76      	ldr	r3, [pc, #472]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d4:	4972      	ldr	r1, [pc, #456]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	670b      	str	r3, [r1, #112]	; 0x70
 80066da:	e004      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	75bb      	strb	r3, [r7, #22]
 80066e0:	e001      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d07d      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066f6:	2b28      	cmp	r3, #40	; 0x28
 80066f8:	d866      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	080067cf 	.word	0x080067cf
 8006704:	080067c9 	.word	0x080067c9
 8006708:	080067c9 	.word	0x080067c9
 800670c:	080067c9 	.word	0x080067c9
 8006710:	080067c9 	.word	0x080067c9
 8006714:	080067c9 	.word	0x080067c9
 8006718:	080067c9 	.word	0x080067c9
 800671c:	080067c9 	.word	0x080067c9
 8006720:	080067a5 	.word	0x080067a5
 8006724:	080067c9 	.word	0x080067c9
 8006728:	080067c9 	.word	0x080067c9
 800672c:	080067c9 	.word	0x080067c9
 8006730:	080067c9 	.word	0x080067c9
 8006734:	080067c9 	.word	0x080067c9
 8006738:	080067c9 	.word	0x080067c9
 800673c:	080067c9 	.word	0x080067c9
 8006740:	080067b7 	.word	0x080067b7
 8006744:	080067c9 	.word	0x080067c9
 8006748:	080067c9 	.word	0x080067c9
 800674c:	080067c9 	.word	0x080067c9
 8006750:	080067c9 	.word	0x080067c9
 8006754:	080067c9 	.word	0x080067c9
 8006758:	080067c9 	.word	0x080067c9
 800675c:	080067c9 	.word	0x080067c9
 8006760:	080067cf 	.word	0x080067cf
 8006764:	080067c9 	.word	0x080067c9
 8006768:	080067c9 	.word	0x080067c9
 800676c:	080067c9 	.word	0x080067c9
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067c9 	.word	0x080067c9
 8006778:	080067c9 	.word	0x080067c9
 800677c:	080067c9 	.word	0x080067c9
 8006780:	080067cf 	.word	0x080067cf
 8006784:	080067c9 	.word	0x080067c9
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067c9 	.word	0x080067c9
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067cf 	.word	0x080067cf
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f956 	bl	8007a5c <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067b4:	e00c      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f9ff 	bl	8007bc0 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80067ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067d6:	4b32      	ldr	r3, [pc, #200]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e2:	492f      	ldr	r1, [pc, #188]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	654b      	str	r3, [r1, #84]	; 0x54
 80067e8:	e001      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d037      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d820      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800684b 	.word	0x0800684b
 800680c:	08006821 	.word	0x08006821
 8006810:	08006833 	.word	0x08006833
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800684b 	.word	0x0800684b
 800681c:	0800684b 	.word	0x0800684b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f918 	bl	8007a5c <RCCEx_PLL2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006830:	e00c      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3324      	adds	r3, #36	; 0x24
 8006836:	2101      	movs	r1, #1
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f9c1 	bl	8007bc0 <RCCEx_PLL3_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006842:	e003      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	75fb      	strb	r3, [r7, #23]
      break;
 8006848:	e000      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800684a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	f023 0207 	bic.w	r2, r3, #7
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685e:	4910      	ldr	r1, [pc, #64]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	654b      	str	r3, [r1, #84]	; 0x54
 8006864:	e001      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d040      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	2b05      	cmp	r3, #5
 800687e:	d827      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068d7 	.word	0x080068d7
 800688c:	080068ad 	.word	0x080068ad
 8006890:	080068bf 	.word	0x080068bf
 8006894:	080068d7 	.word	0x080068d7
 8006898:	080068d7 	.word	0x080068d7
 800689c:	080068d7 	.word	0x080068d7
 80068a0:	58024400 	.word	0x58024400
 80068a4:	58024800 	.word	0x58024800
 80068a8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f8d2 	bl	8007a5c <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068bc:	e00c      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3324      	adds	r3, #36	; 0x24
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f97b 	bl	8007bc0 <RCCEx_PLL3_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      break;
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80068d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068de:	4bb3      	ldr	r3, [pc, #716]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	f023 0207 	bic.w	r2, r3, #7
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	49af      	ldr	r1, [pc, #700]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	658b      	str	r3, [r1, #88]	; 0x58
 80068f2:	e001      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d044      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690e:	d01b      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006914:	d805      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d022      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800691a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006920:	e01b      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006926:	d01d      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800692c:	d01c      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800692e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006932:	d01b      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006934:	e011      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3304      	adds	r3, #4
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f88d 	bl	8007a5c <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006946:	e012      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3324      	adds	r3, #36	; 0x24
 800694c:	2102      	movs	r1, #2
 800694e:	4618      	mov	r0, r3
 8006950:	f001 f936 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006958:	e009      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      break;
 800695e:	e006      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006960:	bf00      	nop
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006964:	bf00      	nop
 8006966:	e002      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800696c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006974:	4b8d      	ldr	r3, [pc, #564]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006982:	498a      	ldr	r1, [pc, #552]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	654b      	str	r3, [r1, #84]	; 0x54
 8006988:	e001      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d044      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a4:	d01b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069aa:	d805      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d022      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d00a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80069b6:	e01b      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80069b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069bc:	d01d      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80069be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069c2:	d01c      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80069c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c8:	d01b      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80069ca:	e011      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3304      	adds	r3, #4
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f842 	bl	8007a5c <RCCEx_PLL2_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069dc:	e012      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3324      	adds	r3, #36	; 0x24
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f8eb 	bl	8007bc0 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069ee:	e009      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	e006      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069f6:	bf00      	nop
 80069f8:	e004      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069fa:	bf00      	nop
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a0a:	4b68      	ldr	r3, [pc, #416]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a18:	4964      	ldr	r1, [pc, #400]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a1e:	e001      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d044      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3a:	d01b      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a40:	d805      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d022      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	d00a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a4c:	e01b      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a52:	d01d      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a58:	d01c      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006a5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a5e:	d01b      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006a60:	e011      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fff7 	bl	8007a5c <RCCEx_PLL2_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a72:	e012      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3324      	adds	r3, #36	; 0x24
 8006a78:	2102      	movs	r1, #2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 f8a0 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a84:	e009      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8a:	e006      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006aa0:	4b42      	ldr	r3, [pc, #264]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aae:	493f      	ldr	r1, [pc, #252]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ab4:	e001      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d01b      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	d10b      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3324      	adds	r3, #36	; 0x24
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f871 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	75bb      	strb	r3, [r7, #22]
 8006ae8:	e009      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006aea:	4b30      	ldr	r3, [pc, #192]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af8:	492c      	ldr	r1, [pc, #176]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01b      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d10b      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f84f 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75bb      	strb	r3, [r7, #22]
 8006b2c:	e009      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3c:	491b      	ldr	r1, [pc, #108]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d032      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d00d      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5e:	d016      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d111      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 ff76 	bl	8007a5c <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b74:	e00c      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3324      	adds	r3, #36	; 0x24
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f81f 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b86:	e003      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8c:	e000      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8006b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ba4:	4901      	ldr	r1, [pc, #4]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8006bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d02f      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bca:	d00c      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bd0:	d015      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd6:	d10f      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a78      	ldr	r2, [pc, #480]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006be4:	e00c      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3324      	adds	r3, #36	; 0x24
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ffe7 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	e000      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c06:	4b6e      	ldr	r3, [pc, #440]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c14:	496a      	ldr	r1, [pc, #424]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	654b      	str	r3, [r1, #84]	; 0x54
 8006c1a:	e001      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d029      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d007      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c3c:	4b60      	ldr	r3, [pc, #384]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a5f      	ldr	r2, [pc, #380]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c48:	e00b      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 ff03 	bl	8007a5c <RCCEx_PLL2_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c5a:	e002      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c68:	4b55      	ldr	r3, [pc, #340]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c74:	4952      	ldr	r1, [pc, #328]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c7a:	e001      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3324      	adds	r3, #36	; 0x24
 8006c90:	2102      	movs	r1, #2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ff94 	bl	8007bc0 <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02f      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb6:	d00c      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	d802      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d011      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006cc2:	e00d      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc8:	d00f      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cce:	d00e      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8006cd0:	e006      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd2:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	4a3a      	ldr	r2, [pc, #232]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cde:	e007      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce4:	e004      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cf6:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d02:	492f      	ldr	r1, [pc, #188]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	654b      	str	r3, [r1, #84]	; 0x54
 8006d08:	e001      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4926      	ldr	r1, [pc, #152]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d38:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d46:	491e      	ldr	r1, [pc, #120]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d64:	4916      	ldr	r1, [pc, #88]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d76:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d80:	6113      	str	r3, [r2, #16]
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d8c:	490c      	ldr	r1, [pc, #48]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da08      	bge.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	4906      	ldr	r1, [pc, #24]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006dac:	7dbb      	ldrb	r3, [r7, #22]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	58024400 	.word	0x58024400

08006dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b090      	sub	sp, #64	; 0x40
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd2:	d150      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006dd4:	4ba1      	ldr	r3, [pc, #644]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d844      	bhi.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e01 	.word	0x08006e01
 8006df0:	08006e11 	.word	0x08006e11
 8006df4:	08006e21 	.word	0x08006e21
 8006df8:	08006e69 	.word	0x08006e69
 8006dfc:	08006e31 	.word	0x08006e31
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fcc1 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0e:	e200      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e10:	f107 0318 	add.w	r3, r7, #24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fa21 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e1e:	e1f8      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fb65 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2e:	e1f0      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e30:	4b8a      	ldr	r3, [pc, #552]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e40:	4b87      	ldr	r3, [pc, #540]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e44:	e1e5      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e4c:	d102      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006e4e:	4b85      	ldr	r3, [pc, #532]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e52:	e1de      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006e5c:	4b82      	ldr	r3, [pc, #520]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e60:	e1d7      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e66:	e1d4      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e68:	4b80      	ldr	r3, [pc, #512]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e6c:	e1d1      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e72:	bf00      	nop
 8006e74:	e1cd      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7c:	d14f      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006e7e:	4b77      	ldr	r3, [pc, #476]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d01c      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d804      	bhi.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d008      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d00e      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006e9a:	e03c      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006e9c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e9e:	d037      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d018      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006ea6:	e036      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fc6d 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb6:	e1ac      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb8:	f107 0318 	add.w	r3, r7, #24
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f9cd 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec6:	e1a4      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb11 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed6:	e19c      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ed8:	4b60      	ldr	r3, [pc, #384]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ee8:	4b5d      	ldr	r3, [pc, #372]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006eec:	e191      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef4:	d102      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006ef6:	4b5b      	ldr	r3, [pc, #364]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efa:	e18a      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f02:	d102      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006f04:	4b58      	ldr	r3, [pc, #352]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f08:	e183      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0e:	e180      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f10:	4b56      	ldr	r3, [pc, #344]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f14:	e17d      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f1a:	bf00      	nop
 8006f1c:	e179      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f24:	d153      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f26:	4b4d      	ldr	r3, [pc, #308]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f36:	d01f      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f3c:	d805      	bhi.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f46:	d00f      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006f48:	e03d      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f4e:	d037      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f54:	d018      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006f56:	e036      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fc15 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f66:	e154      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f68:	f107 0318 	add.w	r3, r7, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f975 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f76:	e14c      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fab9 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f86:	e144      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f88:	4b34      	ldr	r3, [pc, #208]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f98:	4b31      	ldr	r3, [pc, #196]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f9c:	e139      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa4:	d102      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006fa6:	4b2f      	ldr	r3, [pc, #188]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006faa:	e132      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb2:	d102      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb8:	e12b      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fbe:	e128      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fc0:	4b2a      	ldr	r3, [pc, #168]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc4:	e125      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fca:	bf00      	nop
 8006fcc:	e121      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd4:	d15d      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006fd6:	4b21      	ldr	r3, [pc, #132]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe6:	d01f      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fec:	d805      	bhi.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ff6:	d00f      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006ff8:	e047      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ffe:	d041      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007004:	d018      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007006:	e040      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fbbd 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007016:	e0fc      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007018:	f107 0318 	add.w	r3, r7, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f91d 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007026:	e0f4      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fa61 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007036:	e0ec      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007038:	4b08      	ldr	r3, [pc, #32]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007040:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800704c:	e0e1      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007054:	d10c      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800705a:	e0da      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800705c:	58024400 	.word	0x58024400
 8007060:	03d09000 	.word	0x03d09000
 8007064:	003d0900 	.word	0x003d0900
 8007068:	017d7840 	.word	0x017d7840
 800706c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007078:	4b68      	ldr	r3, [pc, #416]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707c:	e0c9      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007082:	e0c6      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007084:	4b66      	ldr	r3, [pc, #408]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007088:	e0c3      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708e:	bf00      	nop
 8007090:	e0bf      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007098:	d153      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800709a:	4b62      	ldr	r3, [pc, #392]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800709c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	d01f      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b0:	d805      	bhi.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d00f      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80070bc:	e03d      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80070be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070c2:	d037      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c8:	d018      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80070ca:	e036      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fb5b 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	e09a      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070dc:	f107 0318 	add.w	r3, r7, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f8bb 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ea:	e092      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f9ff 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fa:	e08a      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070fc:	4b49      	ldr	r3, [pc, #292]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007104:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800710c:	4b46      	ldr	r3, [pc, #280]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007110:	e07f      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007118:	d102      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800711a:	4b44      	ldr	r3, [pc, #272]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711e:	e078      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007126:	d102      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007128:	4b3c      	ldr	r3, [pc, #240]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712c:	e071      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007132:	e06e      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007134:	4b3a      	ldr	r3, [pc, #232]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007138:	e06b      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713e:	bf00      	nop
 8007140:	e067      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007148:	d13d      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800714a:	4b36      	ldr	r3, [pc, #216]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007152:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715a:	d00c      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800715c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007160:	d011      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d12b      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007166:	f107 0318 	add.w	r3, r7, #24
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f876 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007174:	e04d      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f9ba 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e045      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800718e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007196:	4b24      	ldr	r3, [pc, #144]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800719a:	e03a      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071a2:	d102      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80071a4:	4b21      	ldr	r3, [pc, #132]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a8:	e033      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b0:	d102      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80071b2:	4b1a      	ldr	r3, [pc, #104]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	e02c      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071bc:	e029      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c2:	bf00      	nop
 80071c4:	e025      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d11f      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80071de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e2:	d008      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80071e4:	e00f      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 face 	bl	800778c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f4:	e00d      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f6:	f107 0318 	add.w	r3, r7, #24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f82e 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007204:	e005      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800720a:	bf00      	nop
 800720c:	e001      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007214:	4618      	mov	r0, r3
 8007216:	3740      	adds	r7, #64	; 0x40
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	017d7840 	.word	0x017d7840
 8007220:	00bb8000 	.word	0x00bb8000
 8007224:	58024400 	.word	0x58024400
 8007228:	03d09000 	.word	0x03d09000
 800722c:	003d0900 	.word	0x003d0900

08007230 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007234:	f7fe fe8e 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8007238:	4601      	mov	r1, r0
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007246:	5cd3      	ldrb	r3, [r2, r3]
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	58024400 	.word	0x58024400
 8007258:	0800d024 	.word	0x0800d024

0800725c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007264:	4b9d      	ldr	r3, [pc, #628]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800726e:	4b9b      	ldr	r3, [pc, #620]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	0b1b      	lsrs	r3, r3, #12
 8007274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007278:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800727a:	4b98      	ldr	r3, [pc, #608]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007284:	4b95      	ldr	r3, [pc, #596]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	08db      	lsrs	r3, r3, #3
 800728a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	fb02 f303 	mul.w	r3, r2, r3
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 810a 	beq.w	80074bc <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d05a      	beq.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d302      	bcc.n	80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d078      	beq.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80072b6:	e099      	b.n	80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02d      	beq.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072c4:	4b85      	ldr	r3, [pc, #532]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	4a84      	ldr	r2, [pc, #528]	; (80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800731e:	e087      	b.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b6a      	ldr	r3, [pc, #424]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a03 	vldr	s12, [r7, #12]
 8007346:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007362:	e065      	b.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b59      	ldr	r3, [pc, #356]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a03 	vldr	s12, [r7, #12]
 800738a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073a6:	e043      	b.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ba:	4b48      	ldr	r3, [pc, #288]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ea:	e021      	b.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b37      	ldr	r3, [pc, #220]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800742e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007430:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	0a5b      	lsrs	r3, r3, #9
 8007436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744a:	edd7 6a07 	vldr	s13, [r7, #28]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007456:	ee17 2a90 	vmov	r2, s15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800745e:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007478:	edd7 6a07 	vldr	s13, [r7, #28]
 800747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 2a90 	vmov	r2, s15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b2:	ee17 2a90 	vmov	r2, s15
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ba:	e008      	b.n	80074ce <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	03d09000 	.word	0x03d09000
 80074e4:	46000000 	.word	0x46000000
 80074e8:	4c742400 	.word	0x4c742400
 80074ec:	4a742400 	.word	0x4a742400
 80074f0:	4bbebc20 	.word	0x4bbebc20

080074f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074fc:	4b9d      	ldr	r3, [pc, #628]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007506:	4b9b      	ldr	r3, [pc, #620]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	0d1b      	lsrs	r3, r3, #20
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007512:	4b98      	ldr	r3, [pc, #608]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800751c:	4b95      	ldr	r3, [pc, #596]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	08db      	lsrs	r3, r3, #3
 8007522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 810a 	beq.w	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d05a      	beq.n	80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007546:	2b01      	cmp	r3, #1
 8007548:	d302      	bcc.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800754a:	2b02      	cmp	r3, #2
 800754c:	d078      	beq.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800754e:	e099      	b.n	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007550:	4b88      	ldr	r3, [pc, #544]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d02d      	beq.n	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800755c:	4b85      	ldr	r3, [pc, #532]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	4a84      	ldr	r2, [pc, #528]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
 800756c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b7b      	ldr	r3, [pc, #492]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a03 	vldr	s12, [r7, #12]
 800759a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075b6:	e087      	b.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b6a      	ldr	r3, [pc, #424]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a03 	vldr	s12, [r7, #12]
 80075de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075fa:	e065      	b.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b59      	ldr	r3, [pc, #356]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007622:	eddf 5a56 	vldr	s11, [pc, #344]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800763e:	e043      	b.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b48      	ldr	r3, [pc, #288]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a03 	vldr	s12, [r7, #12]
 8007666:	eddf 5a45 	vldr	s11, [pc, #276]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007682:	e021      	b.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b37      	ldr	r3, [pc, #220]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076c8:	4b2a      	ldr	r3, [pc, #168]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	0a5b      	lsrs	r3, r3, #9
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ee:	ee17 2a90 	vmov	r2, s15
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076f6:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800770c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007710:	edd7 6a07 	vldr	s13, [r7, #28]
 8007714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800771c:	ee17 2a90 	vmov	r2, s15
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007724:	4b13      	ldr	r3, [pc, #76]	; (8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	0e1b      	lsrs	r3, r3, #24
 800772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800773a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800773e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800774a:	ee17 2a90 	vmov	r2, s15
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007752:	e008      	b.n	8007766 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	609a      	str	r2, [r3, #8]
}
 8007766:	bf00      	nop
 8007768:	3724      	adds	r7, #36	; 0x24
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	58024400 	.word	0x58024400
 8007778:	03d09000 	.word	0x03d09000
 800777c:	46000000 	.word	0x46000000
 8007780:	4c742400 	.word	0x4c742400
 8007784:	4a742400 	.word	0x4a742400
 8007788:	4bbebc20 	.word	0x4bbebc20

0800778c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007794:	4b9d      	ldr	r3, [pc, #628]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800779e:	4b9b      	ldr	r3, [pc, #620]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	091b      	lsrs	r3, r3, #4
 80077a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077aa:	4b98      	ldr	r3, [pc, #608]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077b4:	4b95      	ldr	r3, [pc, #596]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	08db      	lsrs	r3, r3, #3
 80077ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	fb02 f303 	mul.w	r3, r2, r3
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 810a 	beq.w	80079ec <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d05a      	beq.n	8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d302      	bcc.n	80077e8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d078      	beq.n	80078d8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80077e6:	e099      	b.n	800791c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e8:	4b88      	ldr	r3, [pc, #544]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02d      	beq.n	8007850 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077f4:	4b85      	ldr	r3, [pc, #532]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	4a84      	ldr	r2, [pc, #528]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b7b      	ldr	r3, [pc, #492]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007832:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800784e:	e087      	b.n	8007960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800785e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007862:	4b6a      	ldr	r3, [pc, #424]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	ed97 6a03 	vldr	s12, [r7, #12]
 8007876:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800787a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007892:	e065      	b.n	8007960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078d6:	e043      	b.n	8007960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b48      	ldr	r3, [pc, #288]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800791a:	e021      	b.n	8007960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800795e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007960:	4b2a      	ldr	r3, [pc, #168]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797a:	edd7 6a07 	vldr	s13, [r7, #28]
 800797e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007986:	ee17 2a90 	vmov	r2, s15
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800798e:	4b1f      	ldr	r3, [pc, #124]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	0c1b      	lsrs	r3, r3, #16
 8007994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b4:	ee17 2a90 	vmov	r2, s15
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	0e1b      	lsrs	r3, r3, #24
 80079c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 2a90 	vmov	r2, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079ea:	e008      	b.n	80079fe <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
}
 80079fe:	bf00      	nop
 8007a00:	3724      	adds	r7, #36	; 0x24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	03d09000 	.word	0x03d09000
 8007a14:	46000000 	.word	0x46000000
 8007a18:	4c742400 	.word	0x4c742400
 8007a1c:	4a742400 	.word	0x4a742400
 8007a20:	4bbebc20 	.word	0x4bbebc20

08007a24 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a28:	f7fe f922 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	4a06      	ldr	r2, [pc, #24]	; (8007a54 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	fa21 f303 	lsr.w	r3, r1, r3
 8007a44:	4a04      	ldr	r2, [pc, #16]	; (8007a58 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007a46:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007a48:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	58024400 	.word	0x58024400
 8007a54:	0800d024 	.word	0x0800d024
 8007a58:	24000000 	.word	0x24000000

08007a5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a6a:	4b53      	ldr	r3, [pc, #332]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d101      	bne.n	8007a7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e099      	b.n	8007bae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4e      	ldr	r2, [pc, #312]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007a80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a86:	f7fa fc2f 	bl	80022e8 <HAL_GetTick>
 8007a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a8c:	e008      	b.n	8007aa0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a8e:	f7fa fc2b 	bl	80022e8 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e086      	b.n	8007bae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aa0:	4b45      	ldr	r3, [pc, #276]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007aac:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	493f      	ldr	r1, [pc, #252]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	628b      	str	r3, [r1, #40]	; 0x28
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	061b      	lsls	r3, r3, #24
 8007aec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007af0:	4931      	ldr	r1, [pc, #196]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007af6:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	492d      	ldr	r1, [pc, #180]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	f023 0220 	bic.w	r2, r3, #32
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	4928      	ldr	r1, [pc, #160]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b1a:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a26      	ldr	r2, [pc, #152]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b20:	f023 0310 	bic.w	r3, r3, #16
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b2a:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <RCCEx_PLL2_Config+0x160>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	69d2      	ldr	r2, [r2, #28]
 8007b32:	00d2      	lsls	r2, r2, #3
 8007b34:	4920      	ldr	r1, [pc, #128]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b3a:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f043 0310 	orr.w	r3, r3, #16
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b58:	e00f      	b.n	8007b7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d106      	bne.n	8007b6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b60:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b6c:	e005      	b.n	8007b7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a11      	ldr	r2, [pc, #68]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b86:	f7fa fbaf 	bl	80022e8 <HAL_GetTick>
 8007b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b8c:	e008      	b.n	8007ba0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b8e:	f7fa fbab 	bl	80022e8 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e006      	b.n	8007bae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0f0      	beq.n	8007b8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	ffff0007 	.word	0xffff0007

08007bc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bce:	4b53      	ldr	r3, [pc, #332]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d101      	bne.n	8007bde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e099      	b.n	8007d12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bde:	4b4f      	ldr	r3, [pc, #316]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a4e      	ldr	r2, [pc, #312]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bea:	f7fa fb7d 	bl	80022e8 <HAL_GetTick>
 8007bee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bf0:	e008      	b.n	8007c04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bf2:	f7fa fb79 	bl	80022e8 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e086      	b.n	8007d12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c04:	4b45      	ldr	r3, [pc, #276]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f0      	bne.n	8007bf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c10:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	051b      	lsls	r3, r3, #20
 8007c1e:	493f      	ldr	r1, [pc, #252]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	628b      	str	r3, [r1, #40]	; 0x28
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	025b      	lsls	r3, r3, #9
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	061b      	lsls	r3, r3, #24
 8007c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c54:	4931      	ldr	r1, [pc, #196]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c5a:	4b30      	ldr	r3, [pc, #192]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	492d      	ldr	r1, [pc, #180]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	4928      	ldr	r1, [pc, #160]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c7e:	4b27      	ldr	r3, [pc, #156]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	4a26      	ldr	r2, [pc, #152]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c8e:	4b24      	ldr	r3, [pc, #144]	; (8007d20 <RCCEx_PLL3_Config+0x160>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	69d2      	ldr	r2, [r2, #28]
 8007c96:	00d2      	lsls	r2, r2, #3
 8007c98:	4920      	ldr	r1, [pc, #128]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c9e:	4b1f      	ldr	r3, [pc, #124]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	4a1e      	ldr	r2, [pc, #120]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4a19      	ldr	r2, [pc, #100]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cbc:	e00f      	b.n	8007cde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d106      	bne.n	8007cd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cc4:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	4a14      	ldr	r2, [pc, #80]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cd0:	e005      	b.n	8007cde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a0e      	ldr	r2, [pc, #56]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cea:	f7fa fafd 	bl	80022e8 <HAL_GetTick>
 8007cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cf0:	e008      	b.n	8007d04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cf2:	f7fa faf9 	bl	80022e8 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d901      	bls.n	8007d04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e006      	b.n	8007d12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <RCCEx_PLL3_Config+0x15c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0f0      	beq.n	8007cf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	58024400 	.word	0x58024400
 8007d20:	ffff0007 	.word	0xffff0007

08007d24 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e25b      	b.n	80081ee <HAL_SAI_Init+0x4ca>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d36:	f7fa fb05 	bl	8002344 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d113      	bne.n	8007d6c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4aa1      	ldr	r2, [pc, #644]	; (8007fd0 <HAL_SAI_Init+0x2ac>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_SAI_Init+0x34>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4aa0      	ldr	r2, [pc, #640]	; (8007fd4 <HAL_SAI_Init+0x2b0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d107      	bne.n	8007d68 <HAL_SAI_Init+0x44>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d103      	bne.n	8007d68 <HAL_SAI_Init+0x44>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e240      	b.n	80081ee <HAL_SAI_Init+0x4ca>
    }
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a97      	ldr	r2, [pc, #604]	; (8007fd0 <HAL_SAI_Init+0x2ac>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_SAI_Init+0x5c>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a97      	ldr	r2, [pc, #604]	; (8007fd8 <HAL_SAI_Init+0x2b4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d102      	bne.n	8007d86 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007d80:	4b96      	ldr	r3, [pc, #600]	; (8007fdc <HAL_SAI_Init+0x2b8>)
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e01b      	b.n	8007dbe <HAL_SAI_Init+0x9a>
  }
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a95      	ldr	r2, [pc, #596]	; (8007fe0 <HAL_SAI_Init+0x2bc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_SAI_Init+0x76>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a93      	ldr	r2, [pc, #588]	; (8007fe4 <HAL_SAI_Init+0x2c0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d102      	bne.n	8007da0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d9a:	4b93      	ldr	r3, [pc, #588]	; (8007fe8 <HAL_SAI_Init+0x2c4>)
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e00e      	b.n	8007dbe <HAL_SAI_Init+0x9a>
  }
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a91      	ldr	r2, [pc, #580]	; (8007fec <HAL_SAI_Init+0x2c8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_SAI_Init+0x90>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a90      	ldr	r2, [pc, #576]	; (8007ff0 <HAL_SAI_Init+0x2cc>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d102      	bne.n	8007dba <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007db4:	4b8f      	ldr	r3, [pc, #572]	; (8007ff4 <HAL_SAI_Init+0x2d0>)
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	e001      	b.n	8007dbe <HAL_SAI_Init+0x9a>
  }
  else
  {
    SaiBaseAddress = SAI4;
 8007dba:	4b8f      	ldr	r3, [pc, #572]	; (8007ff8 <HAL_SAI_Init+0x2d4>)
 8007dbc:	61bb      	str	r3, [r7, #24]
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_SAI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fa f8ce 	bl	8001f74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa19 	bl	8008210 <SAI_Disable>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_SAI_Init+0xc4>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e202      	b.n	80081ee <HAL_SAI_Init+0x4ca>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d007      	beq.n	8007e08 <HAL_SAI_Init+0xe4>
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d302      	bcc.n	8007e02 <HAL_SAI_Init+0xde>
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d006      	beq.n	8007e0e <HAL_SAI_Init+0xea>
 8007e00:	e008      	b.n	8007e14 <HAL_SAI_Init+0xf0>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e06:	e008      	b.n	8007e1a <HAL_SAI_Init+0xf6>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007e08:	2310      	movs	r3, #16
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e0c:	e005      	b.n	8007e1a <HAL_SAI_Init+0xf6>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007e0e:	2320      	movs	r3, #32
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e12:	e002      	b.n	8007e1a <HAL_SAI_Init+0xf6>
    default:
      tmpregisterGCR = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e18:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d831      	bhi.n	8007e86 <HAL_SAI_Init+0x162>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <HAL_SAI_Init+0x104>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e41 	.word	0x08007e41
 8007e2c:	08007e47 	.word	0x08007e47
 8007e30:	08007e4f 	.word	0x08007e4f
 8007e34:	08007e57 	.word	0x08007e57
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e77 	.word	0x08007e77
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
      break;
 8007e44:	e022      	b.n	8007e8c <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e4a:	61fb      	str	r3, [r7, #28]
      break;
 8007e4c:	e01e      	b.n	8007e8c <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e52:	61fb      	str	r3, [r7, #28]
      break;
 8007e54:	e01a      	b.n	8007e8c <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e5a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e64:	e012      	b.n	8007e8c <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e6a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	f043 0302 	orr.w	r3, r3, #2
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e74:	e00a      	b.n	8007e8c <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e7a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	f043 0303 	orr.w	r3, r3, #3
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e84:	e002      	b.n	8007e8c <HAL_SAI_Init+0x168>
    default:
      syncen_bits = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
      break;
 8007e8a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e90:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8088 	beq.w	8007fac <HAL_SAI_Init+0x288>
  {
    uint32_t freq = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a4a      	ldr	r2, [pc, #296]	; (8007fd0 <HAL_SAI_Init+0x2ac>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_SAI_Init+0x190>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a4a      	ldr	r2, [pc, #296]	; (8007fd8 <HAL_SAI_Init+0x2b4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d104      	bne.n	8007ebe <HAL_SAI_Init+0x19a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007eb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007eb8:	f7fe ff84 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ebc:	6178      	str	r0, [r7, #20]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a47      	ldr	r2, [pc, #284]	; (8007fe0 <HAL_SAI_Init+0x2bc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_SAI_Init+0x1ae>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a45      	ldr	r2, [pc, #276]	; (8007fe4 <HAL_SAI_Init+0x2c0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d104      	bne.n	8007edc <HAL_SAI_Init+0x1b8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007ed2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ed6:	f7fe ff75 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007eda:	6178      	str	r0, [r7, #20]
    }
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a42      	ldr	r2, [pc, #264]	; (8007fec <HAL_SAI_Init+0x2c8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d004      	beq.n	8007ef0 <HAL_SAI_Init+0x1cc>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a41      	ldr	r2, [pc, #260]	; (8007ff0 <HAL_SAI_Init+0x2cc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d104      	bne.n	8007efa <HAL_SAI_Init+0x1d6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007ef0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ef4:	f7fe ff66 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ef8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_A)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a35      	ldr	r2, [pc, #212]	; (8007fd4 <HAL_SAI_Init+0x2b0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d104      	bne.n	8007f0e <HAL_SAI_Init+0x1ea>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007f04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007f08:	f7fe ff5c 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f0c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a3a      	ldr	r2, [pc, #232]	; (8007ffc <HAL_SAI_Init+0x2d8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d104      	bne.n	8007f22 <HAL_SAI_Init+0x1fe>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007f18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f1c:	f7fe ff52 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f20:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f2a:	d10f      	bne.n	8007f4c <HAL_SAI_Init+0x228>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	4619      	mov	r1, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f40:	fb02 f303 	mul.w	r3, r2, r3
 8007f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	e017      	b.n	8007f7c <HAL_SAI_Init+0x258>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f54:	d101      	bne.n	8007f5a <HAL_SAI_Init+0x236>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e000      	b.n	8007f5c <HAL_SAI_Init+0x238>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	4619      	mov	r1, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f7a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4a20      	ldr	r2, [pc, #128]	; (8008000 <HAL_SAI_Init+0x2dc>)
 8007f80:	fba2 2303 	umull	r2, r3, r2, r3
 8007f84:	08da      	lsrs	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007f8a:	6939      	ldr	r1, [r7, #16]
 8007f8c:	4b1c      	ldr	r3, [pc, #112]	; (8008000 <HAL_SAI_Init+0x2dc>)
 8007f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f92:	08da      	lsrs	r2, r3, #3
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	1aca      	subs	r2, r1, r3
 8007f9e:	2a08      	cmp	r2, #8
 8007fa0:	d904      	bls.n	8007fac <HAL_SAI_Init+0x288>
    {
      hsai->Init.Mckdiv += 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_SAI_Init+0x298>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d123      	bne.n	8008004 <HAL_SAI_Init+0x2e0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_SAI_Init+0x2a4>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e001      	b.n	8007fcc <HAL_SAI_Init+0x2a8>
 8007fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fcc:	623b      	str	r3, [r7, #32]
 8007fce:	e022      	b.n	8008016 <HAL_SAI_Init+0x2f2>
 8007fd0:	40015804 	.word	0x40015804
 8007fd4:	58005404 	.word	0x58005404
 8007fd8:	40015824 	.word	0x40015824
 8007fdc:	40015800 	.word	0x40015800
 8007fe0:	40015c04 	.word	0x40015c04
 8007fe4:	40015c24 	.word	0x40015c24
 8007fe8:	40015c00 	.word	0x40015c00
 8007fec:	40016004 	.word	0x40016004
 8007ff0:	40016024 	.word	0x40016024
 8007ff4:	40016000 	.word	0x40016000
 8007ff8:	58005400 	.word	0x58005400
 8007ffc:	58005424 	.word	0x58005424
 8008000:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	2b01      	cmp	r3, #1
 800800a:	d102      	bne.n	8008012 <HAL_SAI_Init+0x2ee>
 800800c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008010:	e000      	b.n	8008014 <HAL_SAI_Init+0x2f0>
 8008012:	2300      	movs	r3, #0
 8008014:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008016:	f7fa f995 	bl	8002344 <HAL_GetREVID>
 800801a:	4603      	mov	r3, r0
 800801c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008020:	d331      	bcc.n	8008086 <HAL_SAI_Init+0x362>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4b72      	ldr	r3, [pc, #456]	; (80081f8 <HAL_SAI_Init+0x4d4>)
 800802e:	400b      	ands	r3, r1
 8008030:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6819      	ldr	r1, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008046:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	431a      	orrs	r2, r3
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800805a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008066:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	051b      	lsls	r3, r3, #20
 800806e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008074:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e02d      	b.n	80080e2 <HAL_SAI_Init+0x3be>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6819      	ldr	r1, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b5a      	ldr	r3, [pc, #360]	; (80081fc <HAL_SAI_Init+0x4d8>)
 8008092:	400b      	ands	r3, r1
 8008094:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6819      	ldr	r1, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080aa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b0:	431a      	orrs	r2, r3
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80080be:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080ca:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080d8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	601a      	str	r2, [r3, #0]
  }

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b44      	ldr	r3, [pc, #272]	; (8008200 <HAL_SAI_Init+0x4dc>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6859      	ldr	r1, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69da      	ldr	r2, [r3, #28]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6899      	ldr	r1, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b3a      	ldr	r3, [pc, #232]	; (8008204 <HAL_SAI_Init+0x4e0>)
 800811c:	400b      	ands	r3, r1
 800811e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6899      	ldr	r1, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008130:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008136:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800813c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008142:	3b01      	subs	r3, #1
 8008144:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008146:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800815e:	400b      	ands	r3, r1
 8008160:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68d9      	ldr	r1, [r3, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008176:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008178:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817e:	3b01      	subs	r3, #1
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1d      	ldr	r2, [pc, #116]	; (8008208 <HAL_SAI_Init+0x4e4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_SAI_Init+0x47c>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_SAI_Init+0x4e8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d119      	bne.n	80081d4 <HAL_SAI_Init+0x4b0>
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f023 0201 	bic.w	r2, r3, #1
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d10e      	bne.n	80081d4 <HAL_SAI_Init+0x4b0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	3b01      	subs	r3, #1
 80081c0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081c2:	431a      	orrs	r2, r3
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	f043 0201 	orr.w	r2, r3, #1
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3728      	adds	r7, #40	; 0x28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	f005c010 	.word	0xf005c010
 80081fc:	f805c010 	.word	0xf805c010
 8008200:	ffff1ff0 	.word	0xffff1ff0
 8008204:	fff88000 	.word	0xfff88000
 8008208:	40015804 	.word	0x40015804
 800820c:	58005404 	.word	0x58005404

08008210 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008210:	b490      	push	{r4, r7}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008218:	4b15      	ldr	r3, [pc, #84]	; (8008270 <SAI_Disable+0x60>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a15      	ldr	r2, [pc, #84]	; (8008274 <SAI_Disable+0x64>)
 800821e:	fba2 2303 	umull	r2, r3, r2, r3
 8008222:	0b1b      	lsrs	r3, r3, #12
 8008224:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008238:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800823a:	2c00      	cmp	r4, #0
 800823c:	d10a      	bne.n	8008254 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e007      	b.n	8008264 <SAI_Disable+0x54>
    }
    count--;
 8008254:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ea      	bne.n	800823a <SAI_Disable+0x2a>

  return status;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bc90      	pop	{r4, r7}
 800826e:	4770      	bx	lr
 8008270:	24000000 	.word	0x24000000
 8008274:	95cbec1b 	.word	0x95cbec1b

08008278 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e07c      	b.n	8008384 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10c      	bne.n	80082b0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d102      	bne.n	80082aa <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7f9 fbb0 	bl	8001a10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2203      	movs	r2, #3
 80082b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f867 	bl	800838c <HAL_SD_InitCard>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e05d      	b.n	8008384 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082c8:	f107 0308 	add.w	r3, r7, #8
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa94 	bl	80087fc <HAL_SD_GetCardStatus>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e052      	b.n	8008384 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082de:	7e3b      	ldrb	r3, [r7, #24]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082e4:	7e7b      	ldrb	r3, [r7, #25]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10a      	bne.n	8008308 <HAL_SD_Init+0x90>
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <HAL_SD_Init+0x86>
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008304:	65da      	str	r2, [r3, #92]	; 0x5c
 8008306:	e00b      	b.n	8008320 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d104      	bne.n	800831a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008316:	65da      	str	r2, [r3, #92]	; 0x5c
 8008318:	e002      	b.n	8008320 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fb00 	bl	800892c <HAL_SD_ConfigWideBusOperation>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e026      	b.n	8008384 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008336:	f7f9 ffd7 	bl	80022e8 <HAL_GetTick>
 800833a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800833c:	e011      	b.n	8008362 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800833e:	f7f9 ffd3 	bl	80022e8 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d109      	bne.n	8008362 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e010      	b.n	8008384 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb72 	bl	8008a4c <HAL_SD_GetCardState>
 8008368:	4603      	mov	r3, r0
 800836a:	2b04      	cmp	r3, #4
 800836c:	d1e7      	bne.n	800833e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3728      	adds	r7, #40	; 0x28
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800838c:	b5b0      	push	{r4, r5, r7, lr}
 800838e:	b090      	sub	sp, #64	; 0x40
 8008390:	af04      	add	r7, sp, #16
 8008392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80083a4:	23fa      	movs	r3, #250	; 0xfa
 80083a6:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d107      	bne.n	80083c0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0210 	orr.w	r2, r2, #16
 80083be:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681d      	ldr	r5, [r3, #0]
 80083c4:	466c      	mov	r4, sp
 80083c6:	f107 0318 	add.w	r3, r7, #24
 80083ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083d8:	4628      	mov	r0, r5
 80083da:	f003 fe29 	bl	800c030 <SDMMC_Init>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80083e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e04d      	b.n	800848c <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f003 fe52 	bl	800c09e <SDMMC_PowerState_ON>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 8008400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e03f      	b.n	800848c <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800840c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008410:	f7fe fcd8 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008414:	4602      	mov	r2, r0
 8008416:	4b1f      	ldr	r3, [pc, #124]	; (8008494 <HAL_SD_InitCard+0x108>)
 8008418:	fba3 2302 	umull	r2, r3, r3, r2
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008426:	4a1c      	ldr	r2, [pc, #112]	; (8008498 <HAL_SD_InitCard+0x10c>)
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	fbb2 f3f3 	udiv	r3, r2, r3
 800842e:	3301      	adds	r3, #1
 8008430:	4618      	mov	r0, r3
 8008432:	f7f9 ff65 	bl	8002300 <HAL_Delay>
 8008436:	e002      	b.n	800843e <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8008438:	2002      	movs	r0, #2
 800843a:	f7f9 ff61 	bl	8002300 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fbe2 	bl	8008c08 <SD_PowerON>
 8008444:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e013      	b.n	800848c <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fb11 	bl	8008a8c <SD_InitCard>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3730      	adds	r7, #48	; 0x30
 8008490:	46bd      	mov	sp, r7
 8008492:	bdb0      	pop	{r4, r5, r7, pc}
 8008494:	10624dd3 	.word	0x10624dd3
 8008498:	00012110 	.word	0x00012110

0800849c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c2:	0f9b      	lsrs	r3, r3, #30
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ce:	0e9b      	lsrs	r3, r3, #26
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	b29a      	uxth	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008520:	0c1b      	lsrs	r3, r3, #16
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	b2da      	uxtb	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008532:	0bdb      	lsrs	r3, r3, #15
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008544:	0b9b      	lsrs	r3, r3, #14
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008556:	0b5b      	lsrs	r3, r3, #13
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008568:	0b1b      	lsrs	r3, r3, #12
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	b2da      	uxtb	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2200      	movs	r2, #0
 800857a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d163      	bne.n	800864c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008588:	009a      	lsls	r2, r3, #2
 800858a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800858e:	4013      	ands	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008594:	0f92      	lsrs	r2, r2, #30
 8008596:	431a      	orrs	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a0:	0edb      	lsrs	r3, r3, #27
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b2:	0e1b      	lsrs	r3, r3, #24
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c4:	0d5b      	lsrs	r3, r3, #21
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d6:	0c9b      	lsrs	r3, r3, #18
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e8:	0bdb      	lsrs	r3, r3, #15
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	7e1b      	ldrb	r3, [r3, #24]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	3302      	adds	r3, #2
 800860c:	2201      	movs	r2, #1
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008616:	fb02 f203 	mul.w	r2, r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	7a1b      	ldrb	r3, [r3, #8]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	2201      	movs	r2, #1
 800862a:	409a      	lsls	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008638:	0a52      	lsrs	r2, r2, #9
 800863a:	fb02 f203 	mul.w	r2, r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008648:	659a      	str	r2, [r3, #88]	; 0x58
 800864a:	e031      	b.n	80086b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11d      	bne.n	8008690 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	3301      	adds	r3, #1
 8008670:	029a      	lsls	r2, r3, #10
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008684:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	659a      	str	r2, [r3, #88]	; 0x58
 800868e:	e00f      	b.n	80086b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a58      	ldr	r2, [pc, #352]	; (80087f8 <HAL_SD_GetCardCSD+0x344>)
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e09d      	b.n	80087ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086b4:	0b9b      	lsrs	r3, r3, #14
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e8:	0fdb      	lsrs	r3, r3, #31
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f4:	0f5b      	lsrs	r3, r3, #29
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008706:	0e9b      	lsrs	r3, r3, #26
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008718:	0d9b      	lsrs	r3, r3, #22
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	b2da      	uxtb	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872a:	0d5b      	lsrs	r3, r3, #21
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008746:	0c1b      	lsrs	r3, r3, #16
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800875a:	0bdb      	lsrs	r3, r3, #15
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	b2da      	uxtb	r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876e:	0b9b      	lsrs	r3, r3, #14
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008782:	0b5b      	lsrs	r3, r3, #13
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	0b1b      	lsrs	r3, r3, #12
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087aa:	0a9b      	lsrs	r3, r3, #10
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	1fe00fff 	.word	0x1fe00fff

080087fc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b094      	sub	sp, #80	; 0x50
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb09 	bl	8008e24 <SD_SendSDStatus>
 8008812:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00f      	beq.n	800883a <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a42      	ldr	r2, [pc, #264]	; (8008928 <HAL_SD_GetCardStatus+0x12c>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e071      	b.n	800891e <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	099b      	lsrs	r3, r3, #6
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	b2da      	uxtb	r2, r3
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	b2da      	uxtb	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	0a1b      	lsrs	r3, r3, #8
 800885e:	b29b      	uxth	r3, r3
 8008860:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	0e1b      	lsrs	r3, r3, #24
 800886a:	b29b      	uxth	r3, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	b29a      	uxth	r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	061a      	lsls	r2, r3, #24
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008880:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800888a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	0e1b      	lsrs	r3, r3, #24
 8008890:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	b2da      	uxtb	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	0a1b      	lsrs	r3, r3, #8
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	0d1b      	lsrs	r3, r3, #20
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	0c1b      	lsrs	r3, r3, #16
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	0a9b      	lsrs	r3, r3, #10
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	0e1b      	lsrs	r3, r3, #24
 8008916:	b2da      	uxtb	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3750      	adds	r7, #80	; 0x50
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	1fe00fff 	.word	0x1fe00fff

0800892c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800892c:	b5b0      	push	{r4, r5, r7, lr}
 800892e:	b08e      	sub	sp, #56	; 0x38
 8008930:	af04      	add	r7, sp, #16
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2203      	movs	r2, #3
 800893a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2b03      	cmp	r3, #3
 8008944:	d02e      	beq.n	80089a4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894c:	d106      	bne.n	800895c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
 800895a:	e029      	b.n	80089b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008962:	d10a      	bne.n	800897a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fb55 	bl	8009014 <SD_WideBus_Enable>
 800896a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
 8008978:	e01a      	b.n	80089b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb92 	bl	80090aa <SD_WideBus_Disable>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	639a      	str	r2, [r3, #56]	; 0x38
 8008994:	e00c      	b.n	80089b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
 80089a2:	e005      	b.n	80089b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a22      	ldr	r2, [pc, #136]	; (8008a48 <HAL_SD_ConfigWideBusOperation+0x11c>)
 80089be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e039      	b.n	8008a40 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d903      	bls.n	80089f2 <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e012      	b.n	8008a18 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fa:	d103      	bne.n	8008a04 <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	61fb      	str	r3, [r7, #28]
 8008a02:	e009      	b.n	8008a18 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0c:	d102      	bne.n	8008a14 <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	e001      	b.n	8008a18 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008a14:	2304      	movs	r3, #4
 8008a16:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681d      	ldr	r5, [r3, #0]
 8008a1c:	466c      	mov	r4, sp
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a30:	4628      	mov	r0, r5
 8008a32:	f003 fafd 	bl	800c030 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bdb0      	pop	{r4, r5, r7, pc}
 8008a48:	1fe00fff 	.word	0x1fe00fff

08008a4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fab0 	bl	8008fc4 <SD_SendStatus>
 8008a64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	0a5b      	lsrs	r3, r3, #9
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a82:	693b      	ldr	r3, [r7, #16]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b091      	sub	sp, #68	; 0x44
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008a94:	2301      	movs	r3, #1
 8008a96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f003 fb0f 	bl	800c0c0 <SDMMC_GetPowerState>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008aac:	e0a8      	b.n	8008c00 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d02e      	beq.n	8008b14 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f003 fc91 	bl	800c3e2 <SDMMC_CmdSendCID>
 8008ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <SD_InitCard+0x40>
    {
      return errorstate;
 8008ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aca:	e099      	b.n	8008c00 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f003 fb39 	bl	800c14a <SDMMC_GetResponse>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f003 fb30 	bl	800c14a <SDMMC_GetResponse>
 8008aea:	4602      	mov	r2, r0
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2108      	movs	r1, #8
 8008af6:	4618      	mov	r0, r3
 8008af8:	f003 fb27 	bl	800c14a <SDMMC_GetResponse>
 8008afc:	4602      	mov	r2, r0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	210c      	movs	r1, #12
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f003 fb1e 	bl	800c14a <SDMMC_GetResponse>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d00d      	beq.n	8008b38 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f107 020e 	add.w	r2, r7, #14
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f003 fc9a 	bl	800c460 <SDMMC_CmdSetRelAdd>
 8008b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <SD_InitCard+0xac>
    {
      return errorstate;
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	e063      	b.n	8008c00 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d036      	beq.n	8008bae <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	041b      	lsls	r3, r3, #16
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f003 fc63 	bl	800c420 <SDMMC_CmdSendCSD>
 8008b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <SD_InitCard+0xda>
    {
      return errorstate;
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	e04c      	b.n	8008c00 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f003 faec 	bl	800c14a <SDMMC_GetResponse>
 8008b72:	4602      	mov	r2, r0
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2104      	movs	r1, #4
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f003 fae3 	bl	800c14a <SDMMC_GetResponse>
 8008b84:	4602      	mov	r2, r0
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2108      	movs	r1, #8
 8008b90:	4618      	mov	r0, r3
 8008b92:	f003 fada 	bl	800c14a <SDMMC_GetResponse>
 8008b96:	4602      	mov	r2, r0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	210c      	movs	r1, #12
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f003 fad1 	bl	800c14a <SDMMC_GetResponse>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2104      	movs	r1, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f003 fac8 	bl	800c14a <SDMMC_GetResponse>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	0d1a      	lsrs	r2, r3, #20
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bc2:	f107 0310 	add.w	r3, r7, #16
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff fc73 	bl	80084b4 <HAL_SD_GetCardCSD>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bd8:	e012      	b.n	8008c00 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6819      	ldr	r1, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	f04f 0400 	mov.w	r4, #0
 8008be8:	461a      	mov	r2, r3
 8008bea:	4623      	mov	r3, r4
 8008bec:	4608      	mov	r0, r1
 8008bee:	f003 fb0e 	bl	800c20e <SDMMC_CmdSelDesel>
 8008bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <SD_InitCard+0x172>
  {
    return errorstate;
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfc:	e000      	b.n	8008c00 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3744      	adds	r7, #68	; 0x44
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}

08008c08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008c1c:	f7f9 fb64 	bl	80022e8 <HAL_GetTick>
 8008c20:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f003 fb15 	bl	800c256 <SDMMC_CmdGoIdleState>
 8008c2c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <SD_PowerON+0x30>
  {
    return errorstate;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	e0ee      	b.n	8008e16 <SD_PowerON+0x20e>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f003 fb28 	bl	800c292 <SDMMC_CmdOperCond>
 8008c42:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00d      	beq.n	8008c66 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f003 fafe 	bl	800c256 <SDMMC_CmdGoIdleState>
 8008c5a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <SD_PowerON+0x64>
    {
      return errorstate;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	e0d7      	b.n	8008e16 <SD_PowerON+0x20e>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d137      	bne.n	8008ce4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f003 fb29 	bl	800c2d2 <SDMMC_CmdAppCommand>
 8008c80:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d02d      	beq.n	8008ce4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c8c:	e0c3      	b.n	8008e16 <SD_PowerON+0x20e>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f003 fb1c 	bl	800c2d2 <SDMMC_CmdAppCommand>
 8008c9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	e0b7      	b.n	8008e16 <SD_PowerON+0x20e>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	495d      	ldr	r1, [pc, #372]	; (8008e20 <SD_PowerON+0x218>)
 8008cac:	4618      	mov	r0, r3
 8008cae:	f003 fb33 	bl	800c318 <SDMMC_CmdAppOperCommand>
 8008cb2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cbe:	e0aa      	b.n	8008e16 <SD_PowerON+0x20e>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f003 fa3f 	bl	800c14a <SDMMC_GetResponse>
 8008ccc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	0fdb      	lsrs	r3, r3, #31
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <SD_PowerON+0xd2>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <SD_PowerON+0xd4>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]

    count++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d802      	bhi.n	8008cf4 <SD_PowerON+0xec>
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0cc      	beq.n	8008c8e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d902      	bls.n	8008d04 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d02:	e088      	b.n	8008e16 <SD_PowerON+0x20e>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 8082 	beq.w	8008e14 <SD_PowerON+0x20c>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d17a      	bne.n	8008e14 <SD_PowerON+0x20c>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d075      	beq.n	8008e14 <SD_PowerON+0x20c>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d2e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0208 	orr.w	r2, r2, #8
 8008d3e:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f003 fbf2 	bl	800c52e <SDMMC_CmdVoltageSwitch>
 8008d4a:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00c      	beq.n	8008d6c <SD_PowerON+0x164>
        {
          return errorstate;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	e05f      	b.n	8008e16 <SD_PowerON+0x20e>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d56:	f7f9 fac7 	bl	80022e8 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d102      	bne.n	8008d6c <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d6a:	e054      	b.n	8008e16 <SD_PowerON+0x20e>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d7a:	d1ec      	bne.n	8008d56 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d94:	d002      	beq.n	8008d9c <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d9a:	e03c      	b.n	8008e16 <SD_PowerON+0x20e>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	f7ff fb7d 	bl	800849c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0204 	orr.w	r2, r2, #4
 8008db0:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008db2:	e00a      	b.n	8008dca <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008db4:	f7f9 fa98 	bl	80022e8 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d102      	bne.n	8008dca <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dc8:	e025      	b.n	8008e16 <SD_PowerON+0x20e>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd8:	d1ec      	bne.n	8008db4 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df2:	d102      	bne.n	8008dfa <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008df8:	e00d      	b.n	8008e16 <SD_PowerON+0x20e>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2213      	movs	r2, #19
 8008e00:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e12:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	c1100000 	.word	0xc1100000

08008e24 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08c      	sub	sp, #48	; 0x30
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e2e:	f7f9 fa5b 	bl	80022e8 <HAL_GetTick>
 8008e32:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f003 f983 	bl	800c14a <SDMMC_GetResponse>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e4e:	d102      	bne.n	8008e56 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e54:	e0b0      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2140      	movs	r1, #64	; 0x40
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f003 f9b3 	bl	800c1c8 <SDMMC_CmdBlockLength>
 8008e62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	e0a0      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7e:	041b      	lsls	r3, r3, #16
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f003 fa25 	bl	800c2d2 <SDMMC_CmdAppCommand>
 8008e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d005      	beq.n	8008e9c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	e08d      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008ea2:	2340      	movs	r3, #64	; 0x40
 8008ea4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008ea6:	2360      	movs	r3, #96	; 0x60
 8008ea8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f107 0208 	add.w	r2, r7, #8
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f003 f955 	bl	800c170 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f003 fb0d 	bl	800c4ea <SDMMC_CmdStatusRegister>
 8008ed0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02b      	beq.n	8008f30 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	e069      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d013      	beq.n	8008f1a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef6:	e00d      	b.n	8008f14 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f003 f8c1 	bl	800c084 <SDMMC_ReadFIFO>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	601a      	str	r2, [r3, #0]
        pData++;
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	3301      	adds	r3, #1
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	2b07      	cmp	r3, #7
 8008f18:	d9ee      	bls.n	8008ef8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f1a:	f7f9 f9e5 	bl	80022e8 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d102      	bne.n	8008f30 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f2e:	e043      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f36:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0d2      	beq.n	8008ee4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	e033      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	e02a      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008f70:	2320      	movs	r3, #32
 8008f72:	e021      	b.n	8008fb8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f003 f883 	bl	800c084 <SDMMC_ReadFIFO>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	601a      	str	r2, [r3, #0]
    pData++;
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	3304      	adds	r3, #4
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f8a:	f7f9 f9ad 	bl	80022e8 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f98:	d102      	bne.n	8008fa0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f9e:	e00b      	b.n	8008fb8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e2      	bne.n	8008f74 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <SD_SendSDStatus+0x19c>)
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3730      	adds	r7, #48	; 0x30
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	18000f3a 	.word	0x18000f3a

08008fc4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fd8:	e018      	b.n	800900c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe2:	041b      	lsls	r3, r3, #16
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f003 fa5c 	bl	800c4a4 <SDMMC_CmdSendStatus>
 8008fec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	e009      	b.n	800900c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f003 f8a3 	bl	800c14a <SDMMC_GetResponse>
 8009004:	4602      	mov	r2, r0
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f003 f88d 	bl	800c14a <SDMMC_GetResponse>
 8009030:	4603      	mov	r3, r0
 8009032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903a:	d102      	bne.n	8009042 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800903c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009040:	e02f      	b.n	80090a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f879 	bl	8009140 <SD_FindSCR>
 800904e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	e023      	b.n	80090a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01c      	beq.n	800909e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906c:	041b      	lsls	r3, r3, #16
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f003 f92e 	bl	800c2d2 <SDMMC_CmdAppCommand>
 8009076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	e00f      	b.n	80090a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2102      	movs	r1, #2
 8009088:	4618      	mov	r0, r3
 800908a:	f003 f965 	bl	800c358 <SDMMC_CmdBusWidth>
 800908e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	e003      	b.n	80090a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800909a:	2300      	movs	r3, #0
 800909c:	e001      	b.n	80090a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800909e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b086      	sub	sp, #24
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f003 f842 	bl	800c14a <SDMMC_GetResponse>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d0:	d102      	bne.n	80090d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090d6:	e02f      	b.n	8009138 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090d8:	f107 030c 	add.w	r3, r7, #12
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f82e 	bl	8009140 <SD_FindSCR>
 80090e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	e023      	b.n	8009138 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d01c      	beq.n	8009134 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f003 f8e3 	bl	800c2d2 <SDMMC_CmdAppCommand>
 800910c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	e00f      	b.n	8009138 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f003 f91a 	bl	800c358 <SDMMC_CmdBusWidth>
 8009124:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	e003      	b.n	8009138 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009130:	2300      	movs	r3, #0
 8009132:	e001      	b.n	8009138 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009134:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08e      	sub	sp, #56	; 0x38
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800914a:	f7f9 f8cd 	bl	80022e8 <HAL_GetTick>
 800914e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009154:	2300      	movs	r3, #0
 8009156:	60bb      	str	r3, [r7, #8]
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2108      	movs	r1, #8
 8009166:	4618      	mov	r0, r3
 8009168:	f003 f82e 	bl	800c1c8 <SDMMC_CmdBlockLength>
 800916c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	e0ad      	b.n	80092d4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	4619      	mov	r1, r3
 8009184:	4610      	mov	r0, r2
 8009186:	f003 f8a4 	bl	800c2d2 <SDMMC_CmdAppCommand>
 800918a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	e09e      	b.n	80092d4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009196:	f04f 33ff 	mov.w	r3, #4294967295
 800919a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800919c:	2308      	movs	r3, #8
 800919e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091a0:	2330      	movs	r3, #48	; 0x30
 80091a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091a4:	2302      	movs	r3, #2
 80091a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091ac:	2301      	movs	r3, #1
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f107 0210 	add.w	r2, r7, #16
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 ffd8 	bl	800c170 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f003 f8ea 	bl	800c39e <SDMMC_CmdSendSCR>
 80091ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d027      	beq.n	8009222 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	e07e      	b.n	80092d4 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d113      	bne.n	800920c <SD_FindSCR+0xcc>
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d110      	bne.n	800920c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 ff48 	bl	800c084 <SDMMC_ReadFIFO>
 80091f4:	4603      	mov	r3, r0
 80091f6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 ff41 	bl	800c084 <SDMMC_ReadFIFO>
 8009202:	4603      	mov	r3, r0
 8009204:	60fb      	str	r3, [r7, #12]
      index++;
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	3301      	adds	r3, #1
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800920c:	f7f9 f86c 	bl	80022e8 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921a:	d102      	bne.n	8009222 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800921c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009220:	e058      	b.n	80092d4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009228:	f240 532a 	movw	r3, #1322	; 0x52a
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0d1      	beq.n	80091d6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2208      	movs	r2, #8
 8009246:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009248:	2308      	movs	r3, #8
 800924a:	e043      	b.n	80092d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2202      	movs	r2, #2
 8009260:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009262:	2302      	movs	r3, #2
 8009264:	e036      	b.n	80092d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2220      	movs	r2, #32
 800927a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800927c:	2320      	movs	r3, #32
 800927e:	e029      	b.n	80092d4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a15      	ldr	r2, [pc, #84]	; (80092dc <SD_FindSCR+0x19c>)
 8009286:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	061a      	lsls	r2, r3, #24
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009294:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800929e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	601a      	str	r2, [r3, #0]
    scr++;
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	3304      	adds	r3, #4
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	061a      	lsls	r2, r3, #24
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	0e1b      	lsrs	r3, r3, #24
 80092cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3738      	adds	r7, #56	; 0x38
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	18000f3a 	.word	0x18000f3a

080092e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e02b      	b.n	800934c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7f8 fe29 	bl	8001f60 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3304      	adds	r3, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f002 fdbf 	bl	800bea4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	461a      	mov	r2, r3
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	f002 fe13 	bl	800bf5c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009336:	4b07      	ldr	r3, [pc, #28]	; (8009354 <HAL_SDRAM_Init+0x74>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a06      	ldr	r2, [pc, #24]	; (8009354 <HAL_SDRAM_Init+0x74>)
 800933c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009340:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	52004000 	.word	0x52004000

08009358 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e03e      	b.n	80093ec <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7f8 fde2 	bl	8001f4c <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3308      	adds	r3, #8
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f002 fc86 	bl	800bca4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	461a      	mov	r2, r3
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	f002 fcf6 	bl	800bd94 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6858      	ldr	r0, [r3, #4]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	f002 fd3d 	bl	800be34 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	6892      	ldr	r2, [r2, #8]
 80093c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	6892      	ldr	r2, [r2, #8]
 80093ce:	f041 0101 	orr.w	r1, r1, #1
 80093d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <HAL_SRAM_Init+0x9c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a06      	ldr	r2, [pc, #24]	; (80093f4 <HAL_SRAM_Init+0x9c>)
 80093dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	52004000 	.word	0x52004000

080093f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e042      	b.n	8009490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009410:	2b00      	cmp	r3, #0
 8009412:	d106      	bne.n	8009422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7f8 fb95 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2224      	movs	r2, #36	; 0x24
 8009426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 0201 	bic.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f82c 	bl	8009498 <UART_SetConfig>
 8009440:	4603      	mov	r3, r0
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e022      	b.n	8009490 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f002 f99e 	bl	800b794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0201 	orr.w	r2, r2, #1
 8009486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fa25 	bl	800b8d8 <UART_CheckIdleState>
 800948e:	4603      	mov	r3, r0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009498:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800949c:	b090      	sub	sp, #64	; 0x40
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094ce:	4313      	orrs	r3, r2
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	4bc1      	ldr	r3, [pc, #772]	; (80097e0 <UART_SetConfig+0x348>)
 80094da:	4013      	ands	r3, r2
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	6812      	ldr	r2, [r2, #0]
 80094e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094e2:	430b      	orrs	r3, r1
 80094e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4ab7      	ldr	r2, [pc, #732]	; (80097e4 <UART_SetConfig+0x34c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d004      	beq.n	8009516 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009512:	4313      	orrs	r3, r2
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	4bb2      	ldr	r3, [pc, #712]	; (80097e8 <UART_SetConfig+0x350>)
 800951e:	4013      	ands	r3, r2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009526:	430b      	orrs	r3, r1
 8009528:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	f023 010f 	bic.w	r1, r3, #15
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4aa9      	ldr	r2, [pc, #676]	; (80097ec <UART_SetConfig+0x354>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d177      	bne.n	800963a <UART_SetConfig+0x1a2>
 800954a:	4ba9      	ldr	r3, [pc, #676]	; (80097f0 <UART_SetConfig+0x358>)
 800954c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009552:	2b28      	cmp	r3, #40	; 0x28
 8009554:	d86c      	bhi.n	8009630 <UART_SetConfig+0x198>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <UART_SetConfig+0xc4>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	08009601 	.word	0x08009601
 8009560:	08009631 	.word	0x08009631
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	08009631 	.word	0x08009631
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009609 	.word	0x08009609
 8009580:	08009631 	.word	0x08009631
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009611 	.word	0x08009611
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009631 	.word	0x08009631
 80095b4:	08009631 	.word	0x08009631
 80095b8:	08009631 	.word	0x08009631
 80095bc:	08009619 	.word	0x08009619
 80095c0:	08009631 	.word	0x08009631
 80095c4:	08009631 	.word	0x08009631
 80095c8:	08009631 	.word	0x08009631
 80095cc:	08009631 	.word	0x08009631
 80095d0:	08009631 	.word	0x08009631
 80095d4:	08009631 	.word	0x08009631
 80095d8:	08009631 	.word	0x08009631
 80095dc:	08009621 	.word	0x08009621
 80095e0:	08009631 	.word	0x08009631
 80095e4:	08009631 	.word	0x08009631
 80095e8:	08009631 	.word	0x08009631
 80095ec:	08009631 	.word	0x08009631
 80095f0:	08009631 	.word	0x08009631
 80095f4:	08009631 	.word	0x08009631
 80095f8:	08009631 	.word	0x08009631
 80095fc:	08009629 	.word	0x08009629
 8009600:	2301      	movs	r3, #1
 8009602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009606:	e233      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800960e:	e22f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009616:	e22b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800961e:	e227      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009626:	e223      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800962e:	e21f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009630:	2380      	movs	r3, #128	; 0x80
 8009632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009636:	bf00      	nop
 8009638:	e21a      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a6d      	ldr	r2, [pc, #436]	; (80097f4 <UART_SetConfig+0x35c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d132      	bne.n	80096aa <UART_SetConfig+0x212>
 8009644:	4b6a      	ldr	r3, [pc, #424]	; (80097f0 <UART_SetConfig+0x358>)
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	2b05      	cmp	r3, #5
 800964e:	d827      	bhi.n	80096a0 <UART_SetConfig+0x208>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x1c0>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	08009671 	.word	0x08009671
 800965c:	08009679 	.word	0x08009679
 8009660:	08009681 	.word	0x08009681
 8009664:	08009689 	.word	0x08009689
 8009668:	08009691 	.word	0x08009691
 800966c:	08009699 	.word	0x08009699
 8009670:	2300      	movs	r3, #0
 8009672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009676:	e1fb      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800967e:	e1f7      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009686:	e1f3      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800968e:	e1ef      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009696:	e1eb      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800969e:	e1e7      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096a6:	bf00      	nop
 80096a8:	e1e2      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a52      	ldr	r2, [pc, #328]	; (80097f8 <UART_SetConfig+0x360>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d132      	bne.n	800971a <UART_SetConfig+0x282>
 80096b4:	4b4e      	ldr	r3, [pc, #312]	; (80097f0 <UART_SetConfig+0x358>)
 80096b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d827      	bhi.n	8009710 <UART_SetConfig+0x278>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0x230>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	080096f9 	.word	0x080096f9
 80096d8:	08009701 	.word	0x08009701
 80096dc:	08009709 	.word	0x08009709
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096e6:	e1c3      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096ee:	e1bf      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096f6:	e1bb      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096fe:	e1b7      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009700:	2320      	movs	r3, #32
 8009702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009706:	e1b3      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800970e:	e1af      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009716:	bf00      	nop
 8009718:	e1aa      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a37      	ldr	r2, [pc, #220]	; (80097fc <UART_SetConfig+0x364>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d132      	bne.n	800978a <UART_SetConfig+0x2f2>
 8009724:	4b32      	ldr	r3, [pc, #200]	; (80097f0 <UART_SetConfig+0x358>)
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	2b05      	cmp	r3, #5
 800972e:	d827      	bhi.n	8009780 <UART_SetConfig+0x2e8>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x2a0>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009751 	.word	0x08009751
 800973c:	08009759 	.word	0x08009759
 8009740:	08009761 	.word	0x08009761
 8009744:	08009769 	.word	0x08009769
 8009748:	08009771 	.word	0x08009771
 800974c:	08009779 	.word	0x08009779
 8009750:	2300      	movs	r3, #0
 8009752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009756:	e18b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800975e:	e187      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009766:	e183      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800976e:	e17f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009776:	e17b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800977e:	e177      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009786:	bf00      	nop
 8009788:	e172      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1c      	ldr	r2, [pc, #112]	; (8009800 <UART_SetConfig+0x368>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d144      	bne.n	800981e <UART_SetConfig+0x386>
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <UART_SetConfig+0x358>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009798:	f003 0307 	and.w	r3, r3, #7
 800979c:	2b05      	cmp	r3, #5
 800979e:	d839      	bhi.n	8009814 <UART_SetConfig+0x37c>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <UART_SetConfig+0x310>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097c1 	.word	0x080097c1
 80097ac:	080097c9 	.word	0x080097c9
 80097b0:	080097d1 	.word	0x080097d1
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	08009805 	.word	0x08009805
 80097bc:	0800980d 	.word	0x0800980d
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097c6:	e153      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80097c8:	2304      	movs	r3, #4
 80097ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ce:	e14f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80097d0:	2308      	movs	r3, #8
 80097d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097d6:	e14b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80097d8:	2310      	movs	r3, #16
 80097da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097de:	e147      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80097e0:	cfff69f3 	.word	0xcfff69f3
 80097e4:	58000c00 	.word	0x58000c00
 80097e8:	11fff4ff 	.word	0x11fff4ff
 80097ec:	40011000 	.word	0x40011000
 80097f0:	58024400 	.word	0x58024400
 80097f4:	40004400 	.word	0x40004400
 80097f8:	40004800 	.word	0x40004800
 80097fc:	40004c00 	.word	0x40004c00
 8009800:	40005000 	.word	0x40005000
 8009804:	2320      	movs	r3, #32
 8009806:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800980a:	e131      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800980c:	2340      	movs	r3, #64	; 0x40
 800980e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009812:	e12d      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009814:	2380      	movs	r3, #128	; 0x80
 8009816:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800981a:	bf00      	nop
 800981c:	e128      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4ac3      	ldr	r2, [pc, #780]	; (8009b30 <UART_SetConfig+0x698>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d178      	bne.n	800991a <UART_SetConfig+0x482>
 8009828:	4bc2      	ldr	r3, [pc, #776]	; (8009b34 <UART_SetConfig+0x69c>)
 800982a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009830:	2b28      	cmp	r3, #40	; 0x28
 8009832:	d86d      	bhi.n	8009910 <UART_SetConfig+0x478>
 8009834:	a201      	add	r2, pc, #4	; (adr r2, 800983c <UART_SetConfig+0x3a4>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	080098e1 	.word	0x080098e1
 8009840:	08009911 	.word	0x08009911
 8009844:	08009911 	.word	0x08009911
 8009848:	08009911 	.word	0x08009911
 800984c:	08009911 	.word	0x08009911
 8009850:	08009911 	.word	0x08009911
 8009854:	08009911 	.word	0x08009911
 8009858:	08009911 	.word	0x08009911
 800985c:	080098e9 	.word	0x080098e9
 8009860:	08009911 	.word	0x08009911
 8009864:	08009911 	.word	0x08009911
 8009868:	08009911 	.word	0x08009911
 800986c:	08009911 	.word	0x08009911
 8009870:	08009911 	.word	0x08009911
 8009874:	08009911 	.word	0x08009911
 8009878:	08009911 	.word	0x08009911
 800987c:	080098f1 	.word	0x080098f1
 8009880:	08009911 	.word	0x08009911
 8009884:	08009911 	.word	0x08009911
 8009888:	08009911 	.word	0x08009911
 800988c:	08009911 	.word	0x08009911
 8009890:	08009911 	.word	0x08009911
 8009894:	08009911 	.word	0x08009911
 8009898:	08009911 	.word	0x08009911
 800989c:	080098f9 	.word	0x080098f9
 80098a0:	08009911 	.word	0x08009911
 80098a4:	08009911 	.word	0x08009911
 80098a8:	08009911 	.word	0x08009911
 80098ac:	08009911 	.word	0x08009911
 80098b0:	08009911 	.word	0x08009911
 80098b4:	08009911 	.word	0x08009911
 80098b8:	08009911 	.word	0x08009911
 80098bc:	08009901 	.word	0x08009901
 80098c0:	08009911 	.word	0x08009911
 80098c4:	08009911 	.word	0x08009911
 80098c8:	08009911 	.word	0x08009911
 80098cc:	08009911 	.word	0x08009911
 80098d0:	08009911 	.word	0x08009911
 80098d4:	08009911 	.word	0x08009911
 80098d8:	08009911 	.word	0x08009911
 80098dc:	08009909 	.word	0x08009909
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098e6:	e0c3      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ee:	e0bf      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098f6:	e0bb      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098fe:	e0b7      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009906:	e0b3      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800990e:	e0af      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009910:	2380      	movs	r3, #128	; 0x80
 8009912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009916:	bf00      	nop
 8009918:	e0aa      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a86      	ldr	r2, [pc, #536]	; (8009b38 <UART_SetConfig+0x6a0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d132      	bne.n	800998a <UART_SetConfig+0x4f2>
 8009924:	4b83      	ldr	r3, [pc, #524]	; (8009b34 <UART_SetConfig+0x69c>)
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	2b05      	cmp	r3, #5
 800992e:	d827      	bhi.n	8009980 <UART_SetConfig+0x4e8>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <UART_SetConfig+0x4a0>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009951 	.word	0x08009951
 800993c:	08009959 	.word	0x08009959
 8009940:	08009961 	.word	0x08009961
 8009944:	08009969 	.word	0x08009969
 8009948:	08009971 	.word	0x08009971
 800994c:	08009979 	.word	0x08009979
 8009950:	2300      	movs	r3, #0
 8009952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009956:	e08b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009958:	2304      	movs	r3, #4
 800995a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800995e:	e087      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009960:	2308      	movs	r3, #8
 8009962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009966:	e083      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009968:	2310      	movs	r3, #16
 800996a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800996e:	e07f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009970:	2320      	movs	r3, #32
 8009972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009976:	e07b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009978:	2340      	movs	r3, #64	; 0x40
 800997a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800997e:	e077      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009980:	2380      	movs	r3, #128	; 0x80
 8009982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009986:	bf00      	nop
 8009988:	e072      	b.n	8009a70 <UART_SetConfig+0x5d8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a6b      	ldr	r2, [pc, #428]	; (8009b3c <UART_SetConfig+0x6a4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d132      	bne.n	80099fa <UART_SetConfig+0x562>
 8009994:	4b67      	ldr	r3, [pc, #412]	; (8009b34 <UART_SetConfig+0x69c>)
 8009996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	2b05      	cmp	r3, #5
 800999e:	d827      	bhi.n	80099f0 <UART_SetConfig+0x558>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0x510>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e053      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099c8:	2304      	movs	r3, #4
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e04f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099d0:	2308      	movs	r3, #8
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e04b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	e047      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099e0:	2320      	movs	r3, #32
 80099e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e6:	e043      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ee:	e03f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099f0:	2380      	movs	r3, #128	; 0x80
 80099f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099f6:	bf00      	nop
 80099f8:	e03a      	b.n	8009a70 <UART_SetConfig+0x5d8>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a50      	ldr	r2, [pc, #320]	; (8009b40 <UART_SetConfig+0x6a8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d132      	bne.n	8009a6a <UART_SetConfig+0x5d2>
 8009a04:	4b4b      	ldr	r3, [pc, #300]	; (8009b34 <UART_SetConfig+0x69c>)
 8009a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	2b05      	cmp	r3, #5
 8009a0e:	d827      	bhi.n	8009a60 <UART_SetConfig+0x5c8>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x580>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a31 	.word	0x08009a31
 8009a1c:	08009a39 	.word	0x08009a39
 8009a20:	08009a41 	.word	0x08009a41
 8009a24:	08009a49 	.word	0x08009a49
 8009a28:	08009a51 	.word	0x08009a51
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e01b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e017      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e013      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e00f      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a50:	2320      	movs	r3, #32
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e00b      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	e007      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a66:	bf00      	nop
 8009a68:	e002      	b.n	8009a70 <UART_SetConfig+0x5d8>
 8009a6a:	2380      	movs	r3, #128	; 0x80
 8009a6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a32      	ldr	r2, [pc, #200]	; (8009b40 <UART_SetConfig+0x6a8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	f040 86f7 	bne.w	800a86a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	f000 80c0 	beq.w	8009c06 <UART_SetConfig+0x76e>
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	dc04      	bgt.n	8009a94 <UART_SetConfig+0x5fc>
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d00c      	beq.n	8009aa8 <UART_SetConfig+0x610>
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d065      	beq.n	8009b5e <UART_SetConfig+0x6c6>
 8009a92:	e27a      	b.n	8009f8a <UART_SetConfig+0xaf2>
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	f000 81b0 	beq.w	8009dfa <UART_SetConfig+0x962>
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	f000 821e 	beq.w	8009edc <UART_SetConfig+0xa44>
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	f000 8104 	beq.w	8009cae <UART_SetConfig+0x816>
 8009aa6:	e270      	b.n	8009f8a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009aa8:	f7fd fbc2 	bl	8007230 <HAL_RCCEx_GetD3PCLK1Freq>
 8009aac:	4602      	mov	r2, r0
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d04e      	beq.n	8009b54 <UART_SetConfig+0x6bc>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d048      	beq.n	8009b50 <UART_SetConfig+0x6b8>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d042      	beq.n	8009b4c <UART_SetConfig+0x6b4>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d03c      	beq.n	8009b48 <UART_SetConfig+0x6b0>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	d036      	beq.n	8009b44 <UART_SetConfig+0x6ac>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b05      	cmp	r3, #5
 8009adc:	d026      	beq.n	8009b2c <UART_SetConfig+0x694>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b06      	cmp	r3, #6
 8009ae4:	d020      	beq.n	8009b28 <UART_SetConfig+0x690>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b07      	cmp	r3, #7
 8009aec:	d01a      	beq.n	8009b24 <UART_SetConfig+0x68c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d014      	beq.n	8009b20 <UART_SetConfig+0x688>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	d00e      	beq.n	8009b1c <UART_SetConfig+0x684>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b0a      	cmp	r3, #10
 8009b04:	d008      	beq.n	8009b18 <UART_SetConfig+0x680>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b0b      	cmp	r3, #11
 8009b0c:	d102      	bne.n	8009b14 <UART_SetConfig+0x67c>
 8009b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b12:	e020      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e01e      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	e01c      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	e01a      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b20:	2320      	movs	r3, #32
 8009b22:	e018      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b24:	2310      	movs	r3, #16
 8009b26:	e016      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b28:	230c      	movs	r3, #12
 8009b2a:	e014      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b2c:	230a      	movs	r3, #10
 8009b2e:	e012      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b30:	40011400 	.word	0x40011400
 8009b34:	58024400 	.word	0x58024400
 8009b38:	40007800 	.word	0x40007800
 8009b3c:	40007c00 	.word	0x40007c00
 8009b40:	58000c00 	.word	0x58000c00
 8009b44:	2308      	movs	r3, #8
 8009b46:	e006      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b48:	2306      	movs	r3, #6
 8009b4a:	e004      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	e002      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e000      	b.n	8009b56 <UART_SetConfig+0x6be>
 8009b54:	2301      	movs	r3, #1
 8009b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b5c:	e219      	b.n	8009f92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fd fb7a 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d044      	beq.n	8009bfc <UART_SetConfig+0x764>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d03e      	beq.n	8009bf8 <UART_SetConfig+0x760>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d038      	beq.n	8009bf4 <UART_SetConfig+0x75c>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d032      	beq.n	8009bf0 <UART_SetConfig+0x758>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d02c      	beq.n	8009bec <UART_SetConfig+0x754>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	d026      	beq.n	8009be8 <UART_SetConfig+0x750>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d020      	beq.n	8009be4 <UART_SetConfig+0x74c>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b07      	cmp	r3, #7
 8009ba8:	d01a      	beq.n	8009be0 <UART_SetConfig+0x748>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d014      	beq.n	8009bdc <UART_SetConfig+0x744>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b09      	cmp	r3, #9
 8009bb8:	d00e      	beq.n	8009bd8 <UART_SetConfig+0x740>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b0a      	cmp	r3, #10
 8009bc0:	d008      	beq.n	8009bd4 <UART_SetConfig+0x73c>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b0b      	cmp	r3, #11
 8009bc8:	d102      	bne.n	8009bd0 <UART_SetConfig+0x738>
 8009bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bce:	e016      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e014      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bd4:	2380      	movs	r3, #128	; 0x80
 8009bd6:	e012      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bd8:	2340      	movs	r3, #64	; 0x40
 8009bda:	e010      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	e00e      	b.n	8009bfe <UART_SetConfig+0x766>
 8009be0:	2310      	movs	r3, #16
 8009be2:	e00c      	b.n	8009bfe <UART_SetConfig+0x766>
 8009be4:	230c      	movs	r3, #12
 8009be6:	e00a      	b.n	8009bfe <UART_SetConfig+0x766>
 8009be8:	230a      	movs	r3, #10
 8009bea:	e008      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bec:	2308      	movs	r3, #8
 8009bee:	e006      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bf0:	2306      	movs	r3, #6
 8009bf2:	e004      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	e002      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e000      	b.n	8009bfe <UART_SetConfig+0x766>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c04:	e1c5      	b.n	8009f92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c06:	f107 030c 	add.w	r3, r7, #12
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd fc72 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d044      	beq.n	8009ca4 <UART_SetConfig+0x80c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d03e      	beq.n	8009ca0 <UART_SetConfig+0x808>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d038      	beq.n	8009c9c <UART_SetConfig+0x804>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d032      	beq.n	8009c98 <UART_SetConfig+0x800>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d02c      	beq.n	8009c94 <UART_SetConfig+0x7fc>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d026      	beq.n	8009c90 <UART_SetConfig+0x7f8>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2b06      	cmp	r3, #6
 8009c48:	d020      	beq.n	8009c8c <UART_SetConfig+0x7f4>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	d01a      	beq.n	8009c88 <UART_SetConfig+0x7f0>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b08      	cmp	r3, #8
 8009c58:	d014      	beq.n	8009c84 <UART_SetConfig+0x7ec>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b09      	cmp	r3, #9
 8009c60:	d00e      	beq.n	8009c80 <UART_SetConfig+0x7e8>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b0a      	cmp	r3, #10
 8009c68:	d008      	beq.n	8009c7c <UART_SetConfig+0x7e4>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b0b      	cmp	r3, #11
 8009c70:	d102      	bne.n	8009c78 <UART_SetConfig+0x7e0>
 8009c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c76:	e016      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e014      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c7c:	2380      	movs	r3, #128	; 0x80
 8009c7e:	e012      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	e010      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c84:	2320      	movs	r3, #32
 8009c86:	e00e      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	e00c      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	e00a      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c90:	230a      	movs	r3, #10
 8009c92:	e008      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c94:	2308      	movs	r3, #8
 8009c96:	e006      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c98:	2306      	movs	r3, #6
 8009c9a:	e004      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	e002      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e000      	b.n	8009ca6 <UART_SetConfig+0x80e>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cac:	e171      	b.n	8009f92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cae:	4b7a      	ldr	r3, [pc, #488]	; (8009e98 <UART_SetConfig+0xa00>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d054      	beq.n	8009d64 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009cba:	4b77      	ldr	r3, [pc, #476]	; (8009e98 <UART_SetConfig+0xa00>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	08db      	lsrs	r3, r3, #3
 8009cc0:	f003 0303 	and.w	r3, r3, #3
 8009cc4:	4a75      	ldr	r2, [pc, #468]	; (8009e9c <UART_SetConfig+0xa04>)
 8009cc6:	40da      	lsrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d044      	beq.n	8009d5a <UART_SetConfig+0x8c2>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d03e      	beq.n	8009d56 <UART_SetConfig+0x8be>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d038      	beq.n	8009d52 <UART_SetConfig+0x8ba>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d032      	beq.n	8009d4e <UART_SetConfig+0x8b6>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d02c      	beq.n	8009d4a <UART_SetConfig+0x8b2>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b05      	cmp	r3, #5
 8009cf6:	d026      	beq.n	8009d46 <UART_SetConfig+0x8ae>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	2b06      	cmp	r3, #6
 8009cfe:	d020      	beq.n	8009d42 <UART_SetConfig+0x8aa>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	2b07      	cmp	r3, #7
 8009d06:	d01a      	beq.n	8009d3e <UART_SetConfig+0x8a6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b08      	cmp	r3, #8
 8009d0e:	d014      	beq.n	8009d3a <UART_SetConfig+0x8a2>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d00e      	beq.n	8009d36 <UART_SetConfig+0x89e>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	2b0a      	cmp	r3, #10
 8009d1e:	d008      	beq.n	8009d32 <UART_SetConfig+0x89a>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	2b0b      	cmp	r3, #11
 8009d26:	d102      	bne.n	8009d2e <UART_SetConfig+0x896>
 8009d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d2c:	e016      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e014      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	e012      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d36:	2340      	movs	r3, #64	; 0x40
 8009d38:	e010      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d3a:	2320      	movs	r3, #32
 8009d3c:	e00e      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d3e:	2310      	movs	r3, #16
 8009d40:	e00c      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d42:	230c      	movs	r3, #12
 8009d44:	e00a      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d46:	230a      	movs	r3, #10
 8009d48:	e008      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	e006      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d4e:	2306      	movs	r3, #6
 8009d50:	e004      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d52:	2304      	movs	r3, #4
 8009d54:	e002      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e000      	b.n	8009d5c <UART_SetConfig+0x8c4>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009d62:	e116      	b.n	8009f92 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d043      	beq.n	8009df4 <UART_SetConfig+0x95c>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d03d      	beq.n	8009df0 <UART_SetConfig+0x958>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d037      	beq.n	8009dec <UART_SetConfig+0x954>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d031      	beq.n	8009de8 <UART_SetConfig+0x950>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d02b      	beq.n	8009de4 <UART_SetConfig+0x94c>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d025      	beq.n	8009de0 <UART_SetConfig+0x948>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b06      	cmp	r3, #6
 8009d9a:	d01f      	beq.n	8009ddc <UART_SetConfig+0x944>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b07      	cmp	r3, #7
 8009da2:	d019      	beq.n	8009dd8 <UART_SetConfig+0x940>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d013      	beq.n	8009dd4 <UART_SetConfig+0x93c>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b09      	cmp	r3, #9
 8009db2:	d00d      	beq.n	8009dd0 <UART_SetConfig+0x938>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b0a      	cmp	r3, #10
 8009dba:	d007      	beq.n	8009dcc <UART_SetConfig+0x934>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b0b      	cmp	r3, #11
 8009dc2:	d101      	bne.n	8009dc8 <UART_SetConfig+0x930>
 8009dc4:	4b36      	ldr	r3, [pc, #216]	; (8009ea0 <UART_SetConfig+0xa08>)
 8009dc6:	e016      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dc8:	4b34      	ldr	r3, [pc, #208]	; (8009e9c <UART_SetConfig+0xa04>)
 8009dca:	e014      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dcc:	4b35      	ldr	r3, [pc, #212]	; (8009ea4 <UART_SetConfig+0xa0c>)
 8009dce:	e012      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dd0:	4b35      	ldr	r3, [pc, #212]	; (8009ea8 <UART_SetConfig+0xa10>)
 8009dd2:	e010      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dd4:	4b35      	ldr	r3, [pc, #212]	; (8009eac <UART_SetConfig+0xa14>)
 8009dd6:	e00e      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dd8:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <UART_SetConfig+0xa18>)
 8009dda:	e00c      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009ddc:	4b35      	ldr	r3, [pc, #212]	; (8009eb4 <UART_SetConfig+0xa1c>)
 8009dde:	e00a      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009de0:	4b35      	ldr	r3, [pc, #212]	; (8009eb8 <UART_SetConfig+0xa20>)
 8009de2:	e008      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009de4:	4b35      	ldr	r3, [pc, #212]	; (8009ebc <UART_SetConfig+0xa24>)
 8009de6:	e006      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009de8:	4b35      	ldr	r3, [pc, #212]	; (8009ec0 <UART_SetConfig+0xa28>)
 8009dea:	e004      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009dec:	4b35      	ldr	r3, [pc, #212]	; (8009ec4 <UART_SetConfig+0xa2c>)
 8009dee:	e002      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009df0:	4b35      	ldr	r3, [pc, #212]	; (8009ec8 <UART_SetConfig+0xa30>)
 8009df2:	e000      	b.n	8009df6 <UART_SetConfig+0x95e>
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <UART_SetConfig+0xa04>)
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df8:	e0cb      	b.n	8009f92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d046      	beq.n	8009e90 <UART_SetConfig+0x9f8>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d040      	beq.n	8009e8c <UART_SetConfig+0x9f4>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d03a      	beq.n	8009e88 <UART_SetConfig+0x9f0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d034      	beq.n	8009e84 <UART_SetConfig+0x9ec>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d02e      	beq.n	8009e80 <UART_SetConfig+0x9e8>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d028      	beq.n	8009e7c <UART_SetConfig+0x9e4>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	2b06      	cmp	r3, #6
 8009e30:	d022      	beq.n	8009e78 <UART_SetConfig+0x9e0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	2b07      	cmp	r3, #7
 8009e38:	d01c      	beq.n	8009e74 <UART_SetConfig+0x9dc>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b08      	cmp	r3, #8
 8009e40:	d016      	beq.n	8009e70 <UART_SetConfig+0x9d8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d00f      	beq.n	8009e6a <UART_SetConfig+0x9d2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b0a      	cmp	r3, #10
 8009e50:	d008      	beq.n	8009e64 <UART_SetConfig+0x9cc>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b0b      	cmp	r3, #11
 8009e58:	d102      	bne.n	8009e60 <UART_SetConfig+0x9c8>
 8009e5a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009e5e:	e018      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e60:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <UART_SetConfig+0xa18>)
 8009e62:	e016      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e64:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009e68:	e013      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009e6e:	e010      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e70:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <UART_SetConfig+0xa34>)
 8009e72:	e00e      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <UART_SetConfig+0xa08>)
 8009e76:	e00c      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e78:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <UART_SetConfig+0xa38>)
 8009e7a:	e00a      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e7c:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <UART_SetConfig+0xa3c>)
 8009e7e:	e008      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e80:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <UART_SetConfig+0xa0c>)
 8009e82:	e006      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e84:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <UART_SetConfig+0xa40>)
 8009e86:	e004      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e88:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <UART_SetConfig+0xa10>)
 8009e8a:	e002      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <UART_SetConfig+0xa14>)
 8009e8e:	e000      	b.n	8009e92 <UART_SetConfig+0x9fa>
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <UART_SetConfig+0xa18>)
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e94:	e07d      	b.n	8009f92 <UART_SetConfig+0xafa>
 8009e96:	bf00      	nop
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	03d09000 	.word	0x03d09000
 8009ea0:	0003d090 	.word	0x0003d090
 8009ea4:	0007a120 	.word	0x0007a120
 8009ea8:	000f4240 	.word	0x000f4240
 8009eac:	001e8480 	.word	0x001e8480
 8009eb0:	003d0900 	.word	0x003d0900
 8009eb4:	00516155 	.word	0x00516155
 8009eb8:	0061a800 	.word	0x0061a800
 8009ebc:	007a1200 	.word	0x007a1200
 8009ec0:	00a2c2aa 	.word	0x00a2c2aa
 8009ec4:	00f42400 	.word	0x00f42400
 8009ec8:	01e84800 	.word	0x01e84800
 8009ecc:	0001e848 	.word	0x0001e848
 8009ed0:	00051615 	.word	0x00051615
 8009ed4:	00061a80 	.word	0x00061a80
 8009ed8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d04e      	beq.n	8009f82 <UART_SetConfig+0xaea>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d047      	beq.n	8009f7c <UART_SetConfig+0xae4>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d040      	beq.n	8009f76 <UART_SetConfig+0xade>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d039      	beq.n	8009f70 <UART_SetConfig+0xad8>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d032      	beq.n	8009f6a <UART_SetConfig+0xad2>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d02b      	beq.n	8009f64 <UART_SetConfig+0xacc>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b06      	cmp	r3, #6
 8009f12:	d024      	beq.n	8009f5e <UART_SetConfig+0xac6>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	d01d      	beq.n	8009f58 <UART_SetConfig+0xac0>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d016      	beq.n	8009f52 <UART_SetConfig+0xaba>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b09      	cmp	r3, #9
 8009f2a:	d00f      	beq.n	8009f4c <UART_SetConfig+0xab4>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	2b0a      	cmp	r3, #10
 8009f32:	d008      	beq.n	8009f46 <UART_SetConfig+0xaae>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b0b      	cmp	r3, #11
 8009f3a:	d101      	bne.n	8009f40 <UART_SetConfig+0xaa8>
 8009f3c:	2380      	movs	r3, #128	; 0x80
 8009f3e:	e022      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f44:	e01f      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f4a:	e01c      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f50:	e019      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f56:	e016      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f5c:	e013      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009f62:	e010      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009f68:	e00d      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f6e:	e00a      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f70:	f241 5355 	movw	r3, #5461	; 0x1555
 8009f74:	e007      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f7a:	e004      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f80:	e001      	b.n	8009f86 <UART_SetConfig+0xaee>
 8009f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f88:	e003      	b.n	8009f92 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009f90:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f001 83e8 	beq.w	800b76a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d305      	bcc.n	8009fb6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d904      	bls.n	8009fc0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbc:	f001 bbd5 	b.w	800b76a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009fc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	f000 8154 	beq.w	800a272 <UART_SetConfig+0xdda>
 8009fca:	2b08      	cmp	r3, #8
 8009fcc:	dc06      	bgt.n	8009fdc <UART_SetConfig+0xb44>
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d00f      	beq.n	8009ff2 <UART_SetConfig+0xb5a>
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	f000 80ac 	beq.w	800a130 <UART_SetConfig+0xc98>
 8009fd8:	f000 bc30 	b.w	800a83c <UART_SetConfig+0x13a4>
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	f000 832d 	beq.w	800a63c <UART_SetConfig+0x11a4>
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	f000 83a5 	beq.w	800a732 <UART_SetConfig+0x129a>
 8009fe8:	2b10      	cmp	r3, #16
 8009fea:	f000 81e3 	beq.w	800a3b4 <UART_SetConfig+0xf1c>
 8009fee:	f000 bc25 	b.w	800a83c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ff2:	f7fd f91d 	bl	8007230 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ff6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f04f 0100 	mov.w	r1, #0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d067      	beq.n	800a0d8 <UART_SetConfig+0xc40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d05e      	beq.n	800a0ce <UART_SetConfig+0xc36>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b02      	cmp	r3, #2
 800a016:	d055      	beq.n	800a0c4 <UART_SetConfig+0xc2c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d04c      	beq.n	800a0ba <UART_SetConfig+0xc22>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b04      	cmp	r3, #4
 800a026:	d043      	beq.n	800a0b0 <UART_SetConfig+0xc18>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b05      	cmp	r3, #5
 800a02e:	d03a      	beq.n	800a0a6 <UART_SetConfig+0xc0e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b06      	cmp	r3, #6
 800a036:	d031      	beq.n	800a09c <UART_SetConfig+0xc04>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b07      	cmp	r3, #7
 800a03e:	d028      	beq.n	800a092 <UART_SetConfig+0xbfa>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b08      	cmp	r3, #8
 800a046:	d01f      	beq.n	800a088 <UART_SetConfig+0xbf0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d016      	beq.n	800a07e <UART_SetConfig+0xbe6>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b0a      	cmp	r3, #10
 800a056:	d00d      	beq.n	800a074 <UART_SetConfig+0xbdc>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b0b      	cmp	r3, #11
 800a05e:	d104      	bne.n	800a06a <UART_SetConfig+0xbd2>
 800a060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a064:	f04f 0400 	mov.w	r4, #0
 800a068:	e03a      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a06a:	f04f 0301 	mov.w	r3, #1
 800a06e:	f04f 0400 	mov.w	r4, #0
 800a072:	e035      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a074:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a078:	f04f 0400 	mov.w	r4, #0
 800a07c:	e030      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a07e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a082:	f04f 0400 	mov.w	r4, #0
 800a086:	e02b      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a088:	f04f 0320 	mov.w	r3, #32
 800a08c:	f04f 0400 	mov.w	r4, #0
 800a090:	e026      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a092:	f04f 0310 	mov.w	r3, #16
 800a096:	f04f 0400 	mov.w	r4, #0
 800a09a:	e021      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a09c:	f04f 030c 	mov.w	r3, #12
 800a0a0:	f04f 0400 	mov.w	r4, #0
 800a0a4:	e01c      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0a6:	f04f 030a 	mov.w	r3, #10
 800a0aa:	f04f 0400 	mov.w	r4, #0
 800a0ae:	e017      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0b0:	f04f 0308 	mov.w	r3, #8
 800a0b4:	f04f 0400 	mov.w	r4, #0
 800a0b8:	e012      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0ba:	f04f 0306 	mov.w	r3, #6
 800a0be:	f04f 0400 	mov.w	r4, #0
 800a0c2:	e00d      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0c4:	f04f 0304 	mov.w	r3, #4
 800a0c8:	f04f 0400 	mov.w	r4, #0
 800a0cc:	e008      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0ce:	f04f 0302 	mov.w	r3, #2
 800a0d2:	f04f 0400 	mov.w	r4, #0
 800a0d6:	e003      	b.n	800a0e0 <UART_SetConfig+0xc48>
 800a0d8:	f04f 0301 	mov.w	r3, #1
 800a0dc:	f04f 0400 	mov.w	r4, #0
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	f7f6 f8f8 	bl	80002d8 <__aeabi_uldivmod>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	f04f 0400 	mov.w	r4, #0
 800a0f8:	0214      	lsls	r4, r2, #8
 800a0fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0fe:	020b      	lsls	r3, r1, #8
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	6852      	ldr	r2, [r2, #4]
 800a104:	0852      	lsrs	r2, r2, #1
 800a106:	4611      	mov	r1, r2
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	eb13 0b01 	adds.w	fp, r3, r1
 800a110:	eb44 0c02 	adc.w	ip, r4, r2
 800a114:	4658      	mov	r0, fp
 800a116:	4661      	mov	r1, ip
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f04f 0400 	mov.w	r4, #0
 800a120:	461a      	mov	r2, r3
 800a122:	4623      	mov	r3, r4
 800a124:	f7f6 f8d8 	bl	80002d8 <__aeabi_uldivmod>
 800a128:	4603      	mov	r3, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a12e:	e389      	b.n	800a844 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a130:	f107 0318 	add.w	r3, r7, #24
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd f891 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f04f 0100 	mov.w	r1, #0
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d067      	beq.n	800a21a <UART_SetConfig+0xd82>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d05e      	beq.n	800a210 <UART_SetConfig+0xd78>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b02      	cmp	r3, #2
 800a158:	d055      	beq.n	800a206 <UART_SetConfig+0xd6e>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d04c      	beq.n	800a1fc <UART_SetConfig+0xd64>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b04      	cmp	r3, #4
 800a168:	d043      	beq.n	800a1f2 <UART_SetConfig+0xd5a>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b05      	cmp	r3, #5
 800a170:	d03a      	beq.n	800a1e8 <UART_SetConfig+0xd50>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b06      	cmp	r3, #6
 800a178:	d031      	beq.n	800a1de <UART_SetConfig+0xd46>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b07      	cmp	r3, #7
 800a180:	d028      	beq.n	800a1d4 <UART_SetConfig+0xd3c>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b08      	cmp	r3, #8
 800a188:	d01f      	beq.n	800a1ca <UART_SetConfig+0xd32>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d016      	beq.n	800a1c0 <UART_SetConfig+0xd28>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b0a      	cmp	r3, #10
 800a198:	d00d      	beq.n	800a1b6 <UART_SetConfig+0xd1e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b0b      	cmp	r3, #11
 800a1a0:	d104      	bne.n	800a1ac <UART_SetConfig+0xd14>
 800a1a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1a6:	f04f 0400 	mov.w	r4, #0
 800a1aa:	e03a      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1ac:	f04f 0301 	mov.w	r3, #1
 800a1b0:	f04f 0400 	mov.w	r4, #0
 800a1b4:	e035      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a1ba:	f04f 0400 	mov.w	r4, #0
 800a1be:	e030      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a1c4:	f04f 0400 	mov.w	r4, #0
 800a1c8:	e02b      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1ca:	f04f 0320 	mov.w	r3, #32
 800a1ce:	f04f 0400 	mov.w	r4, #0
 800a1d2:	e026      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1d4:	f04f 0310 	mov.w	r3, #16
 800a1d8:	f04f 0400 	mov.w	r4, #0
 800a1dc:	e021      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1de:	f04f 030c 	mov.w	r3, #12
 800a1e2:	f04f 0400 	mov.w	r4, #0
 800a1e6:	e01c      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1e8:	f04f 030a 	mov.w	r3, #10
 800a1ec:	f04f 0400 	mov.w	r4, #0
 800a1f0:	e017      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1f2:	f04f 0308 	mov.w	r3, #8
 800a1f6:	f04f 0400 	mov.w	r4, #0
 800a1fa:	e012      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a1fc:	f04f 0306 	mov.w	r3, #6
 800a200:	f04f 0400 	mov.w	r4, #0
 800a204:	e00d      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a206:	f04f 0304 	mov.w	r3, #4
 800a20a:	f04f 0400 	mov.w	r4, #0
 800a20e:	e008      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a210:	f04f 0302 	mov.w	r3, #2
 800a214:	f04f 0400 	mov.w	r4, #0
 800a218:	e003      	b.n	800a222 <UART_SetConfig+0xd8a>
 800a21a:	f04f 0301 	mov.w	r3, #1
 800a21e:	f04f 0400 	mov.w	r4, #0
 800a222:	461a      	mov	r2, r3
 800a224:	4623      	mov	r3, r4
 800a226:	f7f6 f857 	bl	80002d8 <__aeabi_uldivmod>
 800a22a:	4603      	mov	r3, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	4619      	mov	r1, r3
 800a230:	4622      	mov	r2, r4
 800a232:	f04f 0300 	mov.w	r3, #0
 800a236:	f04f 0400 	mov.w	r4, #0
 800a23a:	0214      	lsls	r4, r2, #8
 800a23c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a240:	020b      	lsls	r3, r1, #8
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	6852      	ldr	r2, [r2, #4]
 800a246:	0852      	lsrs	r2, r2, #1
 800a248:	4611      	mov	r1, r2
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	eb13 0b01 	adds.w	fp, r3, r1
 800a252:	eb44 0c02 	adc.w	ip, r4, r2
 800a256:	4658      	mov	r0, fp
 800a258:	4661      	mov	r1, ip
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f04f 0400 	mov.w	r4, #0
 800a262:	461a      	mov	r2, r3
 800a264:	4623      	mov	r3, r4
 800a266:	f7f6 f837 	bl	80002d8 <__aeabi_uldivmod>
 800a26a:	4603      	mov	r3, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a270:	e2e8      	b.n	800a844 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd f93c 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4618      	mov	r0, r3
 800a280:	f04f 0100 	mov.w	r1, #0
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d067      	beq.n	800a35c <UART_SetConfig+0xec4>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b01      	cmp	r3, #1
 800a292:	d05e      	beq.n	800a352 <UART_SetConfig+0xeba>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d055      	beq.n	800a348 <UART_SetConfig+0xeb0>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d04c      	beq.n	800a33e <UART_SetConfig+0xea6>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d043      	beq.n	800a334 <UART_SetConfig+0xe9c>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b05      	cmp	r3, #5
 800a2b2:	d03a      	beq.n	800a32a <UART_SetConfig+0xe92>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b06      	cmp	r3, #6
 800a2ba:	d031      	beq.n	800a320 <UART_SetConfig+0xe88>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b07      	cmp	r3, #7
 800a2c2:	d028      	beq.n	800a316 <UART_SetConfig+0xe7e>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d01f      	beq.n	800a30c <UART_SetConfig+0xe74>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d016      	beq.n	800a302 <UART_SetConfig+0xe6a>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	2b0a      	cmp	r3, #10
 800a2da:	d00d      	beq.n	800a2f8 <UART_SetConfig+0xe60>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	2b0b      	cmp	r3, #11
 800a2e2:	d104      	bne.n	800a2ee <UART_SetConfig+0xe56>
 800a2e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2e8:	f04f 0400 	mov.w	r4, #0
 800a2ec:	e03a      	b.n	800a364 <UART_SetConfig+0xecc>
 800a2ee:	f04f 0301 	mov.w	r3, #1
 800a2f2:	f04f 0400 	mov.w	r4, #0
 800a2f6:	e035      	b.n	800a364 <UART_SetConfig+0xecc>
 800a2f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2fc:	f04f 0400 	mov.w	r4, #0
 800a300:	e030      	b.n	800a364 <UART_SetConfig+0xecc>
 800a302:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a306:	f04f 0400 	mov.w	r4, #0
 800a30a:	e02b      	b.n	800a364 <UART_SetConfig+0xecc>
 800a30c:	f04f 0320 	mov.w	r3, #32
 800a310:	f04f 0400 	mov.w	r4, #0
 800a314:	e026      	b.n	800a364 <UART_SetConfig+0xecc>
 800a316:	f04f 0310 	mov.w	r3, #16
 800a31a:	f04f 0400 	mov.w	r4, #0
 800a31e:	e021      	b.n	800a364 <UART_SetConfig+0xecc>
 800a320:	f04f 030c 	mov.w	r3, #12
 800a324:	f04f 0400 	mov.w	r4, #0
 800a328:	e01c      	b.n	800a364 <UART_SetConfig+0xecc>
 800a32a:	f04f 030a 	mov.w	r3, #10
 800a32e:	f04f 0400 	mov.w	r4, #0
 800a332:	e017      	b.n	800a364 <UART_SetConfig+0xecc>
 800a334:	f04f 0308 	mov.w	r3, #8
 800a338:	f04f 0400 	mov.w	r4, #0
 800a33c:	e012      	b.n	800a364 <UART_SetConfig+0xecc>
 800a33e:	f04f 0306 	mov.w	r3, #6
 800a342:	f04f 0400 	mov.w	r4, #0
 800a346:	e00d      	b.n	800a364 <UART_SetConfig+0xecc>
 800a348:	f04f 0304 	mov.w	r3, #4
 800a34c:	f04f 0400 	mov.w	r4, #0
 800a350:	e008      	b.n	800a364 <UART_SetConfig+0xecc>
 800a352:	f04f 0302 	mov.w	r3, #2
 800a356:	f04f 0400 	mov.w	r4, #0
 800a35a:	e003      	b.n	800a364 <UART_SetConfig+0xecc>
 800a35c:	f04f 0301 	mov.w	r3, #1
 800a360:	f04f 0400 	mov.w	r4, #0
 800a364:	461a      	mov	r2, r3
 800a366:	4623      	mov	r3, r4
 800a368:	f7f5 ffb6 	bl	80002d8 <__aeabi_uldivmod>
 800a36c:	4603      	mov	r3, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	4619      	mov	r1, r3
 800a372:	4622      	mov	r2, r4
 800a374:	f04f 0300 	mov.w	r3, #0
 800a378:	f04f 0400 	mov.w	r4, #0
 800a37c:	0214      	lsls	r4, r2, #8
 800a37e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a382:	020b      	lsls	r3, r1, #8
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6852      	ldr	r2, [r2, #4]
 800a388:	0852      	lsrs	r2, r2, #1
 800a38a:	4611      	mov	r1, r2
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	eb13 0b01 	adds.w	fp, r3, r1
 800a394:	eb44 0c02 	adc.w	ip, r4, r2
 800a398:	4658      	mov	r0, fp
 800a39a:	4661      	mov	r1, ip
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f04f 0400 	mov.w	r4, #0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	f7f5 ff96 	bl	80002d8 <__aeabi_uldivmod>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3b2:	e247      	b.n	800a844 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3b4:	4b96      	ldr	r3, [pc, #600]	; (800a610 <UART_SetConfig+0x1178>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 80a3 	beq.w	800a508 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c2:	4b93      	ldr	r3, [pc, #588]	; (800a610 <UART_SetConfig+0x1178>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	08db      	lsrs	r3, r3, #3
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	4a91      	ldr	r2, [pc, #580]	; (800a614 <UART_SetConfig+0x117c>)
 800a3ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d067      	beq.n	800a4b0 <UART_SetConfig+0x1018>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d05e      	beq.n	800a4a6 <UART_SetConfig+0x100e>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d055      	beq.n	800a49c <UART_SetConfig+0x1004>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d04c      	beq.n	800a492 <UART_SetConfig+0xffa>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d043      	beq.n	800a488 <UART_SetConfig+0xff0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b05      	cmp	r3, #5
 800a406:	d03a      	beq.n	800a47e <UART_SetConfig+0xfe6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b06      	cmp	r3, #6
 800a40e:	d031      	beq.n	800a474 <UART_SetConfig+0xfdc>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b07      	cmp	r3, #7
 800a416:	d028      	beq.n	800a46a <UART_SetConfig+0xfd2>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d01f      	beq.n	800a460 <UART_SetConfig+0xfc8>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b09      	cmp	r3, #9
 800a426:	d016      	beq.n	800a456 <UART_SetConfig+0xfbe>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2b0a      	cmp	r3, #10
 800a42e:	d00d      	beq.n	800a44c <UART_SetConfig+0xfb4>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	2b0b      	cmp	r3, #11
 800a436:	d104      	bne.n	800a442 <UART_SetConfig+0xfaa>
 800a438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a43c:	f04f 0400 	mov.w	r4, #0
 800a440:	e03a      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a442:	f04f 0301 	mov.w	r3, #1
 800a446:	f04f 0400 	mov.w	r4, #0
 800a44a:	e035      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a44c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a450:	f04f 0400 	mov.w	r4, #0
 800a454:	e030      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a456:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a45a:	f04f 0400 	mov.w	r4, #0
 800a45e:	e02b      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a460:	f04f 0320 	mov.w	r3, #32
 800a464:	f04f 0400 	mov.w	r4, #0
 800a468:	e026      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a46a:	f04f 0310 	mov.w	r3, #16
 800a46e:	f04f 0400 	mov.w	r4, #0
 800a472:	e021      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a474:	f04f 030c 	mov.w	r3, #12
 800a478:	f04f 0400 	mov.w	r4, #0
 800a47c:	e01c      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a47e:	f04f 030a 	mov.w	r3, #10
 800a482:	f04f 0400 	mov.w	r4, #0
 800a486:	e017      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a488:	f04f 0308 	mov.w	r3, #8
 800a48c:	f04f 0400 	mov.w	r4, #0
 800a490:	e012      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a492:	f04f 0306 	mov.w	r3, #6
 800a496:	f04f 0400 	mov.w	r4, #0
 800a49a:	e00d      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a49c:	f04f 0304 	mov.w	r3, #4
 800a4a0:	f04f 0400 	mov.w	r4, #0
 800a4a4:	e008      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a4a6:	f04f 0302 	mov.w	r3, #2
 800a4aa:	f04f 0400 	mov.w	r4, #0
 800a4ae:	e003      	b.n	800a4b8 <UART_SetConfig+0x1020>
 800a4b0:	f04f 0301 	mov.w	r3, #1
 800a4b4:	f04f 0400 	mov.w	r4, #0
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4623      	mov	r3, r4
 800a4bc:	f7f5 ff0c 	bl	80002d8 <__aeabi_uldivmod>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	f04f 0300 	mov.w	r3, #0
 800a4cc:	f04f 0400 	mov.w	r4, #0
 800a4d0:	0214      	lsls	r4, r2, #8
 800a4d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4d6:	020b      	lsls	r3, r1, #8
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	6852      	ldr	r2, [r2, #4]
 800a4dc:	0852      	lsrs	r2, r2, #1
 800a4de:	4611      	mov	r1, r2
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4e8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	4661      	mov	r1, ip
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f04f 0400 	mov.w	r4, #0
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	f7f5 feec 	bl	80002d8 <__aeabi_uldivmod>
 800a500:	4603      	mov	r3, r0
 800a502:	460c      	mov	r4, r1
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a506:	e19d      	b.n	800a844 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d05b      	beq.n	800a5c8 <UART_SetConfig+0x1130>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b01      	cmp	r3, #1
 800a516:	d053      	beq.n	800a5c0 <UART_SetConfig+0x1128>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d04b      	beq.n	800a5b8 <UART_SetConfig+0x1120>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b03      	cmp	r3, #3
 800a526:	d043      	beq.n	800a5b0 <UART_SetConfig+0x1118>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d03b      	beq.n	800a5a8 <UART_SetConfig+0x1110>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b05      	cmp	r3, #5
 800a536:	d033      	beq.n	800a5a0 <UART_SetConfig+0x1108>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b06      	cmp	r3, #6
 800a53e:	d02b      	beq.n	800a598 <UART_SetConfig+0x1100>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b07      	cmp	r3, #7
 800a546:	d023      	beq.n	800a590 <UART_SetConfig+0x10f8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d01b      	beq.n	800a588 <UART_SetConfig+0x10f0>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b09      	cmp	r3, #9
 800a556:	d013      	beq.n	800a580 <UART_SetConfig+0x10e8>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b0a      	cmp	r3, #10
 800a55e:	d00b      	beq.n	800a578 <UART_SetConfig+0x10e0>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b0b      	cmp	r3, #11
 800a566:	d103      	bne.n	800a570 <UART_SetConfig+0x10d8>
 800a568:	4b2a      	ldr	r3, [pc, #168]	; (800a614 <UART_SetConfig+0x117c>)
 800a56a:	f04f 0400 	mov.w	r4, #0
 800a56e:	e02e      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a570:	4b29      	ldr	r3, [pc, #164]	; (800a618 <UART_SetConfig+0x1180>)
 800a572:	f04f 0403 	mov.w	r4, #3
 800a576:	e02a      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a578:	4b28      	ldr	r3, [pc, #160]	; (800a61c <UART_SetConfig+0x1184>)
 800a57a:	f04f 0400 	mov.w	r4, #0
 800a57e:	e026      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a580:	4b27      	ldr	r3, [pc, #156]	; (800a620 <UART_SetConfig+0x1188>)
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	e022      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a588:	4b26      	ldr	r3, [pc, #152]	; (800a624 <UART_SetConfig+0x118c>)
 800a58a:	f04f 0400 	mov.w	r4, #0
 800a58e:	e01e      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <UART_SetConfig+0x1190>)
 800a592:	f04f 0400 	mov.w	r4, #0
 800a596:	e01a      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a598:	a419      	add	r4, pc, #100	; (adr r4, 800a600 <UART_SetConfig+0x1168>)
 800a59a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a59e:	e016      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5a0:	4b22      	ldr	r3, [pc, #136]	; (800a62c <UART_SetConfig+0x1194>)
 800a5a2:	f04f 0400 	mov.w	r4, #0
 800a5a6:	e012      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5a8:	4b21      	ldr	r3, [pc, #132]	; (800a630 <UART_SetConfig+0x1198>)
 800a5aa:	f04f 0400 	mov.w	r4, #0
 800a5ae:	e00e      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5b0:	a415      	add	r4, pc, #84	; (adr r4, 800a608 <UART_SetConfig+0x1170>)
 800a5b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a5b6:	e00a      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <UART_SetConfig+0x119c>)
 800a5ba:	f04f 0400 	mov.w	r4, #0
 800a5be:	e006      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5c0:	4b1d      	ldr	r3, [pc, #116]	; (800a638 <UART_SetConfig+0x11a0>)
 800a5c2:	f04f 0401 	mov.w	r4, #1
 800a5c6:	e002      	b.n	800a5ce <UART_SetConfig+0x1136>
 800a5c8:	4b13      	ldr	r3, [pc, #76]	; (800a618 <UART_SetConfig+0x1180>)
 800a5ca:	f04f 0403 	mov.w	r4, #3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6852      	ldr	r2, [r2, #4]
 800a5d2:	0852      	lsrs	r2, r2, #1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	eb13 0b01 	adds.w	fp, r3, r1
 800a5de:	eb44 0c02 	adc.w	ip, r4, r2
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	4661      	mov	r1, ip
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f04f 0400 	mov.w	r4, #0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	f7f5 fe71 	bl	80002d8 <__aeabi_uldivmod>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5fc:	e122      	b.n	800a844 <UART_SetConfig+0x13ac>
 800a5fe:	bf00      	nop
 800a600:	51615500 	.word	0x51615500
 800a604:	00000000 	.word	0x00000000
 800a608:	a2c2aa00 	.word	0xa2c2aa00
 800a60c:	00000000 	.word	0x00000000
 800a610:	58024400 	.word	0x58024400
 800a614:	03d09000 	.word	0x03d09000
 800a618:	d0900000 	.word	0xd0900000
 800a61c:	07a12000 	.word	0x07a12000
 800a620:	0f424000 	.word	0x0f424000
 800a624:	1e848000 	.word	0x1e848000
 800a628:	3d090000 	.word	0x3d090000
 800a62c:	61a80000 	.word	0x61a80000
 800a630:	7a120000 	.word	0x7a120000
 800a634:	f4240000 	.word	0xf4240000
 800a638:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d05b      	beq.n	800a6fc <UART_SetConfig+0x1264>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d053      	beq.n	800a6f4 <UART_SetConfig+0x125c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b02      	cmp	r3, #2
 800a652:	d04b      	beq.n	800a6ec <UART_SetConfig+0x1254>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d043      	beq.n	800a6e4 <UART_SetConfig+0x124c>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b04      	cmp	r3, #4
 800a662:	d03b      	beq.n	800a6dc <UART_SetConfig+0x1244>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b05      	cmp	r3, #5
 800a66a:	d033      	beq.n	800a6d4 <UART_SetConfig+0x123c>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b06      	cmp	r3, #6
 800a672:	d02b      	beq.n	800a6cc <UART_SetConfig+0x1234>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b07      	cmp	r3, #7
 800a67a:	d023      	beq.n	800a6c4 <UART_SetConfig+0x122c>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b08      	cmp	r3, #8
 800a682:	d01b      	beq.n	800a6bc <UART_SetConfig+0x1224>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b09      	cmp	r3, #9
 800a68a:	d013      	beq.n	800a6b4 <UART_SetConfig+0x121c>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d00b      	beq.n	800a6ac <UART_SetConfig+0x1214>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d103      	bne.n	800a6a4 <UART_SetConfig+0x120c>
 800a69c:	4bc0      	ldr	r3, [pc, #768]	; (800a9a0 <UART_SetConfig+0x1508>)
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	e02e      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6a4:	4bbf      	ldr	r3, [pc, #764]	; (800a9a4 <UART_SetConfig+0x150c>)
 800a6a6:	f04f 0400 	mov.w	r4, #0
 800a6aa:	e02a      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6ac:	4bbe      	ldr	r3, [pc, #760]	; (800a9a8 <UART_SetConfig+0x1510>)
 800a6ae:	f04f 0400 	mov.w	r4, #0
 800a6b2:	e026      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6b4:	4bbd      	ldr	r3, [pc, #756]	; (800a9ac <UART_SetConfig+0x1514>)
 800a6b6:	f04f 0400 	mov.w	r4, #0
 800a6ba:	e022      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6bc:	4bbc      	ldr	r3, [pc, #752]	; (800a9b0 <UART_SetConfig+0x1518>)
 800a6be:	f04f 0400 	mov.w	r4, #0
 800a6c2:	e01e      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6c4:	4bbb      	ldr	r3, [pc, #748]	; (800a9b4 <UART_SetConfig+0x151c>)
 800a6c6:	f04f 0400 	mov.w	r4, #0
 800a6ca:	e01a      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6cc:	a4b0      	add	r4, pc, #704	; (adr r4, 800a990 <UART_SetConfig+0x14f8>)
 800a6ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a6d2:	e016      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6d4:	4bb8      	ldr	r3, [pc, #736]	; (800a9b8 <UART_SetConfig+0x1520>)
 800a6d6:	f04f 0400 	mov.w	r4, #0
 800a6da:	e012      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6dc:	4bb7      	ldr	r3, [pc, #732]	; (800a9bc <UART_SetConfig+0x1524>)
 800a6de:	f04f 0400 	mov.w	r4, #0
 800a6e2:	e00e      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6e4:	a4ac      	add	r4, pc, #688	; (adr r4, 800a998 <UART_SetConfig+0x1500>)
 800a6e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a6ea:	e00a      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6ec:	4bb4      	ldr	r3, [pc, #720]	; (800a9c0 <UART_SetConfig+0x1528>)
 800a6ee:	f04f 0400 	mov.w	r4, #0
 800a6f2:	e006      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6f4:	4bb3      	ldr	r3, [pc, #716]	; (800a9c4 <UART_SetConfig+0x152c>)
 800a6f6:	f04f 0400 	mov.w	r4, #0
 800a6fa:	e002      	b.n	800a702 <UART_SetConfig+0x126a>
 800a6fc:	4ba9      	ldr	r3, [pc, #676]	; (800a9a4 <UART_SetConfig+0x150c>)
 800a6fe:	f04f 0400 	mov.w	r4, #0
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6852      	ldr	r2, [r2, #4]
 800a706:	0852      	lsrs	r2, r2, #1
 800a708:	4611      	mov	r1, r2
 800a70a:	f04f 0200 	mov.w	r2, #0
 800a70e:	eb13 0b01 	adds.w	fp, r3, r1
 800a712:	eb44 0c02 	adc.w	ip, r4, r2
 800a716:	4658      	mov	r0, fp
 800a718:	4661      	mov	r1, ip
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f04f 0400 	mov.w	r4, #0
 800a722:	461a      	mov	r2, r3
 800a724:	4623      	mov	r3, r4
 800a726:	f7f5 fdd7 	bl	80002d8 <__aeabi_uldivmod>
 800a72a:	4603      	mov	r3, r0
 800a72c:	460c      	mov	r4, r1
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a730:	e088      	b.n	800a844 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d064      	beq.n	800a804 <UART_SetConfig+0x136c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d05b      	beq.n	800a7fa <UART_SetConfig+0x1362>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b02      	cmp	r3, #2
 800a748:	d052      	beq.n	800a7f0 <UART_SetConfig+0x1358>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d04a      	beq.n	800a7e8 <UART_SetConfig+0x1350>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b04      	cmp	r3, #4
 800a758:	d041      	beq.n	800a7de <UART_SetConfig+0x1346>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d039      	beq.n	800a7d6 <UART_SetConfig+0x133e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b06      	cmp	r3, #6
 800a768:	d031      	beq.n	800a7ce <UART_SetConfig+0x1336>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b07      	cmp	r3, #7
 800a770:	d028      	beq.n	800a7c4 <UART_SetConfig+0x132c>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b08      	cmp	r3, #8
 800a778:	d01f      	beq.n	800a7ba <UART_SetConfig+0x1322>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b09      	cmp	r3, #9
 800a780:	d016      	beq.n	800a7b0 <UART_SetConfig+0x1318>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b0a      	cmp	r3, #10
 800a788:	d00d      	beq.n	800a7a6 <UART_SetConfig+0x130e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b0b      	cmp	r3, #11
 800a790:	d104      	bne.n	800a79c <UART_SetConfig+0x1304>
 800a792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a796:	f04f 0400 	mov.w	r4, #0
 800a79a:	e037      	b.n	800a80c <UART_SetConfig+0x1374>
 800a79c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a7a0:	f04f 0400 	mov.w	r4, #0
 800a7a4:	e032      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7aa:	f04f 0400 	mov.w	r4, #0
 800a7ae:	e02d      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7b4:	f04f 0400 	mov.w	r4, #0
 800a7b8:	e028      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7be:	f04f 0400 	mov.w	r4, #0
 800a7c2:	e023      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7c8:	f04f 0400 	mov.w	r4, #0
 800a7cc:	e01e      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7ce:	4b7e      	ldr	r3, [pc, #504]	; (800a9c8 <UART_SetConfig+0x1530>)
 800a7d0:	f04f 0400 	mov.w	r4, #0
 800a7d4:	e01a      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7d6:	4b7d      	ldr	r3, [pc, #500]	; (800a9cc <UART_SetConfig+0x1534>)
 800a7d8:	f04f 0400 	mov.w	r4, #0
 800a7dc:	e016      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a7e2:	f04f 0400 	mov.w	r4, #0
 800a7e6:	e011      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7e8:	4b79      	ldr	r3, [pc, #484]	; (800a9d0 <UART_SetConfig+0x1538>)
 800a7ea:	f04f 0400 	mov.w	r4, #0
 800a7ee:	e00d      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e008      	b.n	800a80c <UART_SetConfig+0x1374>
 800a7fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e003      	b.n	800a80c <UART_SetConfig+0x1374>
 800a804:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6852      	ldr	r2, [r2, #4]
 800a810:	0852      	lsrs	r2, r2, #1
 800a812:	4611      	mov	r1, r2
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	eb13 0b01 	adds.w	fp, r3, r1
 800a81c:	eb44 0c02 	adc.w	ip, r4, r2
 800a820:	4658      	mov	r0, fp
 800a822:	4661      	mov	r1, ip
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f04f 0400 	mov.w	r4, #0
 800a82c:	461a      	mov	r2, r3
 800a82e:	4623      	mov	r3, r4
 800a830:	f7f5 fd52 	bl	80002d8 <__aeabi_uldivmod>
 800a834:	4603      	mov	r3, r0
 800a836:	460c      	mov	r4, r1
 800a838:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a83a:	e003      	b.n	800a844 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a842:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a84a:	d309      	bcc.n	800a860 <UART_SetConfig+0x13c8>
 800a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a852:	d205      	bcs.n	800a860 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	f000 bf85 	b.w	800b76a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a866:	f000 bf80 	b.w	800b76a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a872:	f040 83da 	bne.w	800b02a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800a876:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	f200 83b3 	bhi.w	800afe6 <UART_SetConfig+0x1b4e>
 800a880:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <UART_SetConfig+0x13f0>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a9d5 	.word	0x0800a9d5
 800a88c:	0800aa8d 	.word	0x0800aa8d
 800a890:	0800afe7 	.word	0x0800afe7
 800a894:	0800afe7 	.word	0x0800afe7
 800a898:	0800ab45 	.word	0x0800ab45
 800a89c:	0800afe7 	.word	0x0800afe7
 800a8a0:	0800afe7 	.word	0x0800afe7
 800a8a4:	0800afe7 	.word	0x0800afe7
 800a8a8:	0800ac01 	.word	0x0800ac01
 800a8ac:	0800afe7 	.word	0x0800afe7
 800a8b0:	0800afe7 	.word	0x0800afe7
 800a8b4:	0800afe7 	.word	0x0800afe7
 800a8b8:	0800afe7 	.word	0x0800afe7
 800a8bc:	0800afe7 	.word	0x0800afe7
 800a8c0:	0800afe7 	.word	0x0800afe7
 800a8c4:	0800afe7 	.word	0x0800afe7
 800a8c8:	0800acbd 	.word	0x0800acbd
 800a8cc:	0800afe7 	.word	0x0800afe7
 800a8d0:	0800afe7 	.word	0x0800afe7
 800a8d4:	0800afe7 	.word	0x0800afe7
 800a8d8:	0800afe7 	.word	0x0800afe7
 800a8dc:	0800afe7 	.word	0x0800afe7
 800a8e0:	0800afe7 	.word	0x0800afe7
 800a8e4:	0800afe7 	.word	0x0800afe7
 800a8e8:	0800afe7 	.word	0x0800afe7
 800a8ec:	0800afe7 	.word	0x0800afe7
 800a8f0:	0800afe7 	.word	0x0800afe7
 800a8f4:	0800afe7 	.word	0x0800afe7
 800a8f8:	0800afe7 	.word	0x0800afe7
 800a8fc:	0800afe7 	.word	0x0800afe7
 800a900:	0800afe7 	.word	0x0800afe7
 800a904:	0800afe7 	.word	0x0800afe7
 800a908:	0800ae2f 	.word	0x0800ae2f
 800a90c:	0800afe7 	.word	0x0800afe7
 800a910:	0800afe7 	.word	0x0800afe7
 800a914:	0800afe7 	.word	0x0800afe7
 800a918:	0800afe7 	.word	0x0800afe7
 800a91c:	0800afe7 	.word	0x0800afe7
 800a920:	0800afe7 	.word	0x0800afe7
 800a924:	0800afe7 	.word	0x0800afe7
 800a928:	0800afe7 	.word	0x0800afe7
 800a92c:	0800afe7 	.word	0x0800afe7
 800a930:	0800afe7 	.word	0x0800afe7
 800a934:	0800afe7 	.word	0x0800afe7
 800a938:	0800afe7 	.word	0x0800afe7
 800a93c:	0800afe7 	.word	0x0800afe7
 800a940:	0800afe7 	.word	0x0800afe7
 800a944:	0800afe7 	.word	0x0800afe7
 800a948:	0800afe7 	.word	0x0800afe7
 800a94c:	0800afe7 	.word	0x0800afe7
 800a950:	0800afe7 	.word	0x0800afe7
 800a954:	0800afe7 	.word	0x0800afe7
 800a958:	0800afe7 	.word	0x0800afe7
 800a95c:	0800afe7 	.word	0x0800afe7
 800a960:	0800afe7 	.word	0x0800afe7
 800a964:	0800afe7 	.word	0x0800afe7
 800a968:	0800afe7 	.word	0x0800afe7
 800a96c:	0800afe7 	.word	0x0800afe7
 800a970:	0800afe7 	.word	0x0800afe7
 800a974:	0800afe7 	.word	0x0800afe7
 800a978:	0800afe7 	.word	0x0800afe7
 800a97c:	0800afe7 	.word	0x0800afe7
 800a980:	0800afe7 	.word	0x0800afe7
 800a984:	0800afe7 	.word	0x0800afe7
 800a988:	0800af25 	.word	0x0800af25
 800a98c:	f3af 8000 	nop.w
 800a990:	05161500 	.word	0x05161500
 800a994:	00000000 	.word	0x00000000
 800a998:	0a2c2a00 	.word	0x0a2c2a00
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	003d0900 	.word	0x003d0900
 800a9a4:	3d090000 	.word	0x3d090000
 800a9a8:	007a1200 	.word	0x007a1200
 800a9ac:	00f42400 	.word	0x00f42400
 800a9b0:	01e84800 	.word	0x01e84800
 800a9b4:	03d09000 	.word	0x03d09000
 800a9b8:	061a8000 	.word	0x061a8000
 800a9bc:	07a12000 	.word	0x07a12000
 800a9c0:	0f424000 	.word	0x0f424000
 800a9c4:	1e848000 	.word	0x1e848000
 800a9c8:	000aaa00 	.word	0x000aaa00
 800a9cc:	000ccc00 	.word	0x000ccc00
 800a9d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d4:	f7fb fada 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 800a9d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d044      	beq.n	800aa6c <UART_SetConfig+0x15d4>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d03e      	beq.n	800aa68 <UART_SetConfig+0x15d0>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d038      	beq.n	800aa64 <UART_SetConfig+0x15cc>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d032      	beq.n	800aa60 <UART_SetConfig+0x15c8>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d02c      	beq.n	800aa5c <UART_SetConfig+0x15c4>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	d026      	beq.n	800aa58 <UART_SetConfig+0x15c0>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b06      	cmp	r3, #6
 800aa10:	d020      	beq.n	800aa54 <UART_SetConfig+0x15bc>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b07      	cmp	r3, #7
 800aa18:	d01a      	beq.n	800aa50 <UART_SetConfig+0x15b8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	d014      	beq.n	800aa4c <UART_SetConfig+0x15b4>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b09      	cmp	r3, #9
 800aa28:	d00e      	beq.n	800aa48 <UART_SetConfig+0x15b0>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b0a      	cmp	r3, #10
 800aa30:	d008      	beq.n	800aa44 <UART_SetConfig+0x15ac>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b0b      	cmp	r3, #11
 800aa38:	d102      	bne.n	800aa40 <UART_SetConfig+0x15a8>
 800aa3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa3e:	e016      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e014      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa44:	2380      	movs	r3, #128	; 0x80
 800aa46:	e012      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa48:	2340      	movs	r3, #64	; 0x40
 800aa4a:	e010      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa4c:	2320      	movs	r3, #32
 800aa4e:	e00e      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa50:	2310      	movs	r3, #16
 800aa52:	e00c      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa54:	230c      	movs	r3, #12
 800aa56:	e00a      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa58:	230a      	movs	r3, #10
 800aa5a:	e008      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa5c:	2308      	movs	r3, #8
 800aa5e:	e006      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa60:	2306      	movs	r3, #6
 800aa62:	e004      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa64:	2304      	movs	r3, #4
 800aa66:	e002      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e000      	b.n	800aa6e <UART_SetConfig+0x15d6>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa70:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa74:	005a      	lsls	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	085b      	lsrs	r3, r3, #1
 800aa7c:	441a      	add	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa8a:	e2b0      	b.n	800afee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa8c:	f7fb fa94 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 800aa90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d044      	beq.n	800ab24 <UART_SetConfig+0x168c>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d03e      	beq.n	800ab20 <UART_SetConfig+0x1688>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d038      	beq.n	800ab1c <UART_SetConfig+0x1684>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d032      	beq.n	800ab18 <UART_SetConfig+0x1680>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d02c      	beq.n	800ab14 <UART_SetConfig+0x167c>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2b05      	cmp	r3, #5
 800aac0:	d026      	beq.n	800ab10 <UART_SetConfig+0x1678>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b06      	cmp	r3, #6
 800aac8:	d020      	beq.n	800ab0c <UART_SetConfig+0x1674>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d01a      	beq.n	800ab08 <UART_SetConfig+0x1670>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d014      	beq.n	800ab04 <UART_SetConfig+0x166c>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d00e      	beq.n	800ab00 <UART_SetConfig+0x1668>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b0a      	cmp	r3, #10
 800aae8:	d008      	beq.n	800aafc <UART_SetConfig+0x1664>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b0b      	cmp	r3, #11
 800aaf0:	d102      	bne.n	800aaf8 <UART_SetConfig+0x1660>
 800aaf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaf6:	e016      	b.n	800ab26 <UART_SetConfig+0x168e>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e014      	b.n	800ab26 <UART_SetConfig+0x168e>
 800aafc:	2380      	movs	r3, #128	; 0x80
 800aafe:	e012      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab00:	2340      	movs	r3, #64	; 0x40
 800ab02:	e010      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab04:	2320      	movs	r3, #32
 800ab06:	e00e      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	e00c      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	e00a      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab10:	230a      	movs	r3, #10
 800ab12:	e008      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab14:	2308      	movs	r3, #8
 800ab16:	e006      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab18:	2306      	movs	r3, #6
 800ab1a:	e004      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	e002      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e000      	b.n	800ab26 <UART_SetConfig+0x168e>
 800ab24:	2301      	movs	r3, #1
 800ab26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2c:	005a      	lsls	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	441a      	add	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab42:	e254      	b.n	800afee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab44:	f107 0318 	add.w	r3, r7, #24
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fc fb87 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d044      	beq.n	800abe2 <UART_SetConfig+0x174a>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d03e      	beq.n	800abde <UART_SetConfig+0x1746>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d038      	beq.n	800abda <UART_SetConfig+0x1742>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d032      	beq.n	800abd6 <UART_SetConfig+0x173e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d02c      	beq.n	800abd2 <UART_SetConfig+0x173a>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b05      	cmp	r3, #5
 800ab7e:	d026      	beq.n	800abce <UART_SetConfig+0x1736>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b06      	cmp	r3, #6
 800ab86:	d020      	beq.n	800abca <UART_SetConfig+0x1732>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b07      	cmp	r3, #7
 800ab8e:	d01a      	beq.n	800abc6 <UART_SetConfig+0x172e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d014      	beq.n	800abc2 <UART_SetConfig+0x172a>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d00e      	beq.n	800abbe <UART_SetConfig+0x1726>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b0a      	cmp	r3, #10
 800aba6:	d008      	beq.n	800abba <UART_SetConfig+0x1722>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	2b0b      	cmp	r3, #11
 800abae:	d102      	bne.n	800abb6 <UART_SetConfig+0x171e>
 800abb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abb4:	e016      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e014      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abba:	2380      	movs	r3, #128	; 0x80
 800abbc:	e012      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abbe:	2340      	movs	r3, #64	; 0x40
 800abc0:	e010      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abc2:	2320      	movs	r3, #32
 800abc4:	e00e      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abc6:	2310      	movs	r3, #16
 800abc8:	e00c      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abca:	230c      	movs	r3, #12
 800abcc:	e00a      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abce:	230a      	movs	r3, #10
 800abd0:	e008      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abd2:	2308      	movs	r3, #8
 800abd4:	e006      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abd6:	2306      	movs	r3, #6
 800abd8:	e004      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abda:	2304      	movs	r3, #4
 800abdc:	e002      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abde:	2302      	movs	r3, #2
 800abe0:	e000      	b.n	800abe4 <UART_SetConfig+0x174c>
 800abe2:	2301      	movs	r3, #1
 800abe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe8:	005a      	lsls	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	085b      	lsrs	r3, r3, #1
 800abf0:	441a      	add	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abfe:	e1f6      	b.n	800afee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fc fc75 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d044      	beq.n	800ac9e <UART_SetConfig+0x1806>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d03e      	beq.n	800ac9a <UART_SetConfig+0x1802>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d038      	beq.n	800ac96 <UART_SetConfig+0x17fe>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d032      	beq.n	800ac92 <UART_SetConfig+0x17fa>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d02c      	beq.n	800ac8e <UART_SetConfig+0x17f6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b05      	cmp	r3, #5
 800ac3a:	d026      	beq.n	800ac8a <UART_SetConfig+0x17f2>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	2b06      	cmp	r3, #6
 800ac42:	d020      	beq.n	800ac86 <UART_SetConfig+0x17ee>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	2b07      	cmp	r3, #7
 800ac4a:	d01a      	beq.n	800ac82 <UART_SetConfig+0x17ea>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d014      	beq.n	800ac7e <UART_SetConfig+0x17e6>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	2b09      	cmp	r3, #9
 800ac5a:	d00e      	beq.n	800ac7a <UART_SetConfig+0x17e2>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b0a      	cmp	r3, #10
 800ac62:	d008      	beq.n	800ac76 <UART_SetConfig+0x17de>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	2b0b      	cmp	r3, #11
 800ac6a:	d102      	bne.n	800ac72 <UART_SetConfig+0x17da>
 800ac6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac70:	e016      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e014      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac76:	2380      	movs	r3, #128	; 0x80
 800ac78:	e012      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac7a:	2340      	movs	r3, #64	; 0x40
 800ac7c:	e010      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac7e:	2320      	movs	r3, #32
 800ac80:	e00e      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac82:	2310      	movs	r3, #16
 800ac84:	e00c      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac86:	230c      	movs	r3, #12
 800ac88:	e00a      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac8a:	230a      	movs	r3, #10
 800ac8c:	e008      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac8e:	2308      	movs	r3, #8
 800ac90:	e006      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac92:	2306      	movs	r3, #6
 800ac94:	e004      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac96:	2304      	movs	r3, #4
 800ac98:	e002      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e000      	b.n	800aca0 <UART_SetConfig+0x1808>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca4:	005a      	lsls	r2, r3, #1
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	441a      	add	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acba:	e198      	b.n	800afee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acbc:	4b87      	ldr	r3, [pc, #540]	; (800aedc <UART_SetConfig+0x1a44>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0320 	and.w	r3, r3, #32
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d05e      	beq.n	800ad86 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc8:	4b84      	ldr	r3, [pc, #528]	; (800aedc <UART_SetConfig+0x1a44>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	08db      	lsrs	r3, r3, #3
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	4a83      	ldr	r2, [pc, #524]	; (800aee0 <UART_SetConfig+0x1a48>)
 800acd4:	40da      	lsrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d044      	beq.n	800ad68 <UART_SetConfig+0x18d0>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d03e      	beq.n	800ad64 <UART_SetConfig+0x18cc>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	2b02      	cmp	r3, #2
 800acec:	d038      	beq.n	800ad60 <UART_SetConfig+0x18c8>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d032      	beq.n	800ad5c <UART_SetConfig+0x18c4>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d02c      	beq.n	800ad58 <UART_SetConfig+0x18c0>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	d026      	beq.n	800ad54 <UART_SetConfig+0x18bc>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	2b06      	cmp	r3, #6
 800ad0c:	d020      	beq.n	800ad50 <UART_SetConfig+0x18b8>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	d01a      	beq.n	800ad4c <UART_SetConfig+0x18b4>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d014      	beq.n	800ad48 <UART_SetConfig+0x18b0>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b09      	cmp	r3, #9
 800ad24:	d00e      	beq.n	800ad44 <UART_SetConfig+0x18ac>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2b0a      	cmp	r3, #10
 800ad2c:	d008      	beq.n	800ad40 <UART_SetConfig+0x18a8>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	2b0b      	cmp	r3, #11
 800ad34:	d102      	bne.n	800ad3c <UART_SetConfig+0x18a4>
 800ad36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad3a:	e016      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e014      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad40:	2380      	movs	r3, #128	; 0x80
 800ad42:	e012      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	e010      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad48:	2320      	movs	r3, #32
 800ad4a:	e00e      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	e00c      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad50:	230c      	movs	r3, #12
 800ad52:	e00a      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad54:	230a      	movs	r3, #10
 800ad56:	e008      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad58:	2308      	movs	r3, #8
 800ad5a:	e006      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad5c:	2306      	movs	r3, #6
 800ad5e:	e004      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad60:	2304      	movs	r3, #4
 800ad62:	e002      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e000      	b.n	800ad6a <UART_SetConfig+0x18d2>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6e:	005a      	lsls	r2, r3, #1
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	085b      	lsrs	r3, r3, #1
 800ad76:	441a      	add	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ad84:	e133      	b.n	800afee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d043      	beq.n	800ae16 <UART_SetConfig+0x197e>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d03d      	beq.n	800ae12 <UART_SetConfig+0x197a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d037      	beq.n	800ae0e <UART_SetConfig+0x1976>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d031      	beq.n	800ae0a <UART_SetConfig+0x1972>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	2b04      	cmp	r3, #4
 800adac:	d02b      	beq.n	800ae06 <UART_SetConfig+0x196e>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2b05      	cmp	r3, #5
 800adb4:	d025      	beq.n	800ae02 <UART_SetConfig+0x196a>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b06      	cmp	r3, #6
 800adbc:	d01f      	beq.n	800adfe <UART_SetConfig+0x1966>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	2b07      	cmp	r3, #7
 800adc4:	d019      	beq.n	800adfa <UART_SetConfig+0x1962>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d013      	beq.n	800adf6 <UART_SetConfig+0x195e>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2b09      	cmp	r3, #9
 800add4:	d00d      	beq.n	800adf2 <UART_SetConfig+0x195a>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	2b0a      	cmp	r3, #10
 800addc:	d007      	beq.n	800adee <UART_SetConfig+0x1956>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	2b0b      	cmp	r3, #11
 800ade4:	d101      	bne.n	800adea <UART_SetConfig+0x1952>
 800ade6:	4b3f      	ldr	r3, [pc, #252]	; (800aee4 <UART_SetConfig+0x1a4c>)
 800ade8:	e016      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adea:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <UART_SetConfig+0x1a50>)
 800adec:	e014      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adee:	4b3f      	ldr	r3, [pc, #252]	; (800aeec <UART_SetConfig+0x1a54>)
 800adf0:	e012      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adf2:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <UART_SetConfig+0x1a58>)
 800adf4:	e010      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adf6:	4b3f      	ldr	r3, [pc, #252]	; (800aef4 <UART_SetConfig+0x1a5c>)
 800adf8:	e00e      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adfa:	4b3f      	ldr	r3, [pc, #252]	; (800aef8 <UART_SetConfig+0x1a60>)
 800adfc:	e00c      	b.n	800ae18 <UART_SetConfig+0x1980>
 800adfe:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <UART_SetConfig+0x1a64>)
 800ae00:	e00a      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae02:	4b3f      	ldr	r3, [pc, #252]	; (800af00 <UART_SetConfig+0x1a68>)
 800ae04:	e008      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae06:	4b3f      	ldr	r3, [pc, #252]	; (800af04 <UART_SetConfig+0x1a6c>)
 800ae08:	e006      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae0a:	4b3f      	ldr	r3, [pc, #252]	; (800af08 <UART_SetConfig+0x1a70>)
 800ae0c:	e004      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae0e:	4b3f      	ldr	r3, [pc, #252]	; (800af0c <UART_SetConfig+0x1a74>)
 800ae10:	e002      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae12:	4b33      	ldr	r3, [pc, #204]	; (800aee0 <UART_SetConfig+0x1a48>)
 800ae14:	e000      	b.n	800ae18 <UART_SetConfig+0x1980>
 800ae16:	4b34      	ldr	r3, [pc, #208]	; (800aee8 <UART_SetConfig+0x1a50>)
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6852      	ldr	r2, [r2, #4]
 800ae1c:	0852      	lsrs	r2, r2, #1
 800ae1e:	441a      	add	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae2c:	e0df      	b.n	800afee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d045      	beq.n	800aec2 <UART_SetConfig+0x1a2a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d03f      	beq.n	800aebe <UART_SetConfig+0x1a26>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d039      	beq.n	800aeba <UART_SetConfig+0x1a22>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d033      	beq.n	800aeb6 <UART_SetConfig+0x1a1e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d02d      	beq.n	800aeb2 <UART_SetConfig+0x1a1a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	2b05      	cmp	r3, #5
 800ae5c:	d027      	beq.n	800aeae <UART_SetConfig+0x1a16>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	2b06      	cmp	r3, #6
 800ae64:	d021      	beq.n	800aeaa <UART_SetConfig+0x1a12>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	2b07      	cmp	r3, #7
 800ae6c:	d01b      	beq.n	800aea6 <UART_SetConfig+0x1a0e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	2b08      	cmp	r3, #8
 800ae74:	d015      	beq.n	800aea2 <UART_SetConfig+0x1a0a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	d00f      	beq.n	800ae9e <UART_SetConfig+0x1a06>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	2b0a      	cmp	r3, #10
 800ae84:	d008      	beq.n	800ae98 <UART_SetConfig+0x1a00>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	2b0b      	cmp	r3, #11
 800ae8c:	d102      	bne.n	800ae94 <UART_SetConfig+0x19fc>
 800ae8e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ae92:	e017      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800ae94:	4b18      	ldr	r3, [pc, #96]	; (800aef8 <UART_SetConfig+0x1a60>)
 800ae96:	e015      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800ae98:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ae9c:	e012      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800ae9e:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <UART_SetConfig+0x1a78>)
 800aea0:	e010      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <UART_SetConfig+0x1a7c>)
 800aea4:	e00e      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aea6:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <UART_SetConfig+0x1a4c>)
 800aea8:	e00c      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <UART_SetConfig+0x1a80>)
 800aeac:	e00a      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aeae:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <UART_SetConfig+0x1a84>)
 800aeb0:	e008      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <UART_SetConfig+0x1a54>)
 800aeb4:	e006      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aeb6:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <UART_SetConfig+0x1a88>)
 800aeb8:	e004      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <UART_SetConfig+0x1a58>)
 800aebc:	e002      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aebe:	4b0d      	ldr	r3, [pc, #52]	; (800aef4 <UART_SetConfig+0x1a5c>)
 800aec0:	e000      	b.n	800aec4 <UART_SetConfig+0x1a2c>
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <UART_SetConfig+0x1a60>)
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6852      	ldr	r2, [r2, #4]
 800aec8:	0852      	lsrs	r2, r2, #1
 800aeca:	441a      	add	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aed8:	e089      	b.n	800afee <UART_SetConfig+0x1b56>
 800aeda:	bf00      	nop
 800aedc:	58024400 	.word	0x58024400
 800aee0:	03d09000 	.word	0x03d09000
 800aee4:	0007a120 	.word	0x0007a120
 800aee8:	07a12000 	.word	0x07a12000
 800aeec:	000f4240 	.word	0x000f4240
 800aef0:	001e8480 	.word	0x001e8480
 800aef4:	003d0900 	.word	0x003d0900
 800aef8:	007a1200 	.word	0x007a1200
 800aefc:	00a2c2aa 	.word	0x00a2c2aa
 800af00:	00c35000 	.word	0x00c35000
 800af04:	00f42400 	.word	0x00f42400
 800af08:	01458554 	.word	0x01458554
 800af0c:	01e84800 	.word	0x01e84800
 800af10:	0001e848 	.word	0x0001e848
 800af14:	0003d090 	.word	0x0003d090
 800af18:	000a2c2a 	.word	0x000a2c2a
 800af1c:	000c3500 	.word	0x000c3500
 800af20:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d04f      	beq.n	800afcc <UART_SetConfig+0x1b34>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2b01      	cmp	r3, #1
 800af32:	d048      	beq.n	800afc6 <UART_SetConfig+0x1b2e>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d041      	beq.n	800afc0 <UART_SetConfig+0x1b28>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	2b03      	cmp	r3, #3
 800af42:	d03a      	beq.n	800afba <UART_SetConfig+0x1b22>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d033      	beq.n	800afb4 <UART_SetConfig+0x1b1c>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	2b05      	cmp	r3, #5
 800af52:	d02c      	beq.n	800afae <UART_SetConfig+0x1b16>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af58:	2b06      	cmp	r3, #6
 800af5a:	d025      	beq.n	800afa8 <UART_SetConfig+0x1b10>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	2b07      	cmp	r3, #7
 800af62:	d01e      	beq.n	800afa2 <UART_SetConfig+0x1b0a>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	2b08      	cmp	r3, #8
 800af6a:	d017      	beq.n	800af9c <UART_SetConfig+0x1b04>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	2b09      	cmp	r3, #9
 800af72:	d010      	beq.n	800af96 <UART_SetConfig+0x1afe>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	2b0a      	cmp	r3, #10
 800af7a:	d009      	beq.n	800af90 <UART_SetConfig+0x1af8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	2b0b      	cmp	r3, #11
 800af82:	d102      	bne.n	800af8a <UART_SetConfig+0x1af2>
 800af84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af88:	e022      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800af8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af8e:	e01f      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800af90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af94:	e01c      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800af96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9a:	e019      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800af9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afa0:	e016      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afa6:	e013      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afa8:	f241 5354 	movw	r3, #5460	; 0x1554
 800afac:	e010      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afae:	f641 1398 	movw	r3, #6552	; 0x1998
 800afb2:	e00d      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afb8:	e00a      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800afbe:	e007      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afc4:	e004      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afca:	e001      	b.n	800afd0 <UART_SetConfig+0x1b38>
 800afcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6852      	ldr	r2, [r2, #4]
 800afd4:	0852      	lsrs	r2, r2, #1
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe4:	e003      	b.n	800afee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800afec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff0:	2b0f      	cmp	r3, #15
 800aff2:	d916      	bls.n	800b022 <UART_SetConfig+0x1b8a>
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affa:	d212      	bcs.n	800b022 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	b29b      	uxth	r3, r3
 800b000:	f023 030f 	bic.w	r3, r3, #15
 800b004:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	f003 0307 	and.w	r3, r3, #7
 800b010:	b29a      	uxth	r2, r3
 800b012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b014:	4313      	orrs	r3, r2
 800b016:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b01e:	60da      	str	r2, [r3, #12]
 800b020:	e3a3      	b.n	800b76a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b028:	e39f      	b.n	800b76a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b02a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b02e:	2b40      	cmp	r3, #64	; 0x40
 800b030:	f200 8388 	bhi.w	800b744 <UART_SetConfig+0x22ac>
 800b034:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <UART_SetConfig+0x1ba4>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b141 	.word	0x0800b141
 800b040:	0800b1f7 	.word	0x0800b1f7
 800b044:	0800b745 	.word	0x0800b745
 800b048:	0800b745 	.word	0x0800b745
 800b04c:	0800b2ad 	.word	0x0800b2ad
 800b050:	0800b745 	.word	0x0800b745
 800b054:	0800b745 	.word	0x0800b745
 800b058:	0800b745 	.word	0x0800b745
 800b05c:	0800b367 	.word	0x0800b367
 800b060:	0800b745 	.word	0x0800b745
 800b064:	0800b745 	.word	0x0800b745
 800b068:	0800b745 	.word	0x0800b745
 800b06c:	0800b745 	.word	0x0800b745
 800b070:	0800b745 	.word	0x0800b745
 800b074:	0800b745 	.word	0x0800b745
 800b078:	0800b745 	.word	0x0800b745
 800b07c:	0800b421 	.word	0x0800b421
 800b080:	0800b745 	.word	0x0800b745
 800b084:	0800b745 	.word	0x0800b745
 800b088:	0800b745 	.word	0x0800b745
 800b08c:	0800b745 	.word	0x0800b745
 800b090:	0800b745 	.word	0x0800b745
 800b094:	0800b745 	.word	0x0800b745
 800b098:	0800b745 	.word	0x0800b745
 800b09c:	0800b745 	.word	0x0800b745
 800b0a0:	0800b745 	.word	0x0800b745
 800b0a4:	0800b745 	.word	0x0800b745
 800b0a8:	0800b745 	.word	0x0800b745
 800b0ac:	0800b745 	.word	0x0800b745
 800b0b0:	0800b745 	.word	0x0800b745
 800b0b4:	0800b745 	.word	0x0800b745
 800b0b8:	0800b745 	.word	0x0800b745
 800b0bc:	0800b591 	.word	0x0800b591
 800b0c0:	0800b745 	.word	0x0800b745
 800b0c4:	0800b745 	.word	0x0800b745
 800b0c8:	0800b745 	.word	0x0800b745
 800b0cc:	0800b745 	.word	0x0800b745
 800b0d0:	0800b745 	.word	0x0800b745
 800b0d4:	0800b745 	.word	0x0800b745
 800b0d8:	0800b745 	.word	0x0800b745
 800b0dc:	0800b745 	.word	0x0800b745
 800b0e0:	0800b745 	.word	0x0800b745
 800b0e4:	0800b745 	.word	0x0800b745
 800b0e8:	0800b745 	.word	0x0800b745
 800b0ec:	0800b745 	.word	0x0800b745
 800b0f0:	0800b745 	.word	0x0800b745
 800b0f4:	0800b745 	.word	0x0800b745
 800b0f8:	0800b745 	.word	0x0800b745
 800b0fc:	0800b745 	.word	0x0800b745
 800b100:	0800b745 	.word	0x0800b745
 800b104:	0800b745 	.word	0x0800b745
 800b108:	0800b745 	.word	0x0800b745
 800b10c:	0800b745 	.word	0x0800b745
 800b110:	0800b745 	.word	0x0800b745
 800b114:	0800b745 	.word	0x0800b745
 800b118:	0800b745 	.word	0x0800b745
 800b11c:	0800b745 	.word	0x0800b745
 800b120:	0800b745 	.word	0x0800b745
 800b124:	0800b745 	.word	0x0800b745
 800b128:	0800b745 	.word	0x0800b745
 800b12c:	0800b745 	.word	0x0800b745
 800b130:	0800b745 	.word	0x0800b745
 800b134:	0800b745 	.word	0x0800b745
 800b138:	0800b745 	.word	0x0800b745
 800b13c:	0800b685 	.word	0x0800b685
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b140:	f7fa ff24 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 800b144:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d044      	beq.n	800b1d8 <UART_SetConfig+0x1d40>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b01      	cmp	r3, #1
 800b154:	d03e      	beq.n	800b1d4 <UART_SetConfig+0x1d3c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d038      	beq.n	800b1d0 <UART_SetConfig+0x1d38>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b03      	cmp	r3, #3
 800b164:	d032      	beq.n	800b1cc <UART_SetConfig+0x1d34>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d02c      	beq.n	800b1c8 <UART_SetConfig+0x1d30>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b05      	cmp	r3, #5
 800b174:	d026      	beq.n	800b1c4 <UART_SetConfig+0x1d2c>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b06      	cmp	r3, #6
 800b17c:	d020      	beq.n	800b1c0 <UART_SetConfig+0x1d28>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b07      	cmp	r3, #7
 800b184:	d01a      	beq.n	800b1bc <UART_SetConfig+0x1d24>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b08      	cmp	r3, #8
 800b18c:	d014      	beq.n	800b1b8 <UART_SetConfig+0x1d20>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b09      	cmp	r3, #9
 800b194:	d00e      	beq.n	800b1b4 <UART_SetConfig+0x1d1c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b0a      	cmp	r3, #10
 800b19c:	d008      	beq.n	800b1b0 <UART_SetConfig+0x1d18>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b0b      	cmp	r3, #11
 800b1a4:	d102      	bne.n	800b1ac <UART_SetConfig+0x1d14>
 800b1a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1aa:	e016      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e014      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	e012      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1b4:	2340      	movs	r3, #64	; 0x40
 800b1b6:	e010      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1b8:	2320      	movs	r3, #32
 800b1ba:	e00e      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1bc:	2310      	movs	r3, #16
 800b1be:	e00c      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	e00a      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1c4:	230a      	movs	r3, #10
 800b1c6:	e008      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1c8:	2308      	movs	r3, #8
 800b1ca:	e006      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1cc:	2306      	movs	r3, #6
 800b1ce:	e004      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	e002      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e000      	b.n	800b1da <UART_SetConfig+0x1d42>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	085b      	lsrs	r3, r3, #1
 800b1e6:	441a      	add	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1f4:	e2aa      	b.n	800b74c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1f6:	f7fa fedf 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 800b1fa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	d044      	beq.n	800b28e <UART_SetConfig+0x1df6>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d03e      	beq.n	800b28a <UART_SetConfig+0x1df2>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b02      	cmp	r3, #2
 800b212:	d038      	beq.n	800b286 <UART_SetConfig+0x1dee>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d032      	beq.n	800b282 <UART_SetConfig+0x1dea>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2b04      	cmp	r3, #4
 800b222:	d02c      	beq.n	800b27e <UART_SetConfig+0x1de6>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2b05      	cmp	r3, #5
 800b22a:	d026      	beq.n	800b27a <UART_SetConfig+0x1de2>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b230:	2b06      	cmp	r3, #6
 800b232:	d020      	beq.n	800b276 <UART_SetConfig+0x1dde>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	2b07      	cmp	r3, #7
 800b23a:	d01a      	beq.n	800b272 <UART_SetConfig+0x1dda>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b08      	cmp	r3, #8
 800b242:	d014      	beq.n	800b26e <UART_SetConfig+0x1dd6>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b09      	cmp	r3, #9
 800b24a:	d00e      	beq.n	800b26a <UART_SetConfig+0x1dd2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2b0a      	cmp	r3, #10
 800b252:	d008      	beq.n	800b266 <UART_SetConfig+0x1dce>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	d102      	bne.n	800b262 <UART_SetConfig+0x1dca>
 800b25c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b260:	e016      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b262:	2301      	movs	r3, #1
 800b264:	e014      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b266:	2380      	movs	r3, #128	; 0x80
 800b268:	e012      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	e010      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b26e:	2320      	movs	r3, #32
 800b270:	e00e      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b272:	2310      	movs	r3, #16
 800b274:	e00c      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b276:	230c      	movs	r3, #12
 800b278:	e00a      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b27a:	230a      	movs	r3, #10
 800b27c:	e008      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b27e:	2308      	movs	r3, #8
 800b280:	e006      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b282:	2306      	movs	r3, #6
 800b284:	e004      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b286:	2304      	movs	r3, #4
 800b288:	e002      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e000      	b.n	800b290 <UART_SetConfig+0x1df8>
 800b28e:	2301      	movs	r3, #1
 800b290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b292:	fbb2 f2f3 	udiv	r2, r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	085b      	lsrs	r3, r3, #1
 800b29c:	441a      	add	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2aa:	e24f      	b.n	800b74c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ac:	f107 0318 	add.w	r3, r7, #24
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fb ffd3 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d044      	beq.n	800b34a <UART_SetConfig+0x1eb2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d03e      	beq.n	800b346 <UART_SetConfig+0x1eae>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d038      	beq.n	800b342 <UART_SetConfig+0x1eaa>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d032      	beq.n	800b33e <UART_SetConfig+0x1ea6>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b04      	cmp	r3, #4
 800b2de:	d02c      	beq.n	800b33a <UART_SetConfig+0x1ea2>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	d026      	beq.n	800b336 <UART_SetConfig+0x1e9e>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b06      	cmp	r3, #6
 800b2ee:	d020      	beq.n	800b332 <UART_SetConfig+0x1e9a>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	2b07      	cmp	r3, #7
 800b2f6:	d01a      	beq.n	800b32e <UART_SetConfig+0x1e96>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d014      	beq.n	800b32a <UART_SetConfig+0x1e92>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	2b09      	cmp	r3, #9
 800b306:	d00e      	beq.n	800b326 <UART_SetConfig+0x1e8e>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2b0a      	cmp	r3, #10
 800b30e:	d008      	beq.n	800b322 <UART_SetConfig+0x1e8a>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	2b0b      	cmp	r3, #11
 800b316:	d102      	bne.n	800b31e <UART_SetConfig+0x1e86>
 800b318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b31c:	e016      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b31e:	2301      	movs	r3, #1
 800b320:	e014      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b322:	2380      	movs	r3, #128	; 0x80
 800b324:	e012      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b326:	2340      	movs	r3, #64	; 0x40
 800b328:	e010      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b32a:	2320      	movs	r3, #32
 800b32c:	e00e      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b32e:	2310      	movs	r3, #16
 800b330:	e00c      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b332:	230c      	movs	r3, #12
 800b334:	e00a      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b336:	230a      	movs	r3, #10
 800b338:	e008      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b33a:	2308      	movs	r3, #8
 800b33c:	e006      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b33e:	2306      	movs	r3, #6
 800b340:	e004      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b342:	2304      	movs	r3, #4
 800b344:	e002      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b346:	2302      	movs	r3, #2
 800b348:	e000      	b.n	800b34c <UART_SetConfig+0x1eb4>
 800b34a:	2301      	movs	r3, #1
 800b34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	085b      	lsrs	r3, r3, #1
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b360:	b29b      	uxth	r3, r3
 800b362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b364:	e1f2      	b.n	800b74c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fc f8c2 	bl	80074f4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d044      	beq.n	800b404 <UART_SetConfig+0x1f6c>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d03e      	beq.n	800b400 <UART_SetConfig+0x1f68>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	2b02      	cmp	r3, #2
 800b388:	d038      	beq.n	800b3fc <UART_SetConfig+0x1f64>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d032      	beq.n	800b3f8 <UART_SetConfig+0x1f60>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	2b04      	cmp	r3, #4
 800b398:	d02c      	beq.n	800b3f4 <UART_SetConfig+0x1f5c>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d026      	beq.n	800b3f0 <UART_SetConfig+0x1f58>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	2b06      	cmp	r3, #6
 800b3a8:	d020      	beq.n	800b3ec <UART_SetConfig+0x1f54>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	2b07      	cmp	r3, #7
 800b3b0:	d01a      	beq.n	800b3e8 <UART_SetConfig+0x1f50>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	2b08      	cmp	r3, #8
 800b3b8:	d014      	beq.n	800b3e4 <UART_SetConfig+0x1f4c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b09      	cmp	r3, #9
 800b3c0:	d00e      	beq.n	800b3e0 <UART_SetConfig+0x1f48>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	2b0a      	cmp	r3, #10
 800b3c8:	d008      	beq.n	800b3dc <UART_SetConfig+0x1f44>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	2b0b      	cmp	r3, #11
 800b3d0:	d102      	bne.n	800b3d8 <UART_SetConfig+0x1f40>
 800b3d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3d6:	e016      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e014      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3dc:	2380      	movs	r3, #128	; 0x80
 800b3de:	e012      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3e0:	2340      	movs	r3, #64	; 0x40
 800b3e2:	e010      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3e4:	2320      	movs	r3, #32
 800b3e6:	e00e      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	e00c      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	e00a      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3f0:	230a      	movs	r3, #10
 800b3f2:	e008      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3f4:	2308      	movs	r3, #8
 800b3f6:	e006      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3f8:	2306      	movs	r3, #6
 800b3fa:	e004      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	e002      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b400:	2302      	movs	r3, #2
 800b402:	e000      	b.n	800b406 <UART_SetConfig+0x1f6e>
 800b404:	2301      	movs	r3, #1
 800b406:	fbb2 f2f3 	udiv	r2, r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	441a      	add	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b41e:	e195      	b.n	800b74c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b420:	4b87      	ldr	r3, [pc, #540]	; (800b640 <UART_SetConfig+0x21a8>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0320 	and.w	r3, r3, #32
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d05d      	beq.n	800b4e8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b42c:	4b84      	ldr	r3, [pc, #528]	; (800b640 <UART_SetConfig+0x21a8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	08db      	lsrs	r3, r3, #3
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	4a83      	ldr	r2, [pc, #524]	; (800b644 <UART_SetConfig+0x21ac>)
 800b438:	40da      	lsrs	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d044      	beq.n	800b4cc <UART_SetConfig+0x2034>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b01      	cmp	r3, #1
 800b448:	d03e      	beq.n	800b4c8 <UART_SetConfig+0x2030>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d038      	beq.n	800b4c4 <UART_SetConfig+0x202c>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	2b03      	cmp	r3, #3
 800b458:	d032      	beq.n	800b4c0 <UART_SetConfig+0x2028>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d02c      	beq.n	800b4bc <UART_SetConfig+0x2024>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b05      	cmp	r3, #5
 800b468:	d026      	beq.n	800b4b8 <UART_SetConfig+0x2020>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b06      	cmp	r3, #6
 800b470:	d020      	beq.n	800b4b4 <UART_SetConfig+0x201c>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b07      	cmp	r3, #7
 800b478:	d01a      	beq.n	800b4b0 <UART_SetConfig+0x2018>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b08      	cmp	r3, #8
 800b480:	d014      	beq.n	800b4ac <UART_SetConfig+0x2014>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b09      	cmp	r3, #9
 800b488:	d00e      	beq.n	800b4a8 <UART_SetConfig+0x2010>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b0a      	cmp	r3, #10
 800b490:	d008      	beq.n	800b4a4 <UART_SetConfig+0x200c>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b0b      	cmp	r3, #11
 800b498:	d102      	bne.n	800b4a0 <UART_SetConfig+0x2008>
 800b49a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49e:	e016      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e014      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4a4:	2380      	movs	r3, #128	; 0x80
 800b4a6:	e012      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4a8:	2340      	movs	r3, #64	; 0x40
 800b4aa:	e010      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	e00e      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	e00c      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	e00a      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4b8:	230a      	movs	r3, #10
 800b4ba:	e008      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4bc:	2308      	movs	r3, #8
 800b4be:	e006      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4c0:	2306      	movs	r3, #6
 800b4c2:	e004      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	e002      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e000      	b.n	800b4ce <UART_SetConfig+0x2036>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	085b      	lsrs	r3, r3, #1
 800b4d8:	441a      	add	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b4e6:	e131      	b.n	800b74c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d043      	beq.n	800b578 <UART_SetConfig+0x20e0>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d03d      	beq.n	800b574 <UART_SetConfig+0x20dc>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d037      	beq.n	800b570 <UART_SetConfig+0x20d8>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	2b03      	cmp	r3, #3
 800b506:	d031      	beq.n	800b56c <UART_SetConfig+0x20d4>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	d02b      	beq.n	800b568 <UART_SetConfig+0x20d0>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	2b05      	cmp	r3, #5
 800b516:	d025      	beq.n	800b564 <UART_SetConfig+0x20cc>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	2b06      	cmp	r3, #6
 800b51e:	d01f      	beq.n	800b560 <UART_SetConfig+0x20c8>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	2b07      	cmp	r3, #7
 800b526:	d019      	beq.n	800b55c <UART_SetConfig+0x20c4>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d013      	beq.n	800b558 <UART_SetConfig+0x20c0>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b09      	cmp	r3, #9
 800b536:	d00d      	beq.n	800b554 <UART_SetConfig+0x20bc>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	2b0a      	cmp	r3, #10
 800b53e:	d007      	beq.n	800b550 <UART_SetConfig+0x20b8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	2b0b      	cmp	r3, #11
 800b546:	d101      	bne.n	800b54c <UART_SetConfig+0x20b4>
 800b548:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <UART_SetConfig+0x21b0>)
 800b54a:	e016      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b54c:	4b3d      	ldr	r3, [pc, #244]	; (800b644 <UART_SetConfig+0x21ac>)
 800b54e:	e014      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b550:	4b3e      	ldr	r3, [pc, #248]	; (800b64c <UART_SetConfig+0x21b4>)
 800b552:	e012      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b554:	4b3e      	ldr	r3, [pc, #248]	; (800b650 <UART_SetConfig+0x21b8>)
 800b556:	e010      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b558:	4b3e      	ldr	r3, [pc, #248]	; (800b654 <UART_SetConfig+0x21bc>)
 800b55a:	e00e      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b55c:	4b3e      	ldr	r3, [pc, #248]	; (800b658 <UART_SetConfig+0x21c0>)
 800b55e:	e00c      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b560:	4b3e      	ldr	r3, [pc, #248]	; (800b65c <UART_SetConfig+0x21c4>)
 800b562:	e00a      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b564:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <UART_SetConfig+0x21c8>)
 800b566:	e008      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b568:	4b3e      	ldr	r3, [pc, #248]	; (800b664 <UART_SetConfig+0x21cc>)
 800b56a:	e006      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b56c:	4b3e      	ldr	r3, [pc, #248]	; (800b668 <UART_SetConfig+0x21d0>)
 800b56e:	e004      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b570:	4b3e      	ldr	r3, [pc, #248]	; (800b66c <UART_SetConfig+0x21d4>)
 800b572:	e002      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b574:	4b3e      	ldr	r3, [pc, #248]	; (800b670 <UART_SetConfig+0x21d8>)
 800b576:	e000      	b.n	800b57a <UART_SetConfig+0x20e2>
 800b578:	4b32      	ldr	r3, [pc, #200]	; (800b644 <UART_SetConfig+0x21ac>)
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6852      	ldr	r2, [r2, #4]
 800b57e:	0852      	lsrs	r2, r2, #1
 800b580:	441a      	add	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b58e:	e0dd      	b.n	800b74c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d046      	beq.n	800b626 <UART_SetConfig+0x218e>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d040      	beq.n	800b622 <UART_SetConfig+0x218a>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d03a      	beq.n	800b61e <UART_SetConfig+0x2186>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d034      	beq.n	800b61a <UART_SetConfig+0x2182>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d02e      	beq.n	800b616 <UART_SetConfig+0x217e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	2b05      	cmp	r3, #5
 800b5be:	d028      	beq.n	800b612 <UART_SetConfig+0x217a>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	2b06      	cmp	r3, #6
 800b5c6:	d022      	beq.n	800b60e <UART_SetConfig+0x2176>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b07      	cmp	r3, #7
 800b5ce:	d01c      	beq.n	800b60a <UART_SetConfig+0x2172>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	d016      	beq.n	800b606 <UART_SetConfig+0x216e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d00f      	beq.n	800b600 <UART_SetConfig+0x2168>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	2b0a      	cmp	r3, #10
 800b5e6:	d008      	beq.n	800b5fa <UART_SetConfig+0x2162>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b0b      	cmp	r3, #11
 800b5ee:	d102      	bne.n	800b5f6 <UART_SetConfig+0x215e>
 800b5f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b5f4:	e018      	b.n	800b628 <UART_SetConfig+0x2190>
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <UART_SetConfig+0x21c0>)
 800b5f8:	e016      	b.n	800b628 <UART_SetConfig+0x2190>
 800b5fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b5fe:	e013      	b.n	800b628 <UART_SetConfig+0x2190>
 800b600:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b604:	e010      	b.n	800b628 <UART_SetConfig+0x2190>
 800b606:	4b1b      	ldr	r3, [pc, #108]	; (800b674 <UART_SetConfig+0x21dc>)
 800b608:	e00e      	b.n	800b628 <UART_SetConfig+0x2190>
 800b60a:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <UART_SetConfig+0x21b0>)
 800b60c:	e00c      	b.n	800b628 <UART_SetConfig+0x2190>
 800b60e:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <UART_SetConfig+0x21e0>)
 800b610:	e00a      	b.n	800b628 <UART_SetConfig+0x2190>
 800b612:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <UART_SetConfig+0x21e4>)
 800b614:	e008      	b.n	800b628 <UART_SetConfig+0x2190>
 800b616:	4b0d      	ldr	r3, [pc, #52]	; (800b64c <UART_SetConfig+0x21b4>)
 800b618:	e006      	b.n	800b628 <UART_SetConfig+0x2190>
 800b61a:	4b19      	ldr	r3, [pc, #100]	; (800b680 <UART_SetConfig+0x21e8>)
 800b61c:	e004      	b.n	800b628 <UART_SetConfig+0x2190>
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <UART_SetConfig+0x21b8>)
 800b620:	e002      	b.n	800b628 <UART_SetConfig+0x2190>
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <UART_SetConfig+0x21bc>)
 800b624:	e000      	b.n	800b628 <UART_SetConfig+0x2190>
 800b626:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <UART_SetConfig+0x21c0>)
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6852      	ldr	r2, [r2, #4]
 800b62c:	0852      	lsrs	r2, r2, #1
 800b62e:	441a      	add	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	fbb2 f3f3 	udiv	r3, r2, r3
 800b638:	b29b      	uxth	r3, r3
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b63c:	e086      	b.n	800b74c <UART_SetConfig+0x22b4>
 800b63e:	bf00      	nop
 800b640:	58024400 	.word	0x58024400
 800b644:	03d09000 	.word	0x03d09000
 800b648:	0003d090 	.word	0x0003d090
 800b64c:	0007a120 	.word	0x0007a120
 800b650:	000f4240 	.word	0x000f4240
 800b654:	001e8480 	.word	0x001e8480
 800b658:	003d0900 	.word	0x003d0900
 800b65c:	00516155 	.word	0x00516155
 800b660:	0061a800 	.word	0x0061a800
 800b664:	007a1200 	.word	0x007a1200
 800b668:	00a2c2aa 	.word	0x00a2c2aa
 800b66c:	00f42400 	.word	0x00f42400
 800b670:	01e84800 	.word	0x01e84800
 800b674:	0001e848 	.word	0x0001e848
 800b678:	00051615 	.word	0x00051615
 800b67c:	00061a80 	.word	0x00061a80
 800b680:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d04e      	beq.n	800b72a <UART_SetConfig+0x2292>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b01      	cmp	r3, #1
 800b692:	d047      	beq.n	800b724 <UART_SetConfig+0x228c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d040      	beq.n	800b71e <UART_SetConfig+0x2286>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d039      	beq.n	800b718 <UART_SetConfig+0x2280>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d032      	beq.n	800b712 <UART_SetConfig+0x227a>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b05      	cmp	r3, #5
 800b6b2:	d02b      	beq.n	800b70c <UART_SetConfig+0x2274>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	d024      	beq.n	800b706 <UART_SetConfig+0x226e>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b07      	cmp	r3, #7
 800b6c2:	d01d      	beq.n	800b700 <UART_SetConfig+0x2268>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b08      	cmp	r3, #8
 800b6ca:	d016      	beq.n	800b6fa <UART_SetConfig+0x2262>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b09      	cmp	r3, #9
 800b6d2:	d00f      	beq.n	800b6f4 <UART_SetConfig+0x225c>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b0a      	cmp	r3, #10
 800b6da:	d008      	beq.n	800b6ee <UART_SetConfig+0x2256>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b0b      	cmp	r3, #11
 800b6e2:	d101      	bne.n	800b6e8 <UART_SetConfig+0x2250>
 800b6e4:	2380      	movs	r3, #128	; 0x80
 800b6e6:	e022      	b.n	800b72e <UART_SetConfig+0x2296>
 800b6e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ec:	e01f      	b.n	800b72e <UART_SetConfig+0x2296>
 800b6ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f2:	e01c      	b.n	800b72e <UART_SetConfig+0x2296>
 800b6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f8:	e019      	b.n	800b72e <UART_SetConfig+0x2296>
 800b6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fe:	e016      	b.n	800b72e <UART_SetConfig+0x2296>
 800b700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b704:	e013      	b.n	800b72e <UART_SetConfig+0x2296>
 800b706:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b70a:	e010      	b.n	800b72e <UART_SetConfig+0x2296>
 800b70c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b710:	e00d      	b.n	800b72e <UART_SetConfig+0x2296>
 800b712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b716:	e00a      	b.n	800b72e <UART_SetConfig+0x2296>
 800b718:	f241 5355 	movw	r3, #5461	; 0x1555
 800b71c:	e007      	b.n	800b72e <UART_SetConfig+0x2296>
 800b71e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b722:	e004      	b.n	800b72e <UART_SetConfig+0x2296>
 800b724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b728:	e001      	b.n	800b72e <UART_SetConfig+0x2296>
 800b72a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6852      	ldr	r2, [r2, #4]
 800b732:	0852      	lsrs	r2, r2, #1
 800b734:	441a      	add	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b73e:	b29b      	uxth	r3, r3
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b742:	e003      	b.n	800b74c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b74a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74e:	2b0f      	cmp	r3, #15
 800b750:	d908      	bls.n	800b764 <UART_SetConfig+0x22cc>
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b758:	d204      	bcs.n	800b764 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b760:	60da      	str	r2, [r3, #12]
 800b762:	e002      	b.n	800b76a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3740      	adds	r7, #64	; 0x40
 800b78e:	46bd      	mov	sp, r7
 800b790:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c2:	f003 0302 	and.w	r3, r3, #2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b828:	f003 0310 	and.w	r3, r3, #16
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	430a      	orrs	r2, r1
 800b844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84a:	f003 0320 	and.w	r3, r3, #32
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00a      	beq.n	800b868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	430a      	orrs	r2, r1
 800b866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01a      	beq.n	800b8aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b892:	d10a      	bne.n	800b8aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	430a      	orrs	r2, r1
 800b8ca:	605a      	str	r2, [r3, #4]
  }
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b8e8:	f7f6 fcfe 	bl	80022e8 <HAL_GetTick>
 800b8ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0308 	and.w	r3, r3, #8
 800b8f8:	2b08      	cmp	r3, #8
 800b8fa:	d10e      	bne.n	800b91a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f82c 	bl	800b968 <UART_WaitOnFlagUntilTimeout>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e022      	b.n	800b960 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b04      	cmp	r3, #4
 800b926:	d10e      	bne.n	800b946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f816 	bl	800b968 <UART_WaitOnFlagUntilTimeout>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e00c      	b.n	800b960 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2220      	movs	r2, #32
 800b94a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2220      	movs	r2, #32
 800b952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b978:	e062      	b.n	800ba40 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d05e      	beq.n	800ba40 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b982:	f7f6 fcb1 	bl	80022e8 <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d302      	bcc.n	800b998 <UART_WaitOnFlagUntilTimeout+0x30>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11d      	bne.n	800b9d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f022 0201 	bic.w	r2, r2, #1
 800b9b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e045      	b.n	800ba60 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d02e      	beq.n	800ba40 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9f0:	d126      	bne.n	800ba40 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689a      	ldr	r2, [r3, #8]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f022 0201 	bic.w	r2, r2, #1
 800ba1a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2220      	movs	r2, #32
 800ba20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2220      	movs	r2, #32
 800ba28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e00f      	b.n	800ba60 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	69da      	ldr	r2, [r3, #28]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	4013      	ands	r3, r2
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	bf0c      	ite	eq
 800ba50:	2301      	moveq	r3, #1
 800ba52:	2300      	movne	r3, #0
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	461a      	mov	r2, r3
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d08d      	beq.n	800b97a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	e027      	b.n	800bace <HAL_UARTEx_DisableFifoMode+0x66>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2224      	movs	r2, #36	; 0x24
 800ba8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0201 	bic.w	r2, r2, #1
 800baa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800baac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2220      	movs	r2, #32
 800bac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800baee:	2302      	movs	r3, #2
 800baf0:	e02d      	b.n	800bb4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2224      	movs	r2, #36	; 0x24
 800bafe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0201 	bic.w	r2, r2, #1
 800bb18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f850 	bl	800bbd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2220      	movs	r2, #32
 800bb40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d101      	bne.n	800bb6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e02d      	b.n	800bbca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2224      	movs	r2, #36	; 0x24
 800bb7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0201 	bic.w	r2, r2, #1
 800bb94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f812 	bl	800bbd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b089      	sub	sp, #36	; 0x24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bbdc:	4a2f      	ldr	r2, [pc, #188]	; (800bc9c <UARTEx_SetNbDataToProcess+0xc8>)
 800bbde:	f107 0314 	add.w	r3, r7, #20
 800bbe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbe6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bbea:	4a2d      	ldr	r2, [pc, #180]	; (800bca0 <UARTEx_SetNbDataToProcess+0xcc>)
 800bbec:	f107 030c 	add.w	r3, r7, #12
 800bbf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbf4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d108      	bne.n	800bc12 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc10:	e03d      	b.n	800bc8e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc12:	2308      	movs	r3, #8
 800bc14:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc16:	2308      	movs	r3, #8
 800bc18:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	0e5b      	lsrs	r3, r3, #25
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0307 	and.w	r3, r3, #7
 800bc28:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	0f5b      	lsrs	r3, r3, #29
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	f003 0307 	and.w	r3, r3, #7
 800bc38:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc3a:	7fbb      	ldrb	r3, [r7, #30]
 800bc3c:	7f3a      	ldrb	r2, [r7, #28]
 800bc3e:	f107 0120 	add.w	r1, r7, #32
 800bc42:	440a      	add	r2, r1
 800bc44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	7f3a      	ldrb	r2, [r7, #28]
 800bc4e:	f107 0120 	add.w	r1, r7, #32
 800bc52:	440a      	add	r2, r1
 800bc54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bc58:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bc64:	7ffb      	ldrb	r3, [r7, #31]
 800bc66:	7f7a      	ldrb	r2, [r7, #29]
 800bc68:	f107 0120 	add.w	r1, r7, #32
 800bc6c:	440a      	add	r2, r1
 800bc6e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	7f7a      	ldrb	r2, [r7, #29]
 800bc78:	f107 0120 	add.w	r1, r7, #32
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bc82:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc8e:	bf00      	nop
 800bc90:	3724      	adds	r7, #36	; 0x24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	0800d014 	.word	0x0800d014
 800bca0:	0800d01c 	.word	0x0800d01c

0800bca4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	6812      	ldr	r2, [r2, #0]
 800bcbc:	f023 0101 	bic.w	r1, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	2b08      	cmp	r3, #8
 800bccc:	d102      	bne.n	800bcd4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bcce:	2340      	movs	r3, #64	; 0x40
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e001      	b.n	800bcd8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank],
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bce2:	4b2b      	ldr	r3, [pc, #172]	; (800bd90 <FMC_NORSRAM_Init+0xec>)
 800bce4:	4013      	ands	r3, r2
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	6851      	ldr	r1, [r2, #4]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	4311      	orrs	r1, r2
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	6892      	ldr	r2, [r2, #8]
 800bcf2:	4311      	orrs	r1, r2
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	68d2      	ldr	r2, [r2, #12]
 800bcf8:	4311      	orrs	r1, r2
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	6912      	ldr	r2, [r2, #16]
 800bcfe:	4311      	orrs	r1, r2
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	6952      	ldr	r2, [r2, #20]
 800bd04:	4311      	orrs	r1, r2
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6992      	ldr	r2, [r2, #24]
 800bd0a:	4311      	orrs	r1, r2
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	69d2      	ldr	r2, [r2, #28]
 800bd10:	4311      	orrs	r1, r2
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	6a12      	ldr	r2, [r2, #32]
 800bd16:	4311      	orrs	r1, r2
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd1c:	4311      	orrs	r1, r2
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bd22:	4311      	orrs	r1, r2
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bd28:	4311      	orrs	r1, r2
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd2e:	4311      	orrs	r1, r2
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bd34:	4311      	orrs	r1, r2
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd3a:	4311      	orrs	r1, r2
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	4319      	orrs	r1, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              Init->ContinuousClock         |
              Init->WriteFifo               |
              Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd50:	d10c      	bne.n	800bd6c <FMC_NORSRAM_Init+0xc8>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	ffc00480 	.word	0xffc00480

0800bd94 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	431a      	orrs	r2, r3
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	041b      	lsls	r3, r3, #16
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	051b      	lsls	r3, r3, #20
 800bdd2:	431a      	orrs	r2, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	3b02      	subs	r3, #2
 800bdda:	061b      	lsls	r3, r3, #24
 800bddc:	431a      	orrs	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	3201      	adds	r2, #1
 800bde8:	4319      	orrs	r1, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdfc:	d113      	bne.n	800be26 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be06:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	051b      	lsls	r3, r3, #20
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	4313      	orrs	r3, r2
 800be14:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	431a      	orrs	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be48:	d11d      	bne.n	800be86 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be52:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800be54:	4013      	ands	r3, r2
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	6811      	ldr	r1, [r2, #0]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	6852      	ldr	r2, [r2, #4]
 800be5e:	0112      	lsls	r2, r2, #4
 800be60:	4311      	orrs	r1, r2
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	6892      	ldr	r2, [r2, #8]
 800be66:	0212      	lsls	r2, r2, #8
 800be68:	4311      	orrs	r1, r2
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	6992      	ldr	r2, [r2, #24]
 800be6e:	4311      	orrs	r1, r2
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	68d2      	ldr	r2, [r2, #12]
 800be74:	0412      	lsls	r2, r2, #16
 800be76:	430a      	orrs	r2, r1
 800be78:	ea43 0102 	orr.w	r1, r3, r2
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be84:	e005      	b.n	800be92 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800be8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	cff00000 	.word	0xcff00000

0800bea4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d121      	bne.n	800befa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <FMC_SDRAM_Init+0xb4>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	6851      	ldr	r1, [r2, #4]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	6892      	ldr	r2, [r2, #8]
 800bec6:	4311      	orrs	r1, r2
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	68d2      	ldr	r2, [r2, #12]
 800becc:	4311      	orrs	r1, r2
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	6912      	ldr	r2, [r2, #16]
 800bed2:	4311      	orrs	r1, r2
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	6952      	ldr	r2, [r2, #20]
 800bed8:	4311      	orrs	r1, r2
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	6992      	ldr	r2, [r2, #24]
 800bede:	4311      	orrs	r1, r2
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	69d2      	ldr	r2, [r2, #28]
 800bee4:	4311      	orrs	r1, r2
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	6a12      	ldr	r2, [r2, #32]
 800beea:	4311      	orrs	r1, r2
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bef0:	430a      	orrs	r2, r1
 800bef2:	431a      	orrs	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e026      	b.n	800bf48 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	69d9      	ldr	r1, [r3, #28]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	4319      	orrs	r1, r3
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf10:	430b      	orrs	r3, r1
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685a      	ldr	r2, [r3, #4]
 800bf1c:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <FMC_SDRAM_Init+0xb4>)
 800bf1e:	4013      	ands	r3, r2
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	6851      	ldr	r1, [r2, #4]
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	6892      	ldr	r2, [r2, #8]
 800bf28:	4311      	orrs	r1, r2
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	68d2      	ldr	r2, [r2, #12]
 800bf2e:	4311      	orrs	r1, r2
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	6912      	ldr	r2, [r2, #16]
 800bf34:	4311      	orrs	r1, r2
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	6952      	ldr	r2, [r2, #20]
 800bf3a:	4311      	orrs	r1, r2
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	6992      	ldr	r2, [r2, #24]
 800bf40:	430a      	orrs	r2, r1
 800bf42:	431a      	orrs	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	ffff8000 	.word	0xffff8000

0800bf5c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d128      	bne.n	800bfc0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	1e59      	subs	r1, r3, #1
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	4319      	orrs	r1, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	4319      	orrs	r1, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	031b      	lsls	r3, r3, #12
 800bf98:	4319      	orrs	r1, r3
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	041b      	lsls	r3, r3, #16
 800bfa2:	4319      	orrs	r1, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	051b      	lsls	r3, r3, #20
 800bfac:	4319      	orrs	r1, r3
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	061b      	lsls	r3, r3, #24
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	609a      	str	r2, [r3, #8]
 800bfbe:	e02d      	b.n	800c01c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	4b19      	ldr	r3, [pc, #100]	; (800c02c <FMC_SDRAM_Timing_Init+0xd0>)
 800bfc6:	4013      	ands	r3, r2
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	68d2      	ldr	r2, [r2, #12]
 800bfcc:	3a01      	subs	r2, #1
 800bfce:	0311      	lsls	r1, r2, #12
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	6952      	ldr	r2, [r2, #20]
 800bfd4:	3a01      	subs	r2, #1
 800bfd6:	0512      	lsls	r2, r2, #20
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	1e59      	subs	r1, r3, #1
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	011b      	lsls	r3, r3, #4
 800bff6:	4319      	orrs	r1, r3
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	4319      	orrs	r1, r3
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	3b01      	subs	r3, #1
 800c008:	041b      	lsls	r3, r3, #16
 800c00a:	4319      	orrs	r1, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	3b01      	subs	r3, #1
 800c012:	061b      	lsls	r3, r3, #24
 800c014:	430b      	orrs	r3, r1
 800c016:	431a      	orrs	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	ff0f0fff 	.word	0xff0f0fff

0800c030 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c030:	b084      	sub	sp, #16
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	f107 001c 	add.w	r0, r7, #28
 800c03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c046:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c048:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c04a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c04e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c052:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c056:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <SDMMC_Init+0x50>)
 800c064:	4013      	ands	r3, r2
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	431a      	orrs	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	b004      	add	sp, #16
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	ffc02c00 	.word	0xffc02c00

0800c084 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f043 0203 	orr.w	r2, r3, #3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0303 	and.w	r3, r3, #3
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c100:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c106:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	4b06      	ldr	r3, [pc, #24]	; (800c12c <SDMMC_SendCommand+0x50>)
 800c114:	4013      	ands	r3, r2
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	431a      	orrs	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	fffee0c0 	.word	0xfffee0c0

0800c130 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	b2db      	uxtb	r3, r3
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3314      	adds	r3, #20
 800c158:	461a      	mov	r2, r3
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c196:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c19c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0

}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1d6:	2310      	movs	r3, #16
 800c1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ea:	f107 0308 	add.w	r3, r7, #8
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff ff73 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1fa:	2110      	movs	r1, #16
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f9e3 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c204:	69fb      	ldr	r3, [r7, #28]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3720      	adds	r7, #32
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b08a      	sub	sp, #40	; 0x28
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c21e:	2307      	movs	r3, #7
 800c220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c222:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c226:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c228:	2300      	movs	r3, #0
 800c22a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c230:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	4619      	mov	r1, r3
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff ff4f 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c242:	2107      	movs	r1, #7
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f9bf 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c24a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3728      	adds	r7, #40	; 0x28
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b088      	sub	sp, #32
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c26e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c272:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c274:	f107 0308 	add.w	r3, r7, #8
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff ff2e 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f977 	bl	800c574 <SDMMC_GetCmdError>
 800c286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c288:	69fb      	ldr	r3, [r7, #28]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3720      	adds	r7, #32
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b088      	sub	sp, #32
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c29a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b4:	f107 0308 	add.w	r3, r7, #8
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ff0e 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fb6b 	bl	800c99c <SDMMC_GetCmdResp7>
 800c2c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b088      	sub	sp, #32
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c2e0:	2337      	movs	r3, #55	; 0x37
 800c2e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff feee 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c300:	f241 3288 	movw	r2, #5000	; 0x1388
 800c304:	2137      	movs	r1, #55	; 0x37
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f95e 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c30e:	69fb      	ldr	r3, [r7, #28]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c326:	2329      	movs	r3, #41	; 0x29
 800c328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c32a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c32e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c330:	2300      	movs	r3, #0
 800c332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c338:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff fecb 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa76 	bl	800c838 <SDMMC_GetCmdResp3>
 800c34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34e:	69fb      	ldr	r3, [r7, #28]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c366:	2306      	movs	r3, #6
 800c368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c37a:	f107 0308 	add.w	r3, r7, #8
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff feab 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c386:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38a:	2106      	movs	r1, #6
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f91b 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c394:	69fb      	ldr	r3, [r7, #28]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3720      	adds	r7, #32
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b088      	sub	sp, #32
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c3aa:	2333      	movs	r3, #51	; 0x33
 800c3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3be:	f107 0308 	add.w	r3, r7, #8
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff fe89 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ce:	2133      	movs	r1, #51	; 0x33
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f8f9 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c3d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3720      	adds	r7, #32
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b088      	sub	sp, #32
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c3f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c3f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c400:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff fe67 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f9ca 	bl	800c7a8 <SDMMC_GetCmdResp2>
 800c414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c42e:	2309      	movs	r3, #9
 800c430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c432:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c440:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c442:	f107 0308 	add.w	r3, r7, #8
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fe47 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f9aa 	bl	800c7a8 <SDMMC_GetCmdResp2>
 800c454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c456:	69fb      	ldr	r3, [r7, #28]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c46e:	2303      	movs	r3, #3
 800c470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c472:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c47c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c480:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c482:	f107 0308 	add.w	r3, r7, #8
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff fe27 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	2103      	movs	r1, #3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fa0c 	bl	800c8b0 <SDMMC_GetCmdResp6>
 800c498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c49a:	69fb      	ldr	r3, [r7, #28]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3720      	adds	r7, #32
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c4b2:	230d      	movs	r3, #13
 800c4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4c6:	f107 0308 	add.w	r3, r7, #8
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff fe05 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c4d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4d6:	210d      	movs	r1, #13
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f875 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c4de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4e0:	69fb      	ldr	r3, [r7, #28]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3720      	adds	r7, #32
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b088      	sub	sp, #32
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c4f6:	230d      	movs	r3, #13
 800c4f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c500:	2300      	movs	r3, #0
 800c502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c50a:	f107 0308 	add.w	r3, r7, #8
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff fde3 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c516:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51a:	210d      	movs	r1, #13
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f853 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c524:	69fb      	ldr	r3, [r7, #28]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3720      	adds	r7, #32
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c536:	2300      	movs	r3, #0
 800c538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c53a:	230b      	movs	r3, #11
 800c53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c53e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c544:	2300      	movs	r3, #0
 800c546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fdc1 	bl	800c0dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c55a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c55e:	210b      	movs	r1, #11
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f831 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c568:	69fb      	ldr	r3, [r7, #28]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3720      	adds	r7, #32
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c574:	b490      	push	{r4, r7}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c57c:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <SDMMC_GetCmdError+0x48>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0f      	ldr	r2, [pc, #60]	; (800c5c0 <SDMMC_GetCmdError+0x4c>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	0a5b      	lsrs	r3, r3, #9
 800c588:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c590:	4623      	mov	r3, r4
 800c592:	1e5c      	subs	r4, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c59c:	e009      	b.n	800c5b2 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d0f2      	beq.n	800c590 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a05      	ldr	r2, [pc, #20]	; (800c5c4 <SDMMC_GetCmdError+0x50>)
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bc90      	pop	{r4, r7}
 800c5ba:	4770      	bx	lr
 800c5bc:	24000000 	.word	0x24000000
 800c5c0:	10624dd3 	.word	0x10624dd3
 800c5c4:	002000c5 	.word	0x002000c5

0800c5c8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c5d6:	4b6f      	ldr	r3, [pc, #444]	; (800c794 <SDMMC_GetCmdResp1+0x1cc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a6f      	ldr	r2, [pc, #444]	; (800c798 <SDMMC_GetCmdResp1+0x1d0>)
 800c5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e0:	0a5b      	lsrs	r3, r3, #9
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c5e8:	4623      	mov	r3, r4
 800c5ea:	1e5c      	subs	r4, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5f4:	e0c9      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	4b67      	ldr	r3, [pc, #412]	; (800c79c <SDMMC_GetCmdResp1+0x1d4>)
 800c600:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0f0      	beq.n	800c5e8 <SDMMC_GetCmdResp1+0x20>
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1eb      	bne.n	800c5e8 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2204      	movs	r2, #4
 800c620:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c622:	2304      	movs	r3, #4
 800c624:	e0b1      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2201      	movs	r2, #1
 800c636:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c638:	2301      	movs	r3, #1
 800c63a:	e0a6      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4a58      	ldr	r2, [pc, #352]	; (800c7a0 <SDMMC_GetCmdResp1+0x1d8>)
 800c640:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fd74 	bl	800c130 <SDMMC_GetCommandResponse>
 800c648:	4603      	mov	r3, r0
 800c64a:	461a      	mov	r2, r3
 800c64c:	7afb      	ldrb	r3, [r7, #11]
 800c64e:	4293      	cmp	r3, r2
 800c650:	d001      	beq.n	800c656 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c652:	2301      	movs	r3, #1
 800c654:	e099      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c656:	2100      	movs	r1, #0
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff fd76 	bl	800c14a <SDMMC_GetResponse>
 800c65e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	4b50      	ldr	r3, [pc, #320]	; (800c7a4 <SDMMC_GetCmdResp1+0x1dc>)
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e08d      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	da02      	bge.n	800c67a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c678:	e087      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c684:	2340      	movs	r3, #64	; 0x40
 800c686:	e080      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c692:	2380      	movs	r3, #128	; 0x80
 800c694:	e079      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6a4:	e071      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6b4:	e069      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c4:	e061      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6d4:	e059      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6e4:	e051      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6f4:	e049      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c704:	e041      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c714:	e039      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c724:	e031      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c730:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c734:	e029      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c744:	e021      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c754:	e019      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c764:	e011      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c770:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c774:	e009      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f003 0308 	and.w	r3, r3, #8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c780:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c784:	e001      	b.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd90      	pop	{r4, r7, pc}
 800c792:	bf00      	nop
 800c794:	24000000 	.word	0x24000000
 800c798:	10624dd3 	.word	0x10624dd3
 800c79c:	00200045 	.word	0x00200045
 800c7a0:	002000c5 	.word	0x002000c5
 800c7a4:	fdffe008 	.word	0xfdffe008

0800c7a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c7a8:	b490      	push	{r4, r7}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <SDMMC_GetCmdResp2+0x84>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a1e      	ldr	r2, [pc, #120]	; (800c830 <SDMMC_GetCmdResp2+0x88>)
 800c7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ba:	0a5b      	lsrs	r3, r3, #9
 800c7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	1e5c      	subs	r4, r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7d0:	e026      	b.n	800c820 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0f0      	beq.n	800c7c4 <SDMMC_GetCmdResp2+0x1c>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1eb      	bne.n	800c7c4 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7fe:	2304      	movs	r3, #4
 800c800:	e00e      	b.n	800c820 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c814:	2301      	movs	r3, #1
 800c816:	e003      	b.n	800c820 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a06      	ldr	r2, [pc, #24]	; (800c834 <SDMMC_GetCmdResp2+0x8c>)
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bc90      	pop	{r4, r7}
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	24000000 	.word	0x24000000
 800c830:	10624dd3 	.word	0x10624dd3
 800c834:	002000c5 	.word	0x002000c5

0800c838 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c838:	b490      	push	{r4, r7}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c840:	4b18      	ldr	r3, [pc, #96]	; (800c8a4 <SDMMC_GetCmdResp3+0x6c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a18      	ldr	r2, [pc, #96]	; (800c8a8 <SDMMC_GetCmdResp3+0x70>)
 800c846:	fba2 2303 	umull	r2, r3, r2, r3
 800c84a:	0a5b      	lsrs	r3, r3, #9
 800c84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c850:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c854:	4623      	mov	r3, r4
 800c856:	1e5c      	subs	r4, r3, #1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c85c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c860:	e01b      	b.n	800c89a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c866:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f0      	beq.n	800c854 <SDMMC_GetCmdResp3+0x1c>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1eb      	bne.n	800c854 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2204      	movs	r2, #4
 800c88c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c88e:	2304      	movs	r3, #4
 800c890:	e003      	b.n	800c89a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a05      	ldr	r2, [pc, #20]	; (800c8ac <SDMMC_GetCmdResp3+0x74>)
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bc90      	pop	{r4, r7}
 800c8a2:	4770      	bx	lr
 800c8a4:	24000000 	.word	0x24000000
 800c8a8:	10624dd3 	.word	0x10624dd3
 800c8ac:	002000c5 	.word	0x002000c5

0800c8b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8be:	4b34      	ldr	r3, [pc, #208]	; (800c990 <SDMMC_GetCmdResp6+0xe0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a34      	ldr	r2, [pc, #208]	; (800c994 <SDMMC_GetCmdResp6+0xe4>)
 800c8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c8:	0a5b      	lsrs	r3, r3, #9
 800c8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ce:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	1e5c      	subs	r4, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d102      	bne.n	800c8e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8de:	e052      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d0f0      	beq.n	800c8d2 <SDMMC_GetCmdResp6+0x22>
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1eb      	bne.n	800c8d2 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fe:	f003 0304 	and.w	r3, r3, #4
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2204      	movs	r2, #4
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c90c:	2304      	movs	r3, #4
 800c90e:	e03a      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d004      	beq.n	800c926 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c922:	2301      	movs	r3, #1
 800c924:	e02f      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff fc02 	bl	800c130 <SDMMC_GetCommandResponse>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	7afb      	ldrb	r3, [r7, #11]
 800c932:	4293      	cmp	r3, r2
 800c934:	d001      	beq.n	800c93a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c936:	2301      	movs	r3, #1
 800c938:	e025      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	4a16      	ldr	r2, [pc, #88]	; (800c998 <SDMMC_GetCmdResp6+0xe8>)
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c940:	2100      	movs	r1, #0
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff fc01 	bl	800c14a <SDMMC_GetResponse>
 800c948:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d106      	bne.n	800c962 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	0c1b      	lsrs	r3, r3, #16
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c95e:	2300      	movs	r3, #0
 800c960:	e011      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c96c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c970:	e009      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c97c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c980:	e001      	b.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c986:	4618      	mov	r0, r3
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd90      	pop	{r4, r7, pc}
 800c98e:	bf00      	nop
 800c990:	24000000 	.word	0x24000000
 800c994:	10624dd3 	.word	0x10624dd3
 800c998:	002000c5 	.word	0x002000c5

0800c99c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c99c:	b490      	push	{r4, r7}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9a4:	4b21      	ldr	r3, [pc, #132]	; (800ca2c <SDMMC_GetCmdResp7+0x90>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a21      	ldr	r2, [pc, #132]	; (800ca30 <SDMMC_GetCmdResp7+0x94>)
 800c9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ae:	0a5b      	lsrs	r3, r3, #9
 800c9b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	1e5c      	subs	r4, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d102      	bne.n	800c9c6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9c4:	e02c      	b.n	800ca20 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0f0      	beq.n	800c9b8 <SDMMC_GetCmdResp7+0x1c>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1eb      	bne.n	800c9b8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d004      	beq.n	800c9f6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2204      	movs	r2, #4
 800c9f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	e014      	b.n	800ca20 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d004      	beq.n	800ca0c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e009      	b.n	800ca20 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2240      	movs	r2, #64	; 0x40
 800ca1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca1e:	2300      	movs	r3, #0

}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bc90      	pop	{r4, r7}
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	24000000 	.word	0x24000000
 800ca30:	10624dd3 	.word	0x10624dd3

0800ca34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca34:	b084      	sub	sp, #16
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b084      	sub	sp, #16
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	f107 001c 	add.w	r0, r7, #28
 800ca42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d120      	bne.n	800ca8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	4b25      	ldr	r3, [pc, #148]	; (800caf4 <USB_CoreInit+0xc0>)
 800ca5e:	4013      	ands	r3, r2
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d105      	bne.n	800ca82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fa5a 	bl	800cf3c <USB_CoreReset>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73fb      	strb	r3, [r7, #15]
 800ca8c:	e01a      	b.n	800cac4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa4e 	bl	800cf3c <USB_CoreReset>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800caa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d106      	bne.n	800cab8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	639a      	str	r2, [r3, #56]	; 0x38
 800cab6:	e005      	b.n	800cac4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d10b      	bne.n	800cae2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	f043 0208 	orr.w	r2, r3, #8
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	f043 0220 	orr.w	r2, r3, #32
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800caee:	b004      	add	sp, #16
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	ffbdffbf 	.word	0xffbdffbf

0800caf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f023 0201 	bic.w	r2, r3, #1
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb32:	78fb      	ldrb	r3, [r7, #3]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d106      	bne.n	800cb46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	60da      	str	r2, [r3, #12]
 800cb44:	e00b      	b.n	800cb5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb46:	78fb      	ldrb	r3, [r7, #3]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60da      	str	r2, [r3, #12]
 800cb58:	e001      	b.n	800cb5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e003      	b.n	800cb66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cb5e:	2032      	movs	r0, #50	; 0x32
 800cb60:	f7f5 fbce 	bl	8002300 <HAL_Delay>

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb70:	b084      	sub	sp, #16
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b086      	sub	sp, #24
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	613b      	str	r3, [r7, #16]
 800cb8e:	e009      	b.n	800cba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	3340      	adds	r3, #64	; 0x40
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	3301      	adds	r3, #1
 800cba2:	613b      	str	r3, [r7, #16]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b0e      	cmp	r3, #14
 800cba8:	d9f2      	bls.n	800cb90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d112      	bne.n	800cbd6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e005      	b.n	800cbe2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbe8:	461a      	mov	r2, r3
 800cbea:	2300      	movs	r3, #0
 800cbec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	680b      	ldr	r3, [r1, #0]
 800cc00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d10c      	bne.n	800cc22 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d104      	bne.n	800cc18 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc0e:	2100      	movs	r1, #0
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f961 	bl	800ced8 <USB_SetDevSpeed>
 800cc16:	e008      	b.n	800cc2a <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc18:	2101      	movs	r1, #1
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f95c 	bl	800ced8 <USB_SetDevSpeed>
 800cc20:	e003      	b.n	800cc2a <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc22:	2103      	movs	r1, #3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f957 	bl	800ced8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc2a:	2110      	movs	r1, #16
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f90b 	bl	800ce48 <USB_FlushTxFifo>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d001      	beq.n	800cc3c <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f929 	bl	800ce94 <USB_FlushRxFifo>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc52:	461a      	mov	r2, r3
 800cc54:	2300      	movs	r3, #0
 800cc56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc5e:	461a      	mov	r2, r3
 800cc60:	2300      	movs	r3, #0
 800cc62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc70:	2300      	movs	r3, #0
 800cc72:	613b      	str	r3, [r7, #16]
 800cc74:	e043      	b.n	800ccfe <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc8c:	d118      	bne.n	800ccc0 <USB_DevInit+0x150>
    {
      if (i == 0U)
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca0:	461a      	mov	r2, r3
 800cca2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e013      	b.n	800ccd2 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	e008      	b.n	800ccd2 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cccc:	461a      	mov	r2, r3
 800ccce:	2300      	movs	r3, #0
 800ccd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	015a      	lsls	r2, r3, #5
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	4413      	add	r3, r2
 800ccda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccde:	461a      	mov	r2, r3
 800cce0:	2300      	movs	r3, #0
 800cce2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ccf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	613b      	str	r3, [r7, #16]
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d3b7      	bcc.n	800cc76 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd06:	2300      	movs	r3, #0
 800cd08:	613b      	str	r3, [r7, #16]
 800cd0a:	e043      	b.n	800cd94 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd22:	d118      	bne.n	800cd56 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd36:	461a      	mov	r2, r3
 800cd38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd3c:	6013      	str	r3, [r2, #0]
 800cd3e:	e013      	b.n	800cd68 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	015a      	lsls	r2, r3, #5
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4413      	add	r3, r2
 800cd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd52:	6013      	str	r3, [r2, #0]
 800cd54:	e008      	b.n	800cd68 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	015a      	lsls	r2, r3, #5
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd62:	461a      	mov	r2, r3
 800cd64:	2300      	movs	r3, #0
 800cd66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd74:	461a      	mov	r2, r3
 800cd76:	2300      	movs	r3, #0
 800cd78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	4413      	add	r3, r2
 800cd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd86:	461a      	mov	r2, r3
 800cd88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	3301      	adds	r3, #1
 800cd92:	613b      	str	r3, [r7, #16]
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d3b7      	bcc.n	800cd0c <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdae:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800cdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d110      	bne.n	800cdd8 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <USB_DevInit+0x2c8>)
 800cdc0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4b1a      	ldr	r3, [pc, #104]	; (800ce3c <USB_DevInit+0x2cc>)
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cde4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d105      	bne.n	800cdf8 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	699b      	ldr	r3, [r3, #24]
 800cdf0:	f043 0210 	orr.w	r2, r3, #16
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	699a      	ldr	r2, [r3, #24]
 800cdfc:	4b10      	ldr	r3, [pc, #64]	; (800ce40 <USB_DevInit+0x2d0>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ce04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d005      	beq.n	800ce16 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	f043 0208 	orr.w	r2, r3, #8
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d105      	bne.n	800ce28 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	699a      	ldr	r2, [r3, #24]
 800ce20:	4b08      	ldr	r3, [pc, #32]	; (800ce44 <USB_DevInit+0x2d4>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce34:	b004      	add	sp, #16
 800ce36:	4770      	bx	lr
 800ce38:	00800100 	.word	0x00800100
 800ce3c:	00010003 	.word	0x00010003
 800ce40:	803c3800 	.word	0x803c3800
 800ce44:	40000004 	.word	0x40000004

0800ce48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	019b      	lsls	r3, r3, #6
 800ce5a:	f043 0220 	orr.w	r2, r3, #32
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <USB_FlushTxFifo+0x48>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d901      	bls.n	800ce74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e006      	b.n	800ce82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b20      	cmp	r3, #32
 800ce7e:	d0f0      	beq.n	800ce62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	00030d40 	.word	0x00030d40

0800ce94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2210      	movs	r2, #16
 800cea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4a09      	ldr	r2, [pc, #36]	; (800ced4 <USB_FlushRxFifo+0x40>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d901      	bls.n	800ceb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e006      	b.n	800cec6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	f003 0310 	and.w	r3, r3, #16
 800cec0:	2b10      	cmp	r3, #16
 800cec2:	d0f0      	beq.n	800cea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	00030d40 	.word	0x00030d40

0800ced8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	460b      	mov	r3, r1
 800cee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	68f9      	ldr	r1, [r7, #12]
 800cef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cef8:	4313      	orrs	r3, r2
 800cefa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3714      	adds	r7, #20
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf24:	f043 0302 	orr.w	r3, r3, #2
 800cf28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cf2a:	2003      	movs	r0, #3
 800cf2c:	f7f5 f9e8 	bl	8002300 <HAL_Delay>

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
	...

0800cf3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	4a13      	ldr	r2, [pc, #76]	; (800cfa0 <USB_CoreReset+0x64>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d901      	bls.n	800cf5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e01b      	b.n	800cf92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	daf2      	bge.n	800cf48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf62:	2300      	movs	r3, #0
 800cf64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	691b      	ldr	r3, [r3, #16]
 800cf6a:	f043 0201 	orr.w	r2, r3, #1
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3301      	adds	r3, #1
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	4a09      	ldr	r2, [pc, #36]	; (800cfa0 <USB_CoreReset+0x64>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d901      	bls.n	800cf84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e006      	b.n	800cf92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d0f0      	beq.n	800cf72 <USB_CoreReset+0x36>

  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	00030d40 	.word	0x00030d40

0800cfa4 <__libc_init_array>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	4e0d      	ldr	r6, [pc, #52]	; (800cfdc <__libc_init_array+0x38>)
 800cfa8:	4c0d      	ldr	r4, [pc, #52]	; (800cfe0 <__libc_init_array+0x3c>)
 800cfaa:	1ba4      	subs	r4, r4, r6
 800cfac:	10a4      	asrs	r4, r4, #2
 800cfae:	2500      	movs	r5, #0
 800cfb0:	42a5      	cmp	r5, r4
 800cfb2:	d109      	bne.n	800cfc8 <__libc_init_array+0x24>
 800cfb4:	4e0b      	ldr	r6, [pc, #44]	; (800cfe4 <__libc_init_array+0x40>)
 800cfb6:	4c0c      	ldr	r4, [pc, #48]	; (800cfe8 <__libc_init_array+0x44>)
 800cfb8:	f000 f820 	bl	800cffc <_init>
 800cfbc:	1ba4      	subs	r4, r4, r6
 800cfbe:	10a4      	asrs	r4, r4, #2
 800cfc0:	2500      	movs	r5, #0
 800cfc2:	42a5      	cmp	r5, r4
 800cfc4:	d105      	bne.n	800cfd2 <__libc_init_array+0x2e>
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfcc:	4798      	blx	r3
 800cfce:	3501      	adds	r5, #1
 800cfd0:	e7ee      	b.n	800cfb0 <__libc_init_array+0xc>
 800cfd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfd6:	4798      	blx	r3
 800cfd8:	3501      	adds	r5, #1
 800cfda:	e7f2      	b.n	800cfc2 <__libc_init_array+0x1e>
 800cfdc:	0800d03c 	.word	0x0800d03c
 800cfe0:	0800d03c 	.word	0x0800d03c
 800cfe4:	0800d03c 	.word	0x0800d03c
 800cfe8:	0800d040 	.word	0x0800d040

0800cfec <memset>:
 800cfec:	4402      	add	r2, r0
 800cfee:	4603      	mov	r3, r0
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d100      	bne.n	800cff6 <memset+0xa>
 800cff4:	4770      	bx	lr
 800cff6:	f803 1b01 	strb.w	r1, [r3], #1
 800cffa:	e7f9      	b.n	800cff0 <memset+0x4>

0800cffc <_init>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	bf00      	nop
 800d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d002:	bc08      	pop	{r3}
 800d004:	469e      	mov	lr, r3
 800d006:	4770      	bx	lr

0800d008 <_fini>:
 800d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00a:	bf00      	nop
 800d00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00e:	bc08      	pop	{r3}
 800d010:	469e      	mov	lr, r3
 800d012:	4770      	bx	lr
