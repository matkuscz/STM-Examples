
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d074  0800d074  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d07c  0800d07c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d07c  0800d07c  0001d07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d080  0800d080  0001d080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800d084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800d094  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800d0f4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000de8  240000d0  0800d154  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000eb8  0800d154  00020eb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a211  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000050b4  00000000  00000000  0005a30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002318  00000000  00000000  0005f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002148  00000000  00000000  000616e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e714  00000000  00000000  00063828  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002035c  00000000  00000000  000a1f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00187714  00000000  00000000  000c2298  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002499ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009a5c  00000000  00000000  00249a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d03c 	.word	0x0800d03c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800d03c 	.word	0x0800d03c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fe1f 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f825 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fdfb 	bl	80011e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ea:	f000 f94f 	bl	800088c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005ee:	f000 f9c5 	bl	800097c <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005f2:	f000 f9fb 	bl	80009ec <MX_ETH_Init>
  MX_FMC_Init();
 80005f6:	f000 fcf7 	bl	8000fe8 <MX_FMC_Init>
  MX_I2C1_Init();
 80005fa:	f000 fa49 	bl	8000a90 <MX_I2C1_Init>
  MX_LTDC_Init();
 80005fe:	f000 fa87 	bl	8000b10 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000602:	f000 fb37 	bl	8000c74 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000606:	f000 fb5d 	bl	8000cc4 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800060a:	f000 fc19 	bl	8000e40 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fc3b 	bl	8000e88 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000612:	f000 fc85 	bl	8000f20 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000616:	f000 fcb5 	bl	8000f84 <MX_USB_OTG_HS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int a = 3;
 800061a:	2303      	movs	r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
	  int b = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	  int c = 4;
 8000622:	2304      	movs	r3, #4
 8000624:	607b      	str	r3, [r7, #4]

	  b = a + c;
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
  {
 800062e:	e7f4      	b.n	800061a <main+0x42>

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0cc      	sub	sp, #304	; 0x130
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800063a:	224c      	movs	r2, #76	; 0x4c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00c fcf4 	bl	800d02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000648:	2220      	movs	r2, #32
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f00c fced 	bl	800d02c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4618      	mov	r0, r3
 8000658:	23bc      	movs	r3, #188	; 0xbc
 800065a:	461a      	mov	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f00c fce5 	bl	800d02c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000662:	2002      	movs	r0, #2
 8000664:	f004 fc46 	bl	8004ef4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	4b83      	ldr	r3, [pc, #524]	; (800087c <SystemClock_Config+0x24c>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	4a82      	ldr	r2, [pc, #520]	; (800087c <SystemClock_Config+0x24c>)
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067a:	4b80      	ldr	r3, [pc, #512]	; (800087c <SystemClock_Config+0x24c>)
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	f003 0201 	and.w	r2, r3, #1
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	4b7e      	ldr	r3, [pc, #504]	; (8000880 <SystemClock_Config+0x250>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068e:	4a7c      	ldr	r2, [pc, #496]	; (8000880 <SystemClock_Config+0x250>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <SystemClock_Config+0x250>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a6:	bf00      	nop
 80006a8:	4b75      	ldr	r3, [pc, #468]	; (8000880 <SystemClock_Config+0x250>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b4:	d1f8      	bne.n	80006a8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006b6:	4b73      	ldr	r3, [pc, #460]	; (8000884 <SystemClock_Config+0x254>)
 80006b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ba:	4a72      	ldr	r2, [pc, #456]	; (8000884 <SystemClock_Config+0x254>)
 80006bc:	f023 0303 	bic.w	r3, r3, #3
 80006c0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006c2:	2322      	movs	r3, #34	; 0x22
 80006c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	2320      	movs	r3, #32
 80006d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ec:	230a      	movs	r3, #10
 80006ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000704:	230c      	movs	r3, #12
 8000706:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fd00 	bl	8005120 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000726:	f000 fe87 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	233f      	movs	r3, #63	; 0x3f
 800072c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800074e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f005 f894 	bl	8005890 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x142>
  {
    Error_Handler();
 800076e:	f000 fe63 	bl	8001438 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4a44      	ldr	r2, [pc, #272]	; (8000888 <SystemClock_Config+0x258>)
 8000778:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2204      	movs	r2, #4
 8000780:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	220a      	movs	r2, #10
 8000788:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2201      	movs	r2, #1
 8000790:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2202      	movs	r2, #2
 8000798:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2202      	movs	r2, #2
 80007a0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2220      	movs	r2, #32
 80007b0:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2220      	movs	r2, #32
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2281      	movs	r2, #129	; 0x81
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2202      	movs	r2, #2
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2202      	movs	r2, #2
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2202      	movs	r2, #2
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2200      	movs	r2, #0
 8000822:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800083e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f005 fbe5 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x230>
  {
    Error_Handler();
 800085c:	f000 fdec 	bl	8001438 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000860:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f005 f9b6 	bl	8005bd8 <HAL_RCC_MCOConfig>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800086c:	f004 fb7a 	bl	8004f64 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000870:	bf00      	nop
 8000872:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	58000400 	.word	0x58000400
 8000880:	58024800 	.word	0x58024800
 8000884:	58024400 	.word	0x58024400
 8000888:	232d0109 	.word	0x232d0109

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008b0:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_ADC1_Init+0xe0>)
 80008b2:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <MX_ADC1_Init+0xe4>)
 80008b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_ADC1_Init+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_ADC1_Init+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_ADC1_Init+0xe0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_ADC1_Init+0xe0>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <MX_ADC1_Init+0xe0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_ADC1_Init+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <MX_ADC1_Init+0xe0>)
 80008dc:	2201      	movs	r2, #1
 80008de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_ADC1_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC1_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC1_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_ADC1_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC1_Init+0xe0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_ADC1_Init+0xe0>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC1_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090c:	4817      	ldr	r0, [pc, #92]	; (800096c <MX_ADC1_Init+0xe0>)
 800090e:	f001 feed 	bl	80026ec <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000918:	f000 fd8e 	bl	8001438 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_ADC1_Init+0xe0>)
 8000928:	f002 fcba 	bl	80032a0 <HAL_ADCEx_MultiModeConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000932:	f000 fd81 	bl	8001438 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_ADC1_Init+0xe8>)
 8000938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093a:	2306      	movs	r3, #6
 800093c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_ADC1_Init+0xec>)
 8000944:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000946:	2304      	movs	r3, #4
 8000948:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_ADC1_Init+0xe0>)
 8000954:	f002 f86a 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800095e:	f000 fd6b 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	24000b74 	.word	0x24000b74
 8000970:	40022000 	.word	0x40022000
 8000974:	04300002 	.word	0x04300002
 8000978:	47ff0000 	.word	0x47ff0000

0800097c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <MX_DFSDM1_Init+0x6c>)
 8000984:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000988:	2201      	movs	r2, #1
 800098a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009be:	2201      	movs	r2, #1
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009d0:	f002 fe24 	bl	800361c <HAL_DFSDM_ChannelInit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80009da:	f000 fd2d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000120 	.word	0x24000120
 80009e8:	40017020 	.word	0x40017020

080009ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ETH_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_ETH_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ETH_Init+0x90>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	3301      	adds	r3, #1
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	22e1      	movs	r2, #225	; 0xe1
 8000a10:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	3303      	adds	r3, #3
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	3305      	adds	r3, #5
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_ETH_Init+0x98>)
 8000a3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_ETH_Init+0x9c>)
 8000a40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_ETH_Init+0x90>)
 8000a4c:	f002 fefc 	bl	8003848 <HAL_ETH_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 fcef 	bl	8001438 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5a:	2234      	movs	r2, #52	; 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_ETH_Init+0xa0>)
 8000a60:	f00c fae4 	bl	800d02c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_ETH_Init+0xa0>)
 8000a66:	2221      	movs	r2, #33	; 0x21
 8000a68:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_ETH_Init+0xa0>)
 8000a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a70:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_ETH_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	24000dc4 	.word	0x24000dc4
 8000a80:	40028000 	.word	0x40028000
 8000a84:	24000070 	.word	0x24000070
 8000a88:	24000010 	.word	0x24000010
 8000a8c:	24000e34 	.word	0x24000e34

08000a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000acc:	f003 fc9c 	bl	8004408 <HAL_I2C_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ad6:	f000 fcaf 	bl	8001438 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ade:	f003 fd23 	bl	8004528 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 fca6 	bl	8001438 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000af0:	f003 fd65 	bl	80045be <HAL_I2CEx_ConfigDigitalFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 fc9d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	24000560 	.word	0x24000560
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	10909cec 	.word	0x10909cec

08000b10 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09a      	sub	sp, #104	; 0x68
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00c fa84 	bl	800d02c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2234      	movs	r2, #52	; 0x34
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00c fa7e 	bl	800d02c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b30:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b32:	4a4f      	ldr	r2, [pc, #316]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b34:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b36:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b48:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b4e:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b54:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b56:	2203      	movs	r2, #3
 8000b58:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b5a:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b68:	f240 228e 	movw	r2, #654	; 0x28e
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b70:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b78:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b80:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b9e:	4833      	ldr	r0, [pc, #204]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000ba0:	f003 fd5a 	bl	8004658 <HAL_LTDC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000baa:	f000 fc45 	bl	8001438 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481c      	ldr	r0, [pc, #112]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000bfc:	f003 fdfc 	bl	80047f8 <HAL_LTDC_ConfigLayer>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000c06:	f000 fc17 	bl	8001438 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2201      	movs	r2, #1
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_LTDC_Init+0x15c>)
 8000c56:	f003 fdcf 	bl	80047f8 <HAL_LTDC_ConfigLayer>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000c60:	f000 fbea 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3768      	adds	r7, #104	; 0x68
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000a34 	.word	0x24000a34
 8000c70:	50001000 	.word	0x50001000

08000c74 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <MX_QUADSPI_Init+0x4c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000caa:	f004 f96b 	bl	8004f84 <HAL_QSPI_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000cb4:	f000 fbc0 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000e68 	.word	0x24000e68
 8000cc0:	52005000 	.word	0x52005000

08000cc4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cca:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <MX_SAI1_Init+0x16c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cce:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cd4:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000cda:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ce0:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cec:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cf2:	4b4e      	ldr	r3, [pc, #312]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cf8:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cfe:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d04:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d06:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <MX_SAI1_Init+0x170>)
 8000d08:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d0a:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d10:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d16:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d1c:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d30:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d5c:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d62:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d68:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d6e:	482f      	ldr	r0, [pc, #188]	; (8000e2c <MX_SAI1_Init+0x168>)
 8000d70:	f006 fff6 	bl	8007d60 <HAL_SAI_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000d7a:	f000 fb5d 	bl	8001438 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d80:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <MX_SAI1_Init+0x178>)
 8000d82:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d92:	2240      	movs	r2, #64	; 0x40
 8000d94:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000de4:	2208      	movs	r2, #8
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_SAI1_Init+0x174>)
 8000e1a:	f006 ffa1 	bl	8007d60 <HAL_SAI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000e24:	f000 fb08 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	24000cf8 	.word	0x24000cf8
 8000e30:	40015804 	.word	0x40015804
 8000e34:	0002ee00 	.word	0x0002ee00
 8000e38:	24000adc 	.word	0x24000adc
 8000e3c:	40015824 	.word	0x40015824

08000e40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_SDMMC1_SD_Init+0x44>)
 8000e48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e6c:	f007 fa22 	bl	80082b4 <HAL_SD_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e76:	f000 fadf 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240009b4 	.word	0x240009b4
 8000e84:	52007000 	.word	0x52007000

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_USART1_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f008 faaf 	bl	8009434 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 faac 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ee4:	f00a fe19 	bl	800bb1a <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f000 faa3 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f00a fe4e 	bl	800bb96 <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 fa9a 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000f06:	f00a fdcf 	bl	800baa8 <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 fa92 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000bd8 	.word	0x24000bd8
 8000f1c:	40011000 	.word	0x40011000

08000f20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f28:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f68:	f003 fe7c 	bl	8004c64 <HAL_PCD_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f72:	f000 fa61 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240005ac 	.word	0x240005ac
 8000f80:	40080000 	.word	0x40080000

08000f84 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f90:	2209      	movs	r2, #9
 8000f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000fcc:	f003 fe4a 	bl	8004c64 <HAL_PCD_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fd6:	f000 fa2f 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24000158 	.word	0x24000158
 8000fe4:	40040000 	.word	0x40040000

08000fe8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8001014:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001016:	4a6d      	ldr	r2, [pc, #436]	; (80011cc <MX_FMC_Init+0x1e4>)
 8001018:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800101a:	4b6b      	ldr	r3, [pc, #428]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800101c:	4a6c      	ldr	r2, [pc, #432]	; (80011d0 <MX_FMC_Init+0x1e8>)
 800101e:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001020:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001026:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 800102c:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800102e:	2208      	movs	r2, #8
 8001030:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001034:	2210      	movs	r2, #16
 8001036:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001038:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800103e:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001044:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 800105c:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800105e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800106a:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <MX_FMC_Init+0x1e0>)
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001070:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <MX_FMC_Init+0x1e0>)
 8001078:	2200      	movs	r2, #0
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800107c:	230f      	movs	r3, #15
 800107e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001080:	230f      	movs	r3, #15
 8001082:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001084:	23ff      	movs	r3, #255	; 0xff
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001088:	230f      	movs	r3, #15
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800108c:	2310      	movs	r3, #16
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001090:	2311      	movs	r3, #17
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4849      	ldr	r0, [pc, #292]	; (80011c8 <MX_FMC_Init+0x1e0>)
 80010a2:	f003 fd81 	bl	8004ba8 <HAL_NOR_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 80010ac:	f000 f9c4 	bl	8001438 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <MX_FMC_Init+0x1e4>)
 80010b4:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <MX_FMC_Init+0x1e8>)
 80010ba:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010be:	2204      	movs	r2, #4
 80010c0:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010e6:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <MX_FMC_Init+0x1ec>)
 80010fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <MX_FMC_Init+0x1ec>)
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <MX_FMC_Init+0x1ec>)
 8001108:	2200      	movs	r2, #0
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <MX_FMC_Init+0x1ec>)
 800110e:	2200      	movs	r2, #0
 8001110:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MX_FMC_Init+0x1ec>)
 8001114:	2200      	movs	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001118:	230f      	movs	r3, #15
 800111a:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800111c:	230f      	movs	r3, #15
 800111e:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001124:	230f      	movs	r3, #15
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001128:	2310      	movs	r3, #16
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800112c:	2311      	movs	r3, #17
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <MX_FMC_Init+0x1ec>)
 800113e:	f008 f929 	bl	8009394 <HAL_SRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 8001148:	f000 f976 	bl	8001438 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_FMC_Init+0x1f0>)
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <MX_FMC_Init+0x1f4>)
 8001150:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001154:	2201      	movs	r2, #1
 8001156:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_FMC_Init+0x1f0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001166:	2220      	movs	r2, #32
 8001168:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_FMC_Init+0x1f0>)
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_FMC_Init+0x1f0>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_FMC_Init+0x1f0>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_FMC_Init+0x1f0>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800118e:	2310      	movs	r3, #16
 8001190:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001192:	2310      	movs	r3, #16
 8001194:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8001196:	2310      	movs	r3, #16
 8001198:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800119a:	2310      	movs	r3, #16
 800119c:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 800119e:	2310      	movs	r3, #16
 80011a0:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 80011a2:	2310      	movs	r3, #16
 80011a4:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 80011a6:	2310      	movs	r3, #16
 80011a8:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <MX_FMC_Init+0x1f0>)
 80011b0:	f008 f8b4 	bl	800931c <HAL_SDRAM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 80011ba:	f000 f93d 	bl	8001438 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	; 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000c64 	.word	0x24000c64
 80011cc:	52004000 	.word	0x52004000
 80011d0:	52004104 	.word	0x52004104
 80011d4:	24000cac 	.word	0x24000cac
 80011d8:	24000d90 	.word	0x24000d90
 80011dc:	52004140 	.word	0x52004140

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011f6:	4b89      	ldr	r3, [pc, #548]	; (800141c <MX_GPIO_Init+0x23c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a87      	ldr	r2, [pc, #540]	; (800141c <MX_GPIO_Init+0x23c>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <MX_GPIO_Init+0x23c>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <MX_GPIO_Init+0x23c>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a80      	ldr	r2, [pc, #512]	; (800141c <MX_GPIO_Init+0x23c>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b7d      	ldr	r3, [pc, #500]	; (800141c <MX_GPIO_Init+0x23c>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001232:	4b7a      	ldr	r3, [pc, #488]	; (800141c <MX_GPIO_Init+0x23c>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a78      	ldr	r2, [pc, #480]	; (800141c <MX_GPIO_Init+0x23c>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <MX_GPIO_Init+0x23c>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <MX_GPIO_Init+0x23c>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a71      	ldr	r2, [pc, #452]	; (800141c <MX_GPIO_Init+0x23c>)
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <MX_GPIO_Init+0x23c>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	4b6b      	ldr	r3, [pc, #428]	; (800141c <MX_GPIO_Init+0x23c>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a69      	ldr	r2, [pc, #420]	; (800141c <MX_GPIO_Init+0x23c>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <MX_GPIO_Init+0x23c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	4b63      	ldr	r3, [pc, #396]	; (800141c <MX_GPIO_Init+0x23c>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a62      	ldr	r2, [pc, #392]	; (800141c <MX_GPIO_Init+0x23c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <MX_GPIO_Init+0x23c>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <MX_GPIO_Init+0x23c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a5a      	ldr	r2, [pc, #360]	; (800141c <MX_GPIO_Init+0x23c>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <MX_GPIO_Init+0x23c>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012c8:	4b54      	ldr	r3, [pc, #336]	; (800141c <MX_GPIO_Init+0x23c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a53      	ldr	r2, [pc, #332]	; (800141c <MX_GPIO_Init+0x23c>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <MX_GPIO_Init+0x23c>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	4b4d      	ldr	r3, [pc, #308]	; (800141c <MX_GPIO_Init+0x23c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <MX_GPIO_Init+0x23c>)
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <MX_GPIO_Init+0x23c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x23c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a44      	ldr	r2, [pc, #272]	; (800141c <MX_GPIO_Init+0x23c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_GPIO_Init+0x23c>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x23c>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a3c      	ldr	r2, [pc, #240]	; (800141c <MX_GPIO_Init+0x23c>)
 800132a:	f043 0320 	orr.w	r3, r3, #32
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_GPIO_Init+0x23c>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2108      	movs	r1, #8
 8001344:	4836      	ldr	r0, [pc, #216]	; (8001420 <MX_GPIO_Init+0x240>)
 8001346:	f003 f845 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001350:	4834      	ldr	r0, [pc, #208]	; (8001424 <MX_GPIO_Init+0x244>)
 8001352:	f003 f83f 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LED3_RGB_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2150      	movs	r1, #80	; 0x50
 800135a:	4833      	ldr	r0, [pc, #204]	; (8001428 <MX_GPIO_Init+0x248>)
 800135c:	f003 f83a 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 8001360:	2308      	movs	r3, #8
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	482a      	ldr	r0, [pc, #168]	; (8001420 <MX_GPIO_Init+0x240>)
 8001378:	f002 fe7c 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 800137c:	2304      	movs	r3, #4
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800138c:	230a      	movs	r3, #10
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	4825      	ldr	r0, [pc, #148]	; (800142c <MX_GPIO_Init+0x24c>)
 8001398:	f002 fe6c 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_GPIO_Init+0x250>)
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <MX_GPIO_Init+0x254>)
 80013b2:	f002 fe5f 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4815      	ldr	r0, [pc, #84]	; (8001428 <MX_GPIO_Init+0x248>)
 80013d4:	f002 fe4e 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 80013d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x244>)
 80013f2:	f002 fe3f 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 80013f6:	2350      	movs	r3, #80	; 0x50
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140a:	4619      	mov	r1, r3
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x248>)
 800140e:	f002 fe31 	bl	8004074 <HAL_GPIO_Init>

}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	58024400 	.word	0x58024400
 8001420:	58020c00 	.word	0x58020c00
 8001424:	58021400 	.word	0x58021400
 8001428:	58020000 	.word	0x58020000
 800142c:	58021000 	.word	0x58021000
 8001430:	11110000 	.word	0x11110000
 8001434:	58022000 	.word	0x58022000

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_MspInit+0x30>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x30>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x30>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	58024400 	.word	0x58024400

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_ADC_MspInit+0x70>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d129      	bne.n	80014e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 8001490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 80014a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_ADC_MspInit+0x74>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80014ca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80014ce:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80014d2:	f000 ff75 	bl	80023c0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80014d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014da:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80014de:	f000 ff6f 	bl	80023c0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000
 80014f0:	58024400 	.word	0x58024400

080014f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_DFSDM_ChannelMspInit+0xa4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d13d      	bne.n	8001590 <HAL_DFSDM_ChannelMspInit+0x9c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_DFSDM_ChannelMspInit+0xa8>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001550:	2304      	movs	r3, #4
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001560:	2306      	movs	r3, #6
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xac>)
 800156c:	f002 fd82 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001570:	2308      	movs	r3, #8
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001580:	2303      	movs	r3, #3
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xac>)
 800158c:	f002 fd72 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	240000ec 	.word	0x240000ec
 800159c:	58024400 	.word	0x58024400
 80015a0:	58020800 	.word	0x58020800

080015a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	; 0x38
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_ETH_MspInit+0x144>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f040 808b 	bne.w	80016de <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ce:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d8:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e2:	623b      	str	r3, [r7, #32]
 80015e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_ETH_MspInit+0x148>)
 80015f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160a:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_ETH_MspInit+0x148>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_ETH_MspInit+0x148>)
 800162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	4a29      	ldr	r2, [pc, #164]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	4a21      	ldr	r2, [pc, #132]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_ETH_MspInit+0x148>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1 
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 800167c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <HAL_ETH_MspInit+0x14c>)
 800169a:	f002 fceb 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800169e:	2332      	movs	r3, #50	; 0x32
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ae:	230b      	movs	r3, #11
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <HAL_ETH_MspInit+0x150>)
 80016ba:	f002 fcdb 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80016be:	2386      	movs	r3, #134	; 0x86
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ce:	230b      	movs	r3, #11
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_ETH_MspInit+0x154>)
 80016da:	f002 fccb 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	; 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40028000 	.word	0x40028000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58021800 	.word	0x58021800
 80016f4:	58020800 	.word	0x58020800
 80016f8:	58020000 	.word	0x58020000

080016fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_I2C_MspInit+0x88>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d12d      	bne.n	800177a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001740:	2312      	movs	r3, #18
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174c:	2304      	movs	r3, #4
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <HAL_I2C_MspInit+0x90>)
 8001758:	f002 fc8c 	bl	8004074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 800175e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 8001764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001768:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_I2C_MspInit+0x8c>)
 800176e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40005400 	.word	0x40005400
 8001788:	58024400 	.word	0x58024400
 800178c:	58020400 	.word	0x58020400

08001790 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3a      	ldr	r2, [pc, #232]	; (8001898 <HAL_LTDC_MspInit+0x108>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d16d      	bne.n	800188e <HAL_LTDC_MspInit+0xfe>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d6:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f4:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_LTDC_MspInit+0x10c>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5 
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin 
 800182a:	23ff      	movs	r3, #255	; 0xff
 800182c:	61fb      	str	r3, [r7, #28]
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800183a:	230e      	movs	r3, #14
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4816      	ldr	r0, [pc, #88]	; (80018a0 <HAL_LTDC_MspInit+0x110>)
 8001846:	f002 fc15 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin 
 800184a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184e:	61fb      	str	r3, [r7, #28]
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin 
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin 
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800185c:	230e      	movs	r3, #14
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <HAL_LTDC_MspInit+0x114>)
 8001868:	f002 fc04 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 800186c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800187e:	230e      	movs	r3, #14
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_LTDC_MspInit+0x118>)
 800188a:	f002 fbf3 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3730      	adds	r7, #48	; 0x30
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	50001000 	.word	0x50001000
 800189c:	58024400 	.word	0x58024400
 80018a0:	58022800 	.word	0x58022800
 80018a4:	58022400 	.word	0x58022400
 80018a8:	58022000 	.word	0x58022000

080018ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_QSPI_MspInit+0x188>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 80ad 	bne.w	8001a2a <HAL_QSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 80018d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018d6:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 80018e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ee:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 80018f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	4a41      	ldr	r2, [pc, #260]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 8001932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_QSPI_MspInit+0x18c>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK 
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8001966:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001978:	2309      	movs	r3, #9
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	482e      	ldr	r0, [pc, #184]	; (8001a3c <HAL_QSPI_MspInit+0x190>)
 8001984:	f002 fb76 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001988:	2340      	movs	r3, #64	; 0x40
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001998:	230a      	movs	r3, #10
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4826      	ldr	r0, [pc, #152]	; (8001a3c <HAL_QSPI_MspInit+0x190>)
 80019a4:	f002 fb66 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80019a8:	23c0      	movs	r3, #192	; 0xc0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019b8:	2309      	movs	r3, #9
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <HAL_QSPI_MspInit+0x194>)
 80019c4:	f002 fb56 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80019c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019da:	230a      	movs	r3, #10
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4816      	ldr	r0, [pc, #88]	; (8001a40 <HAL_QSPI_MspInit+0x194>)
 80019e6:	f002 fb45 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 80019ea:	230c      	movs	r3, #12
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019fa:	2309      	movs	r3, #9
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <HAL_QSPI_MspInit+0x198>)
 8001a06:	f002 fb35 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <HAL_QSPI_MspInit+0x19c>)
 8001a26:	f002 fb25 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3730      	adds	r7, #48	; 0x30
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	52005000 	.word	0x52005000
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	58021800 	.word	0x58021800
 8001a40:	58021400 	.word	0x58021400
 8001a44:	58021c00 	.word	0x58021c00
 8001a48:	58020400 	.word	0x58020400

08001a4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a42      	ldr	r2, [pc, #264]	; (8001b74 <HAL_SD_MspInit+0x128>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d17d      	bne.n	8001b6a <HAL_SD_MspInit+0x11e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a74:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_SD_MspInit+0x12c>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR 
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin 
 8001ae6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001aea:	61fb      	str	r3, [r7, #28]
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001af8:	230c      	movs	r3, #12
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_SD_MspInit+0x130>)
 8001b04:	f002 fab6 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001b08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4816      	ldr	r0, [pc, #88]	; (8001b80 <HAL_SD_MspInit+0x134>)
 8001b26:	f002 faa5 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <HAL_SD_MspInit+0x138>)
 8001b46:	f002 fa95 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_SD_MspInit+0x130>)
 8001b66:	f002 fa85 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	52007000 	.word	0x52007000
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58020800 	.word	0x58020800
 8001b80:	58020400 	.word	0x58020400
 8001b84:	58020c00 	.word	0x58020c00

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_UART_MspInit+0x88>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12e      	bne.n	8001c08 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb0:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001be6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0x90>)
 8001c04:	f002 fa36 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40011000 	.word	0x40011000
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58020400 	.word	0x58020400

08001c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b090      	sub	sp, #64	; 0x40
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7b      	ldr	r2, [pc, #492]	; (8001e28 <HAL_PCD_MspInit+0x20c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12f      	bne.n	8001c9e <HAL_PCD_MspInit+0x82>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b77      	ldr	r3, [pc, #476]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM 
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c6e:	230a      	movs	r3, #10
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	486d      	ldr	r0, [pc, #436]	; (8001e30 <HAL_PCD_MspInit+0x214>)
 8001c7a:	f002 f9fb 	bl	8004074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c7e:	4b6b      	ldr	r3, [pc, #428]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c84:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001c9c:	e0c0      	b.n	8001e20 <HAL_PCD_MspInit+0x204>
  else if(hpcd->Instance==USB_OTG_HS)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <HAL_PCD_MspInit+0x218>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	f040 80bb 	bne.w	8001e20 <HAL_PCD_MspInit+0x204>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b60      	ldr	r3, [pc, #384]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a5e      	ldr	r2, [pc, #376]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin 
 8001d40:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d52:	230a      	movs	r3, #10
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4836      	ldr	r0, [pc, #216]	; (8001e38 <HAL_PCD_MspInit+0x21c>)
 8001d5e:	f002 f989 	bl	8004074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d74:	230a      	movs	r3, #10
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482f      	ldr	r0, [pc, #188]	; (8001e3c <HAL_PCD_MspInit+0x220>)
 8001d80:	f002 f978 	bl	8004074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2302      	movs	r3, #2
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001d94:	230a      	movs	r3, #10
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4828      	ldr	r0, [pc, #160]	; (8001e40 <HAL_PCD_MspInit+0x224>)
 8001da0:	f002 f968 	bl	8004074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001da4:	2310      	movs	r3, #16
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db0:	2302      	movs	r3, #2
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001db4:	230a      	movs	r3, #10
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4821      	ldr	r0, [pc, #132]	; (8001e44 <HAL_PCD_MspInit+0x228>)
 8001dc0:	f002 f958 	bl	8004074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001dc4:	2328      	movs	r3, #40	; 0x28
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001dd4:	230a      	movs	r3, #10
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <HAL_PCD_MspInit+0x214>)
 8001de0:	f002 f948 	bl	8004074 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e08:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001e0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_PCD_MspInit+0x210>)
 8001e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
}
 8001e20:	bf00      	nop
 8001e22:	3740      	adds	r7, #64	; 0x40
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40080000 	.word	0x40080000
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	58020000 	.word	0x58020000
 8001e34:	40040000 	.word	0x40040000
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	58022000 	.word	0x58022000
 8001e40:	58020800 	.word	0x58020800
 8001e44:	58021c00 	.word	0x58021c00

08001e48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_FMC_MspInit+0x10c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d172      	bne.n	8001f4a <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_FMC_MspInit+0x10c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_FMC_MspInit+0x110>)
 8001e6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_FMC_MspInit+0x110>)
 8001e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e76:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_FMC_MspInit+0x110>)
 8001e7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin 
 8001e88:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001e8c:	607b      	str	r3, [r7, #4]
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin 
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	482e      	ldr	r0, [pc, #184]	; (8001f5c <HAL_FMC_MspInit+0x114>)
 8001ea4:	f002 f8e6 	bl	8004074 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5 
 8001ea8:	f248 533f 	movw	r3, #34111	; 0x853f
 8001eac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin 
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4827      	ldr	r0, [pc, #156]	; (8001f60 <HAL_FMC_MspInit+0x118>)
 8001ec4:	f002 f8d6 	bl	8004074 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin 
 8001ec8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001ecc:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin 
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin 
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eda:	230c      	movs	r3, #12
 8001edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4820      	ldr	r0, [pc, #128]	; (8001f64 <HAL_FMC_MspInit+0x11c>)
 8001ee4:	f002 f8c6 	bl	8004074 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin 
 8001ee8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001eec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin 
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001efa:	230c      	movs	r3, #12
 8001efc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4819      	ldr	r0, [pc, #100]	; (8001f68 <HAL_FMC_MspInit+0x120>)
 8001f04:	f002 f8b6 	bl	8004074 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin 
 8001f08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f0c:	607b      	str	r3, [r7, #4]
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin 
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <HAL_FMC_MspInit+0x124>)
 8001f24:	f002 f8a6 	bl	8004074 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin 
 8001f28:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f2c:	607b      	str	r3, [r7, #4]
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin 
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	480b      	ldr	r0, [pc, #44]	; (8001f70 <HAL_FMC_MspInit+0x128>)
 8001f44:	f002 f896 	bl	8004074 <HAL_GPIO_Init>
 8001f48:	e000      	b.n	8001f4c <HAL_FMC_MspInit+0x104>
    return;
 8001f4a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	240000f0 	.word	0x240000f0
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	58022000 	.word	0x58022000
 8001f60:	58021800 	.word	0x58021800
 8001f64:	58020c00 	.word	0x58020c00
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58021c00 	.word	0x58021c00
 8001f70:	58021400 	.word	0x58021400

08001f74 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001f7c:	f7ff ff64 	bl	8001e48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f90:	f7ff ff5a 	bl	8001e48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fa4:	f7ff ff50 	bl	8001e48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a35      	ldr	r2, [pc, #212]	; (8002094 <HAL_SAI_MspInit+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d137      	bne.n	8002032 <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_SAI_MspInit+0xec>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd0:	4a32      	ldr	r2, [pc, #200]	; (800209c <HAL_SAI_MspInit+0xec>)
 8001fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_SAI_MspInit+0xec>)
 8001fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 8001ff0:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 8001ff2:	2370      	movs	r3, #112	; 0x70
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002002:	2306      	movs	r3, #6
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4824      	ldr	r0, [pc, #144]	; (80020a0 <HAL_SAI_MspInit+0xf0>)
 800200e:	f002 f831 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002022:	2306      	movs	r3, #6
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	481d      	ldr	r0, [pc, #116]	; (80020a4 <HAL_SAI_MspInit+0xf4>)
 800202e:	f002 f821 	bl	8004074 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_SAI_MspInit+0xf8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d127      	bne.n	800208c <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10e      	bne.n	8002062 <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_SAI_MspInit+0xec>)
 8002046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_SAI_MspInit+0xec>)
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002050:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_SAI_MspInit+0xec>)
 8002056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_SAI_MspInit+0xe8>)
 800206a:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800206c:	2308      	movs	r3, #8
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800207c:	2306      	movs	r3, #6
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <HAL_SAI_MspInit+0xf0>)
 8002088:	f001 fff4 	bl	8004074 <HAL_GPIO_Init>

    }
}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40015804 	.word	0x40015804
 8002098:	240000f4 	.word	0x240000f4
 800209c:	58024400 	.word	0x58024400
 80020a0:	58021000 	.word	0x58021000
 80020a4:	58021800 	.word	0x58021800
 80020a8:	40015824 	.word	0x40015824

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <MemManage_Handler+0x4>

080020c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002100:	f000 f8fc 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <SystemInit+0xac>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <SystemInit+0xac>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <SystemInit+0xb0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <SystemInit+0xb0>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <SystemInit+0xb0>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <SystemInit+0xb0>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4921      	ldr	r1, [pc, #132]	; (80021b8 <SystemInit+0xb0>)
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <SystemInit+0xb4>)
 8002136:	4013      	ands	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <SystemInit+0xb0>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <SystemInit+0xb0>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <SystemInit+0xb0>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <SystemInit+0xb0>)
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <SystemInit+0xb0>)
 8002154:	2200      	movs	r2, #0
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <SystemInit+0xb0>)
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <SystemInit+0xb0>)
 8002160:	2200      	movs	r2, #0
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <SystemInit+0xb0>)
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <SystemInit+0xb0>)
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <SystemInit+0xb0>)
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <SystemInit+0xb0>)
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <SystemInit+0xb0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <SystemInit+0xb0>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <SystemInit+0xb0>)
 800218a:	2200      	movs	r2, #0
 800218c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <SystemInit+0xb8>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <SystemInit+0xbc>)
 8002194:	4013      	ands	r3, r2
 8002196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800219a:	d202      	bcs.n	80021a2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <SystemInit+0xc0>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SystemInit+0xac>)
 80021a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00
 80021b8:	58024400 	.word	0x58024400
 80021bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80021c0:	5c001000 	.word	0x5c001000
 80021c4:	ffff0000 	.word	0xffff0000
 80021c8:	51008108 	.word	0x51008108

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021d2:	e003      	b.n	80021dc <LoopCopyDataInit>

080021d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021da:	3104      	adds	r1, #4

080021dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021dc:	480b      	ldr	r0, [pc, #44]	; (800220c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021e4:	d3f6      	bcc.n	80021d4 <CopyDataInit>
  ldr  r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021e8:	e002      	b.n	80021f0 <LoopFillZerobss>

080021ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021ec:	f842 3b04 	str.w	r3, [r2], #4

080021f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021f4:	d3f9      	bcc.n	80021ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021f6:	f7ff ff87 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f00a fef3 	bl	800cfe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7fe f9eb 	bl	80005d8 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002208:	0800d084 	.word	0x0800d084
  ldr  r0, =_sdata
 800220c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002210:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8002214:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8002218:	24000eb8 	.word	0x24000eb8

0800221c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC3_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f001 f9c7 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800222a:	f003 fd3f 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_Init+0x60>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_Init+0x64>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_Init+0x68>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_Init+0x68>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_Init+0x60>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490b      	ldr	r1, [pc, #44]	; (8002284 <HAL_Init+0x64>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <HAL_Init+0x6c>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f812 	bl	8002290 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e002      	b.n	800227c <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002276:	f7ff f8e7 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	58024400 	.word	0x58024400
 8002284:	0800d064 	.word	0x0800d064
 8002288:	24000000 	.word	0x24000000
 800228c:	24000004 	.word	0x24000004

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_InitTick+0x60>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e021      	b.n	80022e8 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_InitTick+0x64>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_InitTick+0x60>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f9a1 	bl	8003602 <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f001 f979 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_InitTick+0x68>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2400000c 	.word	0x2400000c
 80022f4:	24000000 	.word	0x24000000
 80022f8:	24000008 	.word	0x24000008

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	2400000c 	.word	0x2400000c
 8002320:	24000eb4 	.word	0x24000eb4

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	24000eb4 	.word	0x24000eb4

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_Delay+0x40>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2400000c 	.word	0x2400000c

08002380 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_GetREVID+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	5c001000 	.word	0x5c001000

08002398 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80023a8:	4904      	ldr	r1, [pc, #16]	; (80023bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58000400 	.word	0x58000400

080023c0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	58000400 	.word	0x58000400

080023ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002454:	b490      	push	{r4, r7}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	430b      	orrs	r3, r1
 8002480:	4313      	orrs	r3, r2
 8002482:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bc90      	pop	{r4, r7}
 800248c:	4770      	bx	lr

0800248e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	611a      	str	r2, [r3, #16]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024c0:	b490      	push	{r4, r7}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3360      	adds	r3, #96	; 0x60
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	6023      	str	r3, [r4, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc90      	pop	{r4, r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024f0:	b490      	push	{r4, r7}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3330      	adds	r3, #48	; 0x30
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	4413      	add	r3, r2
 800250e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	211f      	movs	r1, #31
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	f003 011f 	and.w	r1, r3, #31
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bc90      	pop	{r4, r7}
 8002540:	4770      	bx	lr

08002542 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002542:	b490      	push	{r4, r7}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3314      	adds	r3, #20
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	0e5b      	lsrs	r3, r3, #25
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	4413      	add	r3, r2
 8002560:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0d1b      	lsrs	r3, r3, #20
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2107      	movs	r1, #7
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	401a      	ands	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0d1b      	lsrs	r3, r3, #20
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bc90      	pop	{r4, r7}
 8002590:	4770      	bx	lr
	...

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	000fffff 	.word	0x000fffff

080025dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6093      	str	r3, [r2, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	5fffffc0 	.word	0x5fffffc0

08002600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d101      	bne.n	800261a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <LL_ADC_EnableInternalRegulator+0x24>)
 8002636:	4013      	ands	r3, r2
 8002638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	6fffffc0 	.word	0x6fffffc0

08002650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <LL_ADC_IsEnabled+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_ADC_IsEnabled+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d101      	bne.n	80026dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e18e      	b.n	8002a24 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fe feb1 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff67 	bl	8002600 <LL_ADC_IsDeepPowerDownEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff4d 	bl	80025dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff82 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d113      	bne.n	800277a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff66 	bl	8002628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800275c:	4b9a      	ldr	r3, [pc, #616]	; (80029c8 <HAL_ADC_Init+0x2dc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a9a      	ldr	r2, [pc, #616]	; (80029cc <HAL_ADC_Init+0x2e0>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800276c:	e002      	b.n	8002774 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3b01      	subs	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff66 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff77 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 80027b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 8129 	bne.w	8002a12 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8125 	bne.w	8002a12 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff4b 	bl	8002678 <LL_ADC_IsEnabled>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d136      	bne.n	8002856 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a78      	ldr	r2, [pc, #480]	; (80029d0 <HAL_ADC_Init+0x2e4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_Init+0x110>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a77      	ldr	r2, [pc, #476]	; (80029d4 <HAL_ADC_Init+0x2e8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10e      	bne.n	800281a <HAL_ADC_Init+0x12e>
 80027fc:	4874      	ldr	r0, [pc, #464]	; (80029d0 <HAL_ADC_Init+0x2e4>)
 80027fe:	f7ff ff3b 	bl	8002678 <LL_ADC_IsEnabled>
 8002802:	4604      	mov	r4, r0
 8002804:	4873      	ldr	r0, [pc, #460]	; (80029d4 <HAL_ADC_Init+0x2e8>)
 8002806:	f7ff ff37 	bl	8002678 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	4323      	orrs	r3, r4
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e008      	b.n	800282c <HAL_ADC_Init+0x140>
 800281a:	486f      	ldr	r0, [pc, #444]	; (80029d8 <HAL_ADC_Init+0x2ec>)
 800281c:	f7ff ff2c 	bl	8002678 <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_ADC_Init+0x2e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_Init+0x158>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_ADC_Init+0x2e8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_ADC_Init+0x15c>
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_ADC_Init+0x2f0>)
 8002846:	e000      	b.n	800284a <HAL_ADC_Init+0x15e>
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_ADC_Init+0x2f4>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff fdcb 	bl	80023ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002856:	f7ff fd93 	bl	8002380 <HAL_GetREVID>
 800285a:	4602      	mov	r2, r0
 800285c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002860:	429a      	cmp	r2, r3
 8002862:	d914      	bls.n	800288e <HAL_ADC_Init+0x1a2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d110      	bne.n	800288e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7d5b      	ldrb	r3, [r3, #21]
 8002870:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002876:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800287c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
 8002882:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002884:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002886:	f043 030c 	orr.w	r3, r3, #12
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e00d      	b.n	80028aa <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7d5b      	ldrb	r3, [r3, #21]
 8002892:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002898:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800289e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7f1b      	ldrb	r3, [r3, #28]
 80028a4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7f1b      	ldrb	r3, [r3, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d106      	bne.n	80028c0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	045b      	lsls	r3, r3, #17
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_ADC_Init+0x2f8>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fed2 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 80028fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fedf 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002906:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d14a      	bne.n	80029a4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d147      	bne.n	80029a4 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7d1b      	ldrb	r3, [r3, #20]
 8002918:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_ADC_Init+0x2fc>)
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	430b      	orrs	r3, r1
 8002934:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800293c:	2b01      	cmp	r3, #1
 800293e:	d11b      	bne.n	8002978 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_ADC_Init+0x300>)
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002954:	3a01      	subs	r2, #1
 8002956:	0411      	lsls	r1, r2, #16
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800295c:	4311      	orrs	r1, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002968:	430a      	orrs	r2, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e007      	b.n	8002988 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fb58 	bl	8003054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d121      	bne.n	80029f0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f023 010f 	bic.w	r1, r3, #15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
 80029c4:	e01c      	b.n	8002a00 <HAL_ADC_Init+0x314>
 80029c6:	bf00      	nop
 80029c8:	24000000 	.word	0x24000000
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40022100 	.word	0x40022100
 80029d8:	58026000 	.word	0x58026000
 80029dc:	40022300 	.word	0x40022300
 80029e0:	58026300 	.word	0x58026300
 80029e4:	fff0c003 	.word	0xfff0c003
 80029e8:	ffffbffc 	.word	0xffffbffc
 80029ec:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 020f 	bic.w	r2, r2, #15
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a10:	e007      	b.n	8002a22 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3724      	adds	r7, #36	; 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd90      	pop	{r4, r7, pc}

08002a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b099      	sub	sp, #100	; 0x64
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a99      	ldr	r2, [pc, #612]	; (8002cac <HAL_ADC_ConfigChannel+0x280>)
 8002a46:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e2e6      	b.n	8003024 <HAL_ADC_ConfigChannel+0x5f8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fe1b 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 82cb 	bne.w	8003006 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x62>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	e00f      	b.n	8002aae <HAL_ADC_ConfigChannel+0x82>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	69d1      	ldr	r1, [r2, #28]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f7ff fd11 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fde3 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fdf0 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002ae4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 80b3 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 80af 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff fd1d 	bl	8002542 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b08:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_ADC_ConfigChannel+0x284>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d10b      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x102>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	e01d      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x13e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x128>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	e00a      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x13e>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d027      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6919      	ldr	r1, [r3, #16]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b82:	f7ff fc67 	bl	8002454 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	7e5b      	ldrb	r3, [r3, #25]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x170>
 8002b96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x172>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7ff fc8e 	bl	80024c0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6919      	ldr	r1, [r3, #16]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x18e>
 8002bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb8:	e000      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x190>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f7ff fc66 	bl	800248e <LL_ADC_SetDataRightShift>
 8002bc2:	e047      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	069b      	lsls	r3, r3, #26
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d107      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c2e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d107      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd0d 	bl	8002678 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 81d9 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f7ff fc8e 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_ADC_ConfigChannel+0x280>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f040 8101 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x288>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e016      	b.n	8002cda <HAL_ADC_ConfigChannel+0x2ae>
 8002cac:	47ff0000 	.word	0x47ff0000
 8002cb0:	5c001000 	.word	0x5c001000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d064      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x2ce>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf8:	e00e      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x2ec>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x30c>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	e010      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x32e>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x354>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	e011      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x378>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da4:	430b      	orrs	r3, r1
 8002da6:	e069      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x398>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	3301      	adds	r3, #1
 8002dbc:	069b      	lsls	r3, r3, #26
 8002dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc2:	e00e      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x3b6>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	61fb      	str	r3, [r7, #28]
  return result;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3d6>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	e010      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x3f8>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  return result;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x424>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	3b1e      	subs	r3, #30
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	e014      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x44e>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	3b1e      	subs	r3, #30
 8002e74:	051b      	lsls	r3, r3, #20
 8002e76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff fb5e 	bl	8002542 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f280 80c4 	bge.w	8003018 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0x478>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a64      	ldr	r2, [pc, #400]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x47c>
 8002ea4:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_ADC_ConfigChannel+0x608>)
 8002ea6:	e000      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x47e>
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_ADC_ConfigChannel+0x60c>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fac4 	bl	8002438 <LL_ADC_GetCommonPathInternalCh>
 8002eb0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a5d      	ldr	r2, [pc, #372]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_ADC_ConfigChannel+0x49a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5b      	ldr	r2, [pc, #364]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x4b8>
 8002ec6:	4859      	ldr	r0, [pc, #356]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002ec8:	f7ff fbd6 	bl	8002678 <LL_ADC_IsEnabled>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4858      	ldr	r0, [pc, #352]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002ed0:	f7ff fbd2 	bl	8002678 <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ca>
 8002ee4:	4855      	ldr	r0, [pc, #340]	; (800303c <HAL_ADC_ConfigChannel+0x610>)
 8002ee6:	f7ff fbc7 	bl	8002678 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07b      	beq.n	8002ff2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_ADC_ConfigChannel+0x614>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d12e      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x536>
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d129      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_ADC_ConfigChannel+0x610>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d17f      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a43      	ldr	r2, [pc, #268]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x500>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x504>
 8002f2c:	4a41      	ldr	r2, [pc, #260]	; (8003034 <HAL_ADC_ConfigChannel+0x608>)
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x506>
 8002f30:	4a41      	ldr	r2, [pc, #260]	; (8003038 <HAL_ADC_ConfigChannel+0x60c>)
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff fa69 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_ADC_ConfigChannel+0x618>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	4a40      	ldr	r2, [pc, #256]	; (8003048 <HAL_ADC_ConfigChannel+0x61c>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f60:	e05a      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a39      	ldr	r2, [pc, #228]	; (800304c <HAL_ADC_ConfigChannel+0x620>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d11e      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x57e>
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d119      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_ADC_ConfigChannel+0x610>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d14b      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x568>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x56c>
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_ADC_ConfigChannel+0x608>)
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x56e>
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_ADC_ConfigChannel+0x60c>)
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f7ff fa35 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fa8:	e036      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a28      	ldr	r2, [pc, #160]	; (8003050 <HAL_ADC_ConfigChannel+0x624>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d131      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d12c      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_ADC_ConfigChannel+0x610>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d127      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_ADC_ConfigChannel+0x600>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x5b0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_ADC_ConfigChannel+0x604>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x5b4>
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <HAL_ADC_ConfigChannel+0x608>)
 8002fde:	e000      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x5b6>
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_ADC_ConfigChannel+0x60c>)
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7ff fa11 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
 8002ff0:	e012      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003004:	e008      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003024:	4618      	mov	r0, r3
 8003026:	3764      	adds	r7, #100	; 0x64
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	40022000 	.word	0x40022000
 8003030:	40022100 	.word	0x40022100
 8003034:	40022300 	.word	0x40022300
 8003038:	58026300 	.word	0x58026300
 800303c:	58026000 	.word	0x58026000
 8003040:	cb840000 	.word	0xcb840000
 8003044:	24000000 	.word	0x24000000
 8003048:	053e2d63 	.word	0x053e2d63
 800304c:	c7520000 	.word	0xc7520000
 8003050:	cfb80000 	.word	0xcfb80000

08003054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a74      	ldr	r2, [pc, #464]	; (8003234 <ADC_ConfigureBoostMode+0x1e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <ADC_ConfigureBoostMode+0x1c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a73      	ldr	r2, [pc, #460]	; (8003238 <ADC_ConfigureBoostMode+0x1e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d109      	bne.n	8003084 <ADC_ConfigureBoostMode+0x30>
 8003070:	4b72      	ldr	r3, [pc, #456]	; (800323c <ADC_ConfigureBoostMode+0x1e8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e008      	b.n	8003096 <ADC_ConfigureBoostMode+0x42>
 8003084:	4b6e      	ldr	r3, [pc, #440]	; (8003240 <ADC_ConfigureBoostMode+0x1ec>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01a      	beq.n	80030d0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800309a:	f002 ff79 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 800309e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a8:	d006      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x64>
 80030aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ae:	d00b      	beq.n	80030c8 <ADC_ConfigureBoostMode+0x74>
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d000      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80030b6:	e05d      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	60fb      	str	r3, [r7, #12]
        break;
 80030c6:	e055      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	e051      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030d4:	f003 fe94 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 80030d8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030e2:	d02a      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
 80030e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030e8:	d813      	bhi.n	8003112 <ADC_ConfigureBoostMode+0xbe>
 80030ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030ee:	d024      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
 80030f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030f4:	d806      	bhi.n	8003104 <ADC_ConfigureBoostMode+0xb0>
 80030f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030fa:	d01e      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
 80030fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003100:	d01b      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003102:	e037      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003108:	d017      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
 800310a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800310e:	d014      	beq.n	800313a <ADC_ConfigureBoostMode+0xe6>
        break;
 8003110:	e030      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003112:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003116:	d021      	beq.n	800315c <ADC_ConfigureBoostMode+0x108>
 8003118:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800311c:	d806      	bhi.n	800312c <ADC_ConfigureBoostMode+0xd8>
 800311e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003122:	d013      	beq.n	800314c <ADC_ConfigureBoostMode+0xf8>
 8003124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003128:	d014      	beq.n	8003154 <ADC_ConfigureBoostMode+0x100>
        break;
 800312a:	e023      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800312c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003130:	d018      	beq.n	8003164 <ADC_ConfigureBoostMode+0x110>
 8003132:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003136:	d019      	beq.n	800316c <ADC_ConfigureBoostMode+0x118>
        break;
 8003138:	e01c      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c9b      	lsrs	r3, r3, #18
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]
        break;
 800314a:	e013      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
      break;
 8003152:	e00f      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	60fb      	str	r3, [r7, #12]
        break;
 800315a:	e00b      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	60fb      	str	r3, [r7, #12]
        break;
 8003162:	e007      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	09db      	lsrs	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e003      	b.n	8003174 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003174:	f7ff f904 	bl	8002380 <HAL_GetREVID>
 8003178:	4602      	mov	r2, r0
 800317a:	f241 0303 	movw	r3, #4099	; 0x1003
 800317e:	429a      	cmp	r2, r3
 8003180:	d815      	bhi.n	80031ae <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <ADC_ConfigureBoostMode+0x1f0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d908      	bls.n	800319c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003198:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 800319a:	e047      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	e03e      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a24      	ldr	r2, [pc, #144]	; (8003248 <ADC_ConfigureBoostMode+0x1f4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d808      	bhi.n	80031ce <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	e02e      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <ADC_ConfigureBoostMode+0x1f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d90e      	bls.n	80031f4 <ADC_ConfigureBoostMode+0x1a0>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <ADC_ConfigureBoostMode+0x1f8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d80a      	bhi.n	80031f4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	e01b      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <ADC_ConfigureBoostMode+0x1f8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d90e      	bls.n	800321a <ADC_ConfigureBoostMode+0x1c6>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <ADC_ConfigureBoostMode+0x1fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d80a      	bhi.n	800321a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e008      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	e7ff      	b.n	800322c <ADC_ConfigureBoostMode+0x1d8>
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40022000 	.word	0x40022000
 8003238:	40022100 	.word	0x40022100
 800323c:	40022300 	.word	0x40022300
 8003240:	58026300 	.word	0x58026300
 8003244:	01312d00 	.word	0x01312d00
 8003248:	005f5e10 	.word	0x005f5e10
 800324c:	00bebc20 	.word	0x00bebc20
 8003250:	017d7840 	.word	0x017d7840

08003254 <LL_ADC_IsEnabled>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <LL_ADC_IsEnabled+0x18>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <LL_ADC_IsEnabled+0x1a>
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_REG_IsConversionOngoing>:
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d101      	bne.n	8003292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b09f      	sub	sp, #124	; 0x7c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e0ba      	b.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5c      	ldr	r2, [pc, #368]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d102      	bne.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80032d0:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	e001      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e09d      	b.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ffbd 	bl	800327a <LL_ADC_REG_IsConversionOngoing>
 8003300:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ffb7 	bl	800327a <LL_ADC_REG_IsConversionOngoing>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d17f      	bne.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003314:	2b00      	cmp	r3, #0
 8003316:	d17c      	bne.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a47      	ldr	r2, [pc, #284]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a46      	ldr	r2, [pc, #280]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800332c:	4b45      	ldr	r3, [pc, #276]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800332e:	e000      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003330:	4b45      	ldr	r3, [pc, #276]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003332:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d039      	beq.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	431a      	orrs	r2, r3
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3a      	ldr	r2, [pc, #232]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a38      	ldr	r2, [pc, #224]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10e      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003362:	4836      	ldr	r0, [pc, #216]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003364:	f7ff ff76 	bl	8003254 <LL_ADC_IsEnabled>
 8003368:	4604      	mov	r4, r0
 800336a:	4835      	ldr	r0, [pc, #212]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800336c:	f7ff ff72 	bl	8003254 <LL_ADC_IsEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	4323      	orrs	r3, r4
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e008      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003380:	4832      	ldr	r0, [pc, #200]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003382:	f7ff ff67 	bl	8003254 <LL_ADC_IsEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d047      	beq.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800339c:	4013      	ands	r3, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6811      	ldr	r1, [r2, #0]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ae:	e03a      	b.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10e      	bne.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033d2:	f7ff ff3f 	bl	8003254 <LL_ADC_IsEnabled>
 80033d6:	4604      	mov	r4, r0
 80033d8:	4819      	ldr	r0, [pc, #100]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033da:	f7ff ff3b 	bl	8003254 <LL_ADC_IsEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	4323      	orrs	r3, r4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e008      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80033ee:	4817      	ldr	r0, [pc, #92]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033f0:	f7ff ff30 	bl	8003254 <LL_ADC_IsEnabled>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800340a:	4013      	ands	r3, r2
 800340c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800340e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003410:	e009      	b.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003424:	e000      	b.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003426:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003430:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003434:	4618      	mov	r0, r3
 8003436:	377c      	adds	r7, #124	; 0x7c
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	40022000 	.word	0x40022000
 8003440:	40022100 	.word	0x40022100
 8003444:	40022300 	.word	0x40022300
 8003448:	58026300 	.word	0x58026300
 800344c:	58026000 	.word	0x58026000
 8003450:	fffff0e0 	.word	0xfffff0e0

08003454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <__NVIC_SetPriorityGrouping+0x40>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003470:	4013      	ands	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x40>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00
 8003498:	05fa0000 	.word	0x05fa0000

0800349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <__NVIC_GetPriorityGrouping+0x18>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0307 	and.w	r3, r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff47 	bl	8003454 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035dc:	f7ff ff5e 	bl	800349c <__NVIC_GetPriorityGrouping>
 80035e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff ff90 	bl	800350c <NVIC_EncodePriority>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff5f 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffb2 	bl	8003574 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ac      	b.n	8003788 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f8b2 	bl	800379c <DFSDM_GetChannelFromInstance>
 8003638:	4602      	mov	r2, r0
 800363a:	4b55      	ldr	r3, [pc, #340]	; (8003790 <HAL_DFSDM_ChannelInit+0x174>)
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e09f      	b.n	8003788 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd ff53 	bl	80014f4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_DFSDM_ChannelInit+0x178>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	4a4f      	ldr	r2, [pc, #316]	; (8003794 <HAL_DFSDM_ChannelInit+0x178>)
 8003656:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1U)
 8003658:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <HAL_DFSDM_ChannelInit+0x178>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d125      	bne.n	80036ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 8003666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800366a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4948      	ldr	r1, [pc, #288]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a46      	ldr	r2, [pc, #280]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 8003680:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003684:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	791b      	ldrb	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d108      	bne.n	80036a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	493f      	ldr	r1, [pc, #252]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_DFSDM_ChannelInit+0x17c>)
 80036a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036aa:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80036ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80036ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80036d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 020f 	bic.w	r2, r2, #15
 80036e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003710:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f002 0207 	and.w	r2, r2, #7
 800373c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003768:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f810 	bl	800379c <DFSDM_GetChannelFromInstance>
 800377c:	4601      	mov	r1, r0
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_DFSDM_ChannelInit+0x174>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	240000fc 	.word	0x240000fc
 8003794:	240000f8 	.word	0x240000f8
 8003798:	40017000 	.word	0x40017000

0800379c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a20      	ldr	r2, [pc, #128]	; (8003828 <DFSDM_GetChannelFromInstance+0x8c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d102      	bne.n	80037b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e032      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <DFSDM_GetChannelFromInstance+0x90>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d102      	bne.n	80037c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e02b      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <DFSDM_GetChannelFromInstance+0x94>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80037c8:	2302      	movs	r3, #2
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e024      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel3)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <DFSDM_GetChannelFromInstance+0x98>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d102      	bne.n	80037dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80037d6:	2303      	movs	r3, #3
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e01d      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <DFSDM_GetChannelFromInstance+0x9c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d102      	bne.n	80037ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80037e4:	2304      	movs	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e016      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel5)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <DFSDM_GetChannelFromInstance+0xa0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d102      	bne.n	80037f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80037f2:	2305      	movs	r3, #5
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e00f      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel6)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <DFSDM_GetChannelFromInstance+0xa4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d102      	bne.n	8003806 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003800:	2306      	movs	r3, #6
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e008      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if(Instance == DFSDM1_Channel7)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <DFSDM_GetChannelFromInstance+0xa8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d102      	bne.n	8003814 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 800380e:	2307      	movs	r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e001      	b.n	8003818 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else
  {
    channel = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  }
  return channel;
 8003818:	68fb      	ldr	r3, [r7, #12]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40017000 	.word	0x40017000
 800382c:	40017020 	.word	0x40017020
 8003830:	40017040 	.word	0x40017040
 8003834:	40017060 	.word	0x40017060
 8003838:	40017080 	.word	0x40017080
 800383c:	400170a0 	.word	0x400170a0
 8003840:	400170c0 	.word	0x400170c0
 8003844:	400170e0 	.word	0x400170e0

08003848 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0c6      	b.n	80039e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fe9e 	bl	80015a4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2223      	movs	r2, #35	; 0x23
 800386c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386e:	4b60      	ldr	r3, [pc, #384]	; (80039f0 <HAL_ETH_Init+0x1a8>)
 8003870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003874:	4a5e      	ldr	r2, [pc, #376]	; (80039f0 <HAL_ETH_Init+0x1a8>)
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800387e:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <HAL_ETH_Init+0x1a8>)
 8003880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7a1b      	ldrb	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d103      	bne.n	800389c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fe fd7f 	bl	8002398 <HAL_SYSCFG_ETHInterfaceSelect>
 800389a:	e003      	b.n	80038a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800389c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80038a0:	f7fe fd7a 	bl	8002398 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038bc:	f7fe fd32 	bl	8002324 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80038c2:	e00f      	b.n	80038e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80038c4:	f7fe fd2e 	bl	8002324 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038d2:	d907      	bls.n	80038e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2204      	movs	r2, #4
 80038d8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	22e0      	movs	r2, #224	; 0xe0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e081      	b.n	80039e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e6      	bne.n	80038c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fac0 	bl	8003e7c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80038fc:	f002 fb48 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <HAL_ETH_Init+0x1ac>)
 8003904:	fba3 2302 	umull	r2, r3, r3, r2
 8003908:	0c9a      	lsrs	r2, r3, #18
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3a01      	subs	r2, #1
 8003910:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fa13 	bl	8003d40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003930:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003934:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	22e0      	movs	r2, #224	; 0xe0
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e04a      	b.n	80039e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f241 1308 	movw	r3, #4360	; 0x1108
 800395a:	4413      	add	r3, r2
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_ETH_Init+0x1b0>)
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6952      	ldr	r2, [r2, #20]
 8003966:	0052      	lsls	r2, r2, #1
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fad8 	bl	8003f2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb1c 	bl	8003fba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	3305      	adds	r3, #5
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	3303      	adds	r3, #3
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	061a      	lsls	r2, r3, #24
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3302      	adds	r3, #2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	3301      	adds	r3, #1
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2210      	movs	r2, #16
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2210      	movs	r2, #16
 80039e4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	58024400 	.word	0x58024400
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	ffff8001 	.word	0xffff8001

080039fc <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003a0e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	791b      	ldrb	r3, [r3, #4]
 8003a14:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003a16:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	7b1b      	ldrb	r3, [r3, #12]
 8003a1c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003a1e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7b5b      	ldrb	r3, [r3, #13]
 8003a24:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a26:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7b9b      	ldrb	r3, [r3, #14]
 8003a2c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	7bdb      	ldrb	r3, [r3, #15]
 8003a34:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a36:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	7c12      	ldrb	r2, [r2, #16]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d102      	bne.n	8003a46 <ETH_SetMACConfig+0x4a>
 8003a40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a44:	e000      	b.n	8003a48 <ETH_SetMACConfig+0x4c>
 8003a46:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a48:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	7c52      	ldrb	r2, [r2, #17]
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	d102      	bne.n	8003a58 <ETH_SetMACConfig+0x5c>
 8003a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a56:	e000      	b.n	8003a5a <ETH_SetMACConfig+0x5e>
 8003a58:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a5a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	7c9b      	ldrb	r3, [r3, #18]
 8003a60:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a62:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003a68:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003a6e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	7f1b      	ldrb	r3, [r3, #28]
 8003a74:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003a76:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	7f5b      	ldrb	r3, [r3, #29]
 8003a7c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003a7e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	7f92      	ldrb	r2, [r2, #30]
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d102      	bne.n	8003a8e <ETH_SetMACConfig+0x92>
 8003a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a8c:	e000      	b.n	8003a90 <ETH_SetMACConfig+0x94>
 8003a8e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003a90:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	7fdb      	ldrb	r3, [r3, #31]
 8003a96:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003a98:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d102      	bne.n	8003aaa <ETH_SetMACConfig+0xae>
 8003aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aa8:	e000      	b.n	8003aac <ETH_SetMACConfig+0xb0>
 8003aaa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003aac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003ab2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003abc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <ETH_SetMACConfig+0x22c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003ae8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003af0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003af2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003afa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003afc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	d102      	bne.n	8003b0e <ETH_SetMACConfig+0x112>
 8003b08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b0c:	e000      	b.n	8003b10 <ETH_SetMACConfig+0x114>
 8003b0e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003b10:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <ETH_SetMACConfig+0x230>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <ETH_SetMACConfig+0x234>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b5e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d101      	bne.n	8003b6e <ETH_SetMACConfig+0x172>
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	e000      	b.n	8003b70 <ETH_SetMACConfig+0x174>
 8003b6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b70:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003b98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ba0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f023 0103 	bic.w	r1, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003bc6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003be2:	2a00      	cmp	r2, #0
 8003be4:	d101      	bne.n	8003bea <ETH_SetMACConfig+0x1ee>
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	e000      	b.n	8003bec <ETH_SetMACConfig+0x1f0>
 8003bea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003bec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003bf4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003bf6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003bfe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00048083 	.word	0x00048083
 8003c2c:	c0f88000 	.word	0xc0f88000
 8003c30:	fffffef0 	.word	0xfffffef0

08003c34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <ETH_SetDMAConfig+0xf8>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003c5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	791b      	ldrb	r3, [r3, #4]
 8003c60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c66:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	7b1b      	ldrb	r3, [r3, #12]
 8003c6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	f241 0304 	movw	r3, #4100	; 0x1004
 8003c7a:	4413      	add	r3, r2
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <ETH_SetDMAConfig+0xfc>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6811      	ldr	r1, [r2, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	f241 0304 	movw	r3, #4100	; 0x1004
 8003c8e:	440b      	add	r3, r1
 8003c90:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	7b5b      	ldrb	r3, [r3, #13]
 8003c96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <ETH_SetDMAConfig+0x100>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003cba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	7d1b      	ldrb	r3, [r3, #20]
 8003cc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003cc6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	7f5b      	ldrb	r3, [r3, #29]
 8003ccc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f241 1304 	movw	r3, #4356	; 0x1104
 8003cda:	4413      	add	r3, r2
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <ETH_SetDMAConfig+0x104>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	f241 1304 	movw	r3, #4356	; 0x1104
 8003cee:	440b      	add	r3, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	7f1b      	ldrb	r3, [r3, #28]
 8003cf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d08:	4413      	add	r3, r2
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <ETH_SetDMAConfig+0x108>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6811      	ldr	r1, [r2, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d1c:	440b      	add	r3, r1
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	ffff87fd 	.word	0xffff87fd
 8003d30:	ffff2ffe 	.word	0xffff2ffe
 8003d34:	fffec000 	.word	0xfffec000
 8003d38:	ffc0efef 	.word	0xffc0efef
 8003d3c:	7fc0ffff 	.word	0x7fc0ffff

08003d40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0a4      	sub	sp, #144	; 0x90
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003d98:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003d9c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003da4:	2300      	movs	r3, #0
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003dea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003df4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fde6 	bl	80039fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e34:	2301      	movs	r3, #1
 8003e36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003e60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fee1 	bl	8003c34 <ETH_SetDMAConfig>
}
 8003e72:	bf00      	nop
 8003e74:	3790      	adds	r7, #144	; 0x90
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e96:	f002 f87b 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8003e9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d908      	bls.n	8003eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d804      	bhi.n	8003eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e027      	b.n	8003f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d908      	bls.n	8003ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d804      	bhi.n	8003ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e01a      	b.n	8003f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d903      	bls.n	8003ee0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d911      	bls.n	8003f04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d908      	bls.n	8003efa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d804      	bhi.n	8003efa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e005      	b.n	8003f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e000      	b.n	8003f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003f04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	01312cff 	.word	0x01312cff
 8003f1c:	02160ebf 	.word	0x02160ebf
 8003f20:	039386ff 	.word	0x039386ff
 8003f24:	05f5e0ff 	.word	0x05f5e0ff
 8003f28:	08f0d17f 	.word	0x08f0d17f

08003f2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e01d      	b.n	8003f76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	3206      	adds	r2, #6
 8003f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d9de      	bls.n	8003f3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	f241 132c 	movw	r3, #4396	; 0x112c
 8003f8a:	4413      	add	r3, r2
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68d9      	ldr	r1, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f241 1314 	movw	r3, #4372	; 0x1114
 8003f9c:	4413      	add	r3, r2
 8003f9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e024      	b.n	8004012 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6919      	ldr	r1, [r3, #16]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	330a      	adds	r3, #10
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d9d7      	bls.n	8003fc8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f241 1330 	movw	r3, #4400	; 0x1130
 800403e:	4413      	add	r3, r2
 8004040:	2203      	movs	r2, #3
 8004042:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6919      	ldr	r1, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f241 131c 	movw	r3, #4380	; 0x111c
 8004050:	4413      	add	r3, r2
 8004052:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	f241 1328 	movw	r3, #4392	; 0x1128
 8004064:	4413      	add	r3, r2
 8004066:	6019      	str	r1, [r3, #0]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004082:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_GPIO_Init+0x234>)
 8004084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004086:	e194      	b.n	80043b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2101      	movs	r1, #1
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8186 	beq.w	80043ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x3c>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b12      	cmp	r3, #18
 80040ae:	d123      	bne.n	80040f8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	08da      	lsrs	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3208      	adds	r2, #8
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d00b      	beq.n	800414c <HAL_GPIO_Init+0xd8>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d007      	beq.n	800414c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004140:	2b11      	cmp	r3, #17
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b12      	cmp	r3, #18
 800414a:	d130      	bne.n	80041ae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004182:	2201      	movs	r2, #1
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0201 	and.w	r2, r3, #1
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80e0 	beq.w	80043ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ec:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <HAL_GPIO_Init+0x238>)
 80041ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f2:	4a2e      	ldr	r2, [pc, #184]	; (80042ac <HAL_GPIO_Init+0x238>)
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_GPIO_Init+0x238>)
 80041fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <HAL_GPIO_Init+0x23c>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a20      	ldr	r2, [pc, #128]	; (80042b4 <HAL_GPIO_Init+0x240>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d052      	beq.n	80042dc <HAL_GPIO_Init+0x268>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <HAL_GPIO_Init+0x244>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d031      	beq.n	80042a2 <HAL_GPIO_Init+0x22e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <HAL_GPIO_Init+0x248>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x22a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_GPIO_Init+0x24c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x226>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_GPIO_Init+0x250>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x222>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_GPIO_Init+0x254>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x21e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <HAL_GPIO_Init+0x258>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x21a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_GPIO_Init+0x25c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x216>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_GPIO_Init+0x260>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x212>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_GPIO_Init+0x264>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x20e>
 800427e:	2309      	movs	r3, #9
 8004280:	e02d      	b.n	80042de <HAL_GPIO_Init+0x26a>
 8004282:	230a      	movs	r3, #10
 8004284:	e02b      	b.n	80042de <HAL_GPIO_Init+0x26a>
 8004286:	2308      	movs	r3, #8
 8004288:	e029      	b.n	80042de <HAL_GPIO_Init+0x26a>
 800428a:	2307      	movs	r3, #7
 800428c:	e027      	b.n	80042de <HAL_GPIO_Init+0x26a>
 800428e:	2306      	movs	r3, #6
 8004290:	e025      	b.n	80042de <HAL_GPIO_Init+0x26a>
 8004292:	2305      	movs	r3, #5
 8004294:	e023      	b.n	80042de <HAL_GPIO_Init+0x26a>
 8004296:	2304      	movs	r3, #4
 8004298:	e021      	b.n	80042de <HAL_GPIO_Init+0x26a>
 800429a:	2303      	movs	r3, #3
 800429c:	e01f      	b.n	80042de <HAL_GPIO_Init+0x26a>
 800429e:	2302      	movs	r3, #2
 80042a0:	e01d      	b.n	80042de <HAL_GPIO_Init+0x26a>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01b      	b.n	80042de <HAL_GPIO_Init+0x26a>
 80042a6:	bf00      	nop
 80042a8:	58000080 	.word	0x58000080
 80042ac:	58024400 	.word	0x58024400
 80042b0:	58000400 	.word	0x58000400
 80042b4:	58020000 	.word	0x58020000
 80042b8:	58020400 	.word	0x58020400
 80042bc:	58020800 	.word	0x58020800
 80042c0:	58020c00 	.word	0x58020c00
 80042c4:	58021000 	.word	0x58021000
 80042c8:	58021400 	.word	0x58021400
 80042cc:	58021800 	.word	0x58021800
 80042d0:	58021c00 	.word	0x58021c00
 80042d4:	58022000 	.word	0x58022000
 80042d8:	58022400 	.word	0x58022400
 80042dc:	2300      	movs	r3, #0
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	f002 0203 	and.w	r2, r2, #3
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	4093      	lsls	r3, r2
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ee:	4938      	ldr	r1, [pc, #224]	; (80043d0 <HAL_GPIO_Init+0x35c>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f ae63 	bne.w	8004088 <HAL_GPIO_Init+0x14>
  }
}
 80043c2:	bf00      	nop
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	58000400 	.word	0x58000400

080043d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
 80043e0:	4613      	mov	r3, r2
 80043e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e4:	787b      	ldrb	r3, [r7, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043f0:	e003      	b.n	80043fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd f964 	bl	80016fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e006      	b.n	8004490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800448e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d104      	bne.n	80044a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_I2C_Init+0x11c>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	ea42 0103 	orr.w	r1, r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69d9      	ldr	r1, [r3, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	02008000 	.word	0x02008000

08004528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	d138      	bne.n	80045b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004548:	2302      	movs	r3, #2
 800454a:	e032      	b.n	80045b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800457a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d139      	bne.n	8004648 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045de:	2302      	movs	r3, #2
 80045e0:	e033      	b.n	800464a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2224      	movs	r2, #36	; 0x24
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004610:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0bf      	b.n	80047ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd f886 	bl	8001790 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800469a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <HAL_LTDC_Init+0x19c>)
 80046cc:	400b      	ands	r3, r1
 80046ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_LTDC_Init+0x19c>)
 80046fa:	400b      	ands	r3, r1
 80046fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <HAL_LTDC_Init+0x19c>)
 8004728:	400b      	ands	r3, r1
 800472a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6959      	ldr	r1, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <HAL_LTDC_Init+0x19c>)
 8004756:	400b      	ands	r3, r1
 8004758:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6959      	ldr	r1, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0206 	orr.w	r2, r2, #6
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	f000f800 	.word	0xf000f800

080047f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_LTDC_ConfigLayer+0x1a>
 800480e:	2302      	movs	r3, #2
 8004810:	e02c      	b.n	800486c <HAL_LTDC_ConfigLayer+0x74>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2134      	movs	r1, #52	; 0x34
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800483a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800483c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800483e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f811 	bl	8004874 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bdb0      	pop	{r4, r5, r7, pc}

08004874 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	4413      	add	r3, r2
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	4413      	add	r3, r2
 80048a2:	3384      	adds	r3, #132	; 0x84
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4611      	mov	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	01d2      	lsls	r2, r2, #7
 80048b0:	440a      	add	r2, r1
 80048b2:	3284      	adds	r2, #132	; 0x84
 80048b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ca:	4413      	add	r3, r2
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	01db      	lsls	r3, r3, #7
 80048d8:	440b      	add	r3, r1
 80048da:	3384      	adds	r3, #132	; 0x84
 80048dc:	4619      	mov	r1, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	4413      	add	r3, r2
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	01db      	lsls	r3, r3, #7
 8004902:	4413      	add	r3, r2
 8004904:	3384      	adds	r3, #132	; 0x84
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	4611      	mov	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	01d2      	lsls	r2, r2, #7
 8004912:	440a      	add	r2, r1
 8004914:	3284      	adds	r2, #132	; 0x84
 8004916:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800491a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800492a:	4413      	add	r3, r2
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	440b      	add	r3, r1
 800493a:	3384      	adds	r3, #132	; 0x84
 800493c:	4619      	mov	r1, r3
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	01db      	lsls	r3, r3, #7
 800494e:	4413      	add	r3, r2
 8004950:	3384      	adds	r3, #132	; 0x84
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	4611      	mov	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	01d2      	lsls	r2, r2, #7
 800495e:	440a      	add	r2, r1
 8004960:	3284      	adds	r2, #132	; 0x84
 8004962:	f023 0307 	bic.w	r3, r3, #7
 8004966:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	4413      	add	r3, r2
 8004974:	3384      	adds	r3, #132	; 0x84
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	4413      	add	r3, r2
 80049a6:	3384      	adds	r3, #132	; 0x84
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	; 0x84
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049c4:	461a      	mov	r2, r3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	440b      	add	r3, r1
 80049da:	3384      	adds	r3, #132	; 0x84
 80049dc:	4619      	mov	r1, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	4413      	add	r3, r2
 80049f0:	3384      	adds	r3, #132	; 0x84
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	4611      	mov	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	01d2      	lsls	r2, r2, #7
 80049fe:	440a      	add	r2, r1
 8004a00:	3284      	adds	r2, #132	; 0x84
 8004a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	4413      	add	r3, r2
 8004a14:	3384      	adds	r3, #132	; 0x84
 8004a16:	461a      	mov	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	4413      	add	r3, r2
 8004a2a:	3384      	adds	r3, #132	; 0x84
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	440b      	add	r3, r1
 8004a3a:	3384      	adds	r3, #132	; 0x84
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4b58      	ldr	r3, [pc, #352]	; (8004ba0 <LTDC_SetConfig+0x32c>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	6809      	ldr	r1, [r1, #0]
 8004a50:	4608      	mov	r0, r1
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	01c9      	lsls	r1, r1, #7
 8004a56:	4401      	add	r1, r0
 8004a58:	3184      	adds	r1, #132	; 0x84
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	01db      	lsls	r3, r3, #7
 8004a68:	4413      	add	r3, r2
 8004a6a:	3384      	adds	r3, #132	; 0x84
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	01db      	lsls	r3, r3, #7
 8004a78:	4413      	add	r3, r2
 8004a7a:	3384      	adds	r3, #132	; 0x84
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	; 0x84
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e01b      	b.n	8004ade <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e014      	b.n	8004ade <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d00b      	beq.n	8004ad4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d007      	beq.n	8004ad4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d003      	beq.n	8004ad4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ad0:	2b07      	cmp	r3, #7
 8004ad2:	d102      	bne.n	8004ada <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e001      	b.n	8004ade <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	4413      	add	r3, r2
 8004aea:	3384      	adds	r3, #132	; 0x84
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	4611      	mov	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	01d2      	lsls	r2, r2, #7
 8004af8:	440a      	add	r2, r1
 8004afa:	3284      	adds	r2, #132	; 0x84
 8004afc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	041a      	lsls	r2, r3, #16
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1acb      	subs	r3, r1, r3
 8004b18:	69f9      	ldr	r1, [r7, #28]
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	3307      	adds	r3, #7
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	6809      	ldr	r1, [r1, #0]
 8004b24:	4608      	mov	r0, r1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	01c9      	lsls	r1, r1, #7
 8004b2a:	4401      	add	r1, r0
 8004b2c:	3184      	adds	r1, #132	; 0x84
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3384      	adds	r3, #132	; 0x84
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3384      	adds	r3, #132	; 0x84
 8004b50:	4619      	mov	r1, r3
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <LTDC_SetConfig+0x330>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4413      	add	r3, r2
 8004b64:	3384      	adds	r3, #132	; 0x84
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	01db      	lsls	r3, r3, #7
 8004b78:	4413      	add	r3, r2
 8004b7a:	3384      	adds	r3, #132	; 0x84
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	4611      	mov	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	01d2      	lsls	r2, r2, #7
 8004b88:	440a      	add	r2, r1
 8004b8a:	3284      	adds	r2, #132	; 0x84
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6013      	str	r3, [r2, #0]
}
 8004b92:	bf00      	nop
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	fffff8f8 	.word	0xfffff8f8
 8004ba4:	fffff800 	.word	0xfffff800

08004ba8 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e049      	b.n	8004c52 <HAL_NOR_Init+0xaa>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7fd f9ce 	bl	8001f74 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3308      	adds	r3, #8
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f007 f87e 	bl	800bce4 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	f007 f8ee 	bl	800bdd4 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6858      	ldr	r0, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	f007 f935 	bl	800be74 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	f041 0101 	orr.w	r1, r1, #1
 8004c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_NOR_Init+0xb4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e002      	b.n	8004c3c <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_NOR_Init+0xb4>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_NOR_Init+0xb8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <HAL_NOR_Init+0xb8>)
 8004c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c46:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2400011c 	.word	0x2400011c
 8004c60:	52004000 	.word	0x52004000

08004c64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c66:	b08f      	sub	sp, #60	; 0x3c
 8004c68:	af0a      	add	r7, sp, #40	; 0x28
 8004c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e116      	b.n	8004ea4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc ffc3 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f007 ff3f 	bl	800cb38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	687e      	ldr	r6, [r7, #4]
 8004cc2:	466d      	mov	r5, sp
 8004cc4:	f106 0410 	add.w	r4, r6, #16
 8004cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cd8:	1d33      	adds	r3, r6, #4
 8004cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cdc:	6838      	ldr	r0, [r7, #0]
 8004cde:	f007 fec9 	bl	800ca74 <USB_CoreInit>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0d7      	b.n	8004ea4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f007 ff2d 	bl	800cb5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	e04a      	b.n	8004d9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	333d      	adds	r3, #61	; 0x3d
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	333c      	adds	r3, #60	; 0x3c
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	b298      	uxth	r0, r3
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3342      	adds	r3, #66	; 0x42
 8004d42:	4602      	mov	r2, r0
 8004d44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	333f      	adds	r3, #63	; 0x3f
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3344      	adds	r3, #68	; 0x44
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3348      	adds	r3, #72	; 0x48
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3350      	adds	r3, #80	; 0x50
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d3af      	bcc.n	8004d06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e044      	b.n	8004e36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dac:	7bfa      	ldrb	r2, [r7, #15]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004dd4:	7bfa      	ldrb	r2, [r7, #15]
 8004dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e04:	7bfa      	ldrb	r2, [r7, #15]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	3301      	adds	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3b5      	bcc.n	8004dac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	687e      	ldr	r6, [r7, #4]
 8004e48:	466d      	mov	r5, sp
 8004e4a:	f106 0410 	add.w	r4, r6, #16
 8004e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e5e:	1d33      	adds	r3, r6, #4
 8004e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e62:	6838      	ldr	r0, [r7, #0]
 8004e64:	f007 fea4 	bl	800cbb0 <USB_DevInit>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e014      	b.n	8004ea4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f80a 	bl	8004eac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f008 f854 	bl	800cf4a <USB_DevDisconnect>

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	10000003 	.word	0x10000003

08004ef4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8004efc:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_PWREx_ConfigSupply+0x6c>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d008      	beq.n	8004f1a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_PWREx_ConfigSupply+0x6c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e01d      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_PWREx_ConfigSupply+0x6c>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	490f      	ldr	r1, [pc, #60]	; (8004f60 <HAL_PWREx_ConfigSupply+0x6c>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f2a:	f7fd f9fb 	bl	8002324 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004f30:	e009      	b.n	8004f46 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004f32:	f7fd f9f7 	bl	8002324 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f40:	d901      	bls.n	8004f46 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e007      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_PWREx_ConfigSupply+0x6c>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d1ee      	bne.n	8004f32 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	58024800 	.word	0x58024800

08004f64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	58024800 	.word	0x58024800

08004f84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi: QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f8c:	f7fd f9ca 	bl	8002324 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e073      	b.n	8005084 <HAL_QSPI_Init+0x100>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_QSPI_Init+0x28>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e06b      	b.n	8005084 <HAL_QSPI_Init+0x100>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fc fc6f 	bl	80018ac <HAL_QSPI_MspInit>
#endif
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004fce:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f85e 	bl	8005094 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	021a      	lsls	r2, r3, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f856 	bl	80050b0 <QSPI_WaitFlagStateUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d135      	bne.n	800507a <HAL_QSPI_Init+0xf6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <HAL_QSPI_Init+0x108>)
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	0611      	lsls	r1, r2, #24
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68d2      	ldr	r2, [r2, #12]
 8005022:	4311      	orrs	r1, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	69d2      	ldr	r2, [r2, #28]
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a12      	ldr	r2, [r2, #32]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	430b      	orrs	r3, r1
 8005036:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <HAL_QSPI_Init+0x10c>)
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6912      	ldr	r2, [r2, #16]
 8005046:	0411      	lsls	r1, r2, #16
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6952      	ldr	r2, [r2, #20]
 800504c:	4311      	orrs	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6992      	ldr	r2, [r2, #24]
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	430b      	orrs	r3, r1
 800505a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005082:	7afb      	ldrb	r3, [r7, #11]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	00ffff2f 	.word	0x00ffff2f
 8005090:	ffe0f8fe 	.word	0xffe0f8fe

08005094 <HAL_QSPI_SetTimeout>:
  * @param  hqspi: QSPI handle.
  * @param  Timeout: Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050c0:	e01a      	b.n	80050f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d016      	beq.n	80050f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fd f92b 	bl	8002324 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2204      	movs	r2, #4
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e00e      	b.n	8005116 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d1d6      	bne.n	80050c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e3a4      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8087 	beq.w	800524e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005140:	4b9a      	ldr	r3, [pc, #616]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800514a:	4b98      	ldr	r3, [pc, #608]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	2b10      	cmp	r3, #16
 8005154:	d007      	beq.n	8005166 <HAL_RCC_OscConfig+0x46>
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	2b18      	cmp	r3, #24
 800515a:	d110      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d10b      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005166:	4b91      	ldr	r3, [pc, #580]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d06c      	beq.n	800524c <HAL_RCC_OscConfig+0x12c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d168      	bne.n	800524c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e37e      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x76>
 8005188:	4b88      	ldr	r3, [pc, #544]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a87      	ldr	r2, [pc, #540]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e02e      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x98>
 800519e:	4b83      	ldr	r3, [pc, #524]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a82      	ldr	r2, [pc, #520]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b80      	ldr	r3, [pc, #512]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7f      	ldr	r2, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e01d      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0xbc>
 80051c2:	4b7a      	ldr	r3, [pc, #488]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a79      	ldr	r2, [pc, #484]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b77      	ldr	r3, [pc, #476]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a76      	ldr	r2, [pc, #472]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051dc:	4b73      	ldr	r3, [pc, #460]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a72      	ldr	r2, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b70      	ldr	r3, [pc, #448]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6f      	ldr	r2, [pc, #444]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80051ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fd f892 	bl	8002324 <HAL_GetTick>
 8005200:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005204:	f7fd f88e 	bl	8002324 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e332      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005216:	4b65      	ldr	r3, [pc, #404]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0xe4>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fd f87e 	bl	8002324 <HAL_GetTick>
 8005228:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800522c:	f7fd f87a 	bl	8002324 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e31e      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800523e:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x10c>
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80b0 	beq.w	80053bc <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525c:	4b53      	ldr	r3, [pc, #332]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005264:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005266:	4b51      	ldr	r3, [pc, #324]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_RCC_OscConfig+0x162>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b18      	cmp	r3, #24
 8005276:	d149      	bne.n	800530c <HAL_RCC_OscConfig+0x1ec>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d144      	bne.n	800530c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005282:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_RCC_OscConfig+0x17a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e2f0      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800529a:	4b44      	ldr	r3, [pc, #272]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f023 0219 	bic.w	r2, r3, #25
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	4941      	ldr	r1, [pc, #260]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fd f83a 	bl	8002324 <HAL_GetTick>
 80052b0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7fd f836 	bl	8002324 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e2da      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c6:	4b39      	ldr	r3, [pc, #228]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	f7fd f855 	bl	8002380 <HAL_GetREVID>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80052dc:	429a      	cmp	r2, r3
 80052de:	d80a      	bhi.n	80052f6 <HAL_RCC_OscConfig+0x1d6>
 80052e0:	4b32      	ldr	r3, [pc, #200]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	492f      	ldr	r1, [pc, #188]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	e062      	b.n	80053bc <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	4929      	ldr	r1, [pc, #164]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530a:	e057      	b.n	80053bc <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d038      	beq.n	8005386 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005314:	4b25      	ldr	r3, [pc, #148]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f023 0219 	bic.w	r2, r3, #25
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4922      	ldr	r1, [pc, #136]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fc fffd 	bl	8002324 <HAL_GetTick>
 800532a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532e:	f7fc fff9 	bl	8002324 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e29d      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	f7fd f818 	bl	8002380 <HAL_GetREVID>
 8005350:	4602      	mov	r2, r0
 8005352:	f241 0303 	movw	r3, #4099	; 0x1003
 8005356:	429a      	cmp	r2, r3
 8005358:	d80a      	bhi.n	8005370 <HAL_RCC_OscConfig+0x250>
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	4910      	ldr	r1, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
 800536e:	e025      	b.n	80053bc <HAL_RCC_OscConfig+0x29c>
 8005370:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	061b      	lsls	r3, r3, #24
 800537e:	490b      	ldr	r1, [pc, #44]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	e01a      	b.n	80053bc <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <HAL_RCC_OscConfig+0x28c>)
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fc ffc7 	bl	8002324 <HAL_GetTick>
 8005396:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005398:	e00a      	b.n	80053b0 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539a:	f7fc ffc3 	bl	8002324 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d903      	bls.n	80053b0 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e267      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
 80053ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b0:	4ba0      	ldr	r3, [pc, #640]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ee      	bne.n	800539a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 808f 	beq.w	80054e8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ca:	4b9a      	ldr	r3, [pc, #616]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d2:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053d4:	4b97      	ldr	r3, [pc, #604]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d007      	beq.n	80053f0 <HAL_RCC_OscConfig+0x2d0>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b18      	cmp	r3, #24
 80053e4:	d12d      	bne.n	8005442 <HAL_RCC_OscConfig+0x322>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d128      	bne.n	8005442 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f0:	4b90      	ldr	r3, [pc, #576]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x2e8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e239      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005408:	f7fc ffba 	bl	8002380 <HAL_GetREVID>
 800540c:	4602      	mov	r2, r0
 800540e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005412:	429a      	cmp	r2, r3
 8005414:	d80a      	bhi.n	800542c <HAL_RCC_OscConfig+0x30c>
 8005416:	4b87      	ldr	r3, [pc, #540]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	069b      	lsls	r3, r3, #26
 8005424:	4983      	ldr	r1, [pc, #524]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800542a:	e05d      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800542c:	4b81      	ldr	r3, [pc, #516]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	497e      	ldr	r1, [pc, #504]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005440:	e052      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d035      	beq.n	80054b6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800544a:	4b7a      	ldr	r3, [pc, #488]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a79      	ldr	r2, [pc, #484]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fc ff65 	bl	8002324 <HAL_GetTick>
 800545a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800545e:	f7fc ff61 	bl	8002324 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e205      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005470:	4b70      	ldr	r3, [pc, #448]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f0      	beq.n	800545e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800547c:	f7fc ff80 	bl	8002380 <HAL_GetREVID>
 8005480:	4602      	mov	r2, r0
 8005482:	f241 0303 	movw	r3, #4099	; 0x1003
 8005486:	429a      	cmp	r2, r3
 8005488:	d80a      	bhi.n	80054a0 <HAL_RCC_OscConfig+0x380>
 800548a:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	069b      	lsls	r3, r3, #26
 8005498:	4966      	ldr	r1, [pc, #408]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
 800549e:	e023      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c8>
 80054a0:	4b64      	ldr	r3, [pc, #400]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	4961      	ldr	r1, [pc, #388]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60cb      	str	r3, [r1, #12]
 80054b4:	e018      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054b6:	4b5f      	ldr	r3, [pc, #380]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5e      	ldr	r2, [pc, #376]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc ff2f 	bl	8002324 <HAL_GetTick>
 80054c6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054ca:	f7fc ff2b 	bl	8002324 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1cf      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054dc:	4b55      	ldr	r3, [pc, #340]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d036      	beq.n	8005562 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fc:	4b4d      	ldr	r3, [pc, #308]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	4a4c      	ldr	r2, [pc, #304]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc ff0c 	bl	8002324 <HAL_GetTick>
 800550c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005510:	f7fc ff08 	bl	8002324 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e1ac      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005522:	4b44      	ldr	r3, [pc, #272]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x3f0>
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b40      	ldr	r3, [pc, #256]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc fef2 	bl	8002324 <HAL_GetTick>
 8005540:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005544:	f7fc feee 	bl	8002324 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e192      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005556:	4b37      	ldr	r3, [pc, #220]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d036      	beq.n	80055dc <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005576:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800557c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005580:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005582:	f7fc fecf 	bl	8002324 <HAL_GetTick>
 8005586:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800558a:	f7fc fecb 	bl	8002324 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e16f      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x46a>
 80055a8:	e018      	b.n	80055dc <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055aa:	4b22      	ldr	r3, [pc, #136]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b6:	f7fc feb5 	bl	8002324 <HAL_GetTick>
 80055ba:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055be:	f7fc feb1 	bl	8002324 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e155      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8086 	beq.w	80056f6 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0x518>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a12      	ldr	r2, [pc, #72]	; (8005638 <HAL_RCC_OscConfig+0x518>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f6:	f7fc fe95 	bl	8002324 <HAL_GetTick>
 80055fa:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fc fe91 	bl	8002324 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	; 0x64
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e135      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0x518>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10b      	bne.n	800563c <HAL_RCC_OscConfig+0x51c>
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a02      	ldr	r2, [pc, #8]	; (8005634 <HAL_RCC_OscConfig+0x514>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	e032      	b.n	8005698 <HAL_RCC_OscConfig+0x578>
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	58024800 	.word	0x58024800
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10c      	bne.n	800565e <HAL_RCC_OscConfig+0x53e>
 8005644:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a8e      	ldr	r2, [pc, #568]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	4b8c      	ldr	r3, [pc, #560]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a8b      	ldr	r2, [pc, #556]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
 800565c:	e01c      	b.n	8005698 <HAL_RCC_OscConfig+0x578>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b05      	cmp	r3, #5
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0x560>
 8005666:	4b87      	ldr	r3, [pc, #540]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a86      	ldr	r2, [pc, #536]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
 8005672:	4b84      	ldr	r3, [pc, #528]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a83      	ldr	r2, [pc, #524]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	e00b      	b.n	8005698 <HAL_RCC_OscConfig+0x578>
 8005680:	4b80      	ldr	r3, [pc, #512]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a7f      	ldr	r2, [pc, #508]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
 800568c:	4b7d      	ldr	r3, [pc, #500]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a7c      	ldr	r2, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005692:	f023 0304 	bic.w	r3, r3, #4
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d015      	beq.n	80056cc <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fc fe40 	bl	8002324 <HAL_GetTick>
 80056a4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fc fe3c 	bl	8002324 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0de      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056be:	4b71      	ldr	r3, [pc, #452]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0ee      	beq.n	80056a8 <HAL_RCC_OscConfig+0x588>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056cc:	f7fc fe2a 	bl	8002324 <HAL_GetTick>
 80056d0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d4:	f7fc fe26 	bl	8002324 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e0c8      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056ea:	4b66      	ldr	r3, [pc, #408]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1ee      	bne.n	80056d4 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80bd 	beq.w	800587a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005700:	4b60      	ldr	r3, [pc, #384]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005708:	2b18      	cmp	r3, #24
 800570a:	f000 80b4 	beq.w	8005876 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b02      	cmp	r3, #2
 8005714:	f040 8095 	bne.w	8005842 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a59      	ldr	r2, [pc, #356]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fc fdfe 	bl	8002324 <HAL_GetTick>
 8005728:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572c:	f7fc fdfa 	bl	8002324 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e09e      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573e:	4b51      	ldr	r3, [pc, #324]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800574c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574e:	4b4e      	ldr	r3, [pc, #312]	; (8005888 <HAL_RCC_OscConfig+0x768>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800575a:	0112      	lsls	r2, r2, #4
 800575c:	430a      	orrs	r2, r1
 800575e:	4949      	ldr	r1, [pc, #292]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005760:	4313      	orrs	r3, r2
 8005762:	628b      	str	r3, [r1, #40]	; 0x28
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	3b01      	subs	r3, #1
 800576a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	3b01      	subs	r3, #1
 8005774:	025b      	lsls	r3, r3, #9
 8005776:	b29b      	uxth	r3, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	3b01      	subs	r3, #1
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	3b01      	subs	r3, #1
 800578e:	061b      	lsls	r3, r3, #24
 8005790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005794:	493b      	ldr	r1, [pc, #236]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005796:	4313      	orrs	r3, r2
 8005798:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800579a:	4b3a      	ldr	r3, [pc, #232]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	4a39      	ldr	r2, [pc, #228]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057aa:	4b38      	ldr	r3, [pc, #224]	; (800588c <HAL_RCC_OscConfig+0x76c>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	4933      	ldr	r1, [pc, #204]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057ba:	4b32      	ldr	r3, [pc, #200]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	f023 020c 	bic.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	492f      	ldr	r1, [pc, #188]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f023 0202 	bic.w	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	492a      	ldr	r1, [pc, #168]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a28      	ldr	r2, [pc, #160]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ea:	4b26      	ldr	r3, [pc, #152]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	4a25      	ldr	r2, [pc, #148]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	4a22      	ldr	r2, [pc, #136]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005802:	4b20      	ldr	r3, [pc, #128]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800580e:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fc fd83 	bl	8002324 <HAL_GetTick>
 800581e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc fd7f 	bl	8002324 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e023      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x702>
 8005840:	e01b      	b.n	800587a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 8005848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc fd69 	bl	8002324 <HAL_GetTick>
 8005852:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005856:	f7fc fd65 	bl	8002324 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e009      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_OscConfig+0x764>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f0      	bne.n	8005856 <HAL_RCC_OscConfig+0x736>
 8005874:	e001      	b.n	800587a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	fffffc0c 	.word	0xfffffc0c
 800588c:	ffff0007 	.word	0xffff0007

08005890 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e18d      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b8a      	ldr	r3, [pc, #552]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d910      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b87      	ldr	r3, [pc, #540]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 020f 	bic.w	r2, r3, #15
 80058ba:	4985      	ldr	r1, [pc, #532]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b83      	ldr	r3, [pc, #524]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e175      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	4b7b      	ldr	r3, [pc, #492]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d908      	bls.n	8005902 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058f0:	4b78      	ldr	r3, [pc, #480]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	4975      	ldr	r1, [pc, #468]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	4b70      	ldr	r3, [pc, #448]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800591a:	429a      	cmp	r2, r3
 800591c:	d908      	bls.n	8005930 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	496a      	ldr	r1, [pc, #424]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 800592c:	4313      	orrs	r3, r2
 800592e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005948:	429a      	cmp	r2, r3
 800594a:	d908      	bls.n	800595e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800594c:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	495e      	ldr	r1, [pc, #376]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 800595a:	4313      	orrs	r3, r2
 800595c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005976:	429a      	cmp	r2, r3
 8005978:	d908      	bls.n	800598c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800597a:	4b56      	ldr	r3, [pc, #344]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4953      	ldr	r1, [pc, #332]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005988:	4313      	orrs	r3, r2
 800598a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d010      	beq.n	80059ba <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d908      	bls.n	80059ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a8:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f023 020f 	bic.w	r2, r3, #15
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4947      	ldr	r1, [pc, #284]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d055      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059c6:	4b43      	ldr	r3, [pc, #268]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4940      	ldr	r1, [pc, #256]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059e0:	4b3c      	ldr	r3, [pc, #240]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d121      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0e7      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f8:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d115      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0db      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a10:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0cf      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a20:	4b2c      	ldr	r3, [pc, #176]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0c7      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f023 0207 	bic.w	r2, r3, #7
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4925      	ldr	r1, [pc, #148]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fc fc6f 	bl	8002324 <HAL_GetTick>
 8005a46:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a48:	e00a      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4a:	f7fc fc6b 	bl	8002324 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0af      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a60:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d1eb      	bne.n	8005a4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d208      	bcs.n	8005aa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8e:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f023 020f 	bic.w	r2, r3, #15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	490e      	ldr	r1, [pc, #56]	; (8005ad4 <HAL_RCC_ClockConfig+0x244>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d214      	bcs.n	8005ad8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 020f 	bic.w	r2, r3, #15
 8005ab6:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <HAL_RCC_ClockConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e077      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x330>
 8005ad0:	52002000 	.word	0x52002000
 8005ad4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d208      	bcs.n	8005b06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	4931      	ldr	r1, [pc, #196]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d208      	bcs.n	8005b34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b22:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4926      	ldr	r1, [pc, #152]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d208      	bcs.n	8005b62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	491a      	ldr	r1, [pc, #104]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d208      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	490f      	ldr	r1, [pc, #60]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b90:	f000 f88c 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005b94:	4601      	mov	r1, r0
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <HAL_RCC_ClockConfig+0x338>)
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <HAL_RCC_ClockConfig+0x33c>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <HAL_RCC_ClockConfig+0x340>)
 8005bae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <HAL_RCC_ClockConfig+0x344>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fc fb6b 	bl	8002290 <HAL_InitTick>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	0800d064 	.word	0x0800d064
 8005bd0:	24000000 	.word	0x24000000
 8005bd4:	24000008 	.word	0x24000008

08005bd8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08c      	sub	sp, #48	; 0x30
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d12a      	bne.n	8005c40 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bfa:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c12:	2303      	movs	r3, #3
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005c1e:	f107 031c 	add.w	r3, r7, #28
 8005c22:	4619      	mov	r1, r3
 8005c24:	481f      	ldr	r0, [pc, #124]	; (8005ca4 <HAL_RCC_MCOConfig+0xcc>)
 8005c26:	f7fe fa25 	bl	8004074 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	430b      	orrs	r3, r1
 8005c38:	4919      	ldr	r1, [pc, #100]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005c3e:	e02a      	b.n	8005c96 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005c40:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c64:	2302      	movs	r3, #2
 8005c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c70:	2300      	movs	r3, #0
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c74:	f107 031c 	add.w	r3, r7, #28
 8005c78:	4619      	mov	r1, r3
 8005c7a:	480b      	ldr	r0, [pc, #44]	; (8005ca8 <HAL_RCC_MCOConfig+0xd0>)
 8005c7c:	f7fe f9fa 	bl	8004074 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	01d9      	lsls	r1, r3, #7
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCC_MCOConfig+0xc8>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	610b      	str	r3, [r1, #16]
}
 8005c96:	bf00      	nop
 8005c98:	3730      	adds	r7, #48	; 0x30
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	58020000 	.word	0x58020000
 8005ca8:	58020800 	.word	0x58020800

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb2:	4baf      	ldr	r3, [pc, #700]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cba:	2b18      	cmp	r3, #24
 8005cbc:	f200 814e 	bhi.w	8005f5c <HAL_RCC_GetSysClockFreq+0x2b0>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005f5d 	.word	0x08005f5d
 8005cd0:	08005f5d 	.word	0x08005f5d
 8005cd4:	08005f5d 	.word	0x08005f5d
 8005cd8:	08005f5d 	.word	0x08005f5d
 8005cdc:	08005f5d 	.word	0x08005f5d
 8005ce0:	08005f5d 	.word	0x08005f5d
 8005ce4:	08005f5d 	.word	0x08005f5d
 8005ce8:	08005d53 	.word	0x08005d53
 8005cec:	08005f5d 	.word	0x08005f5d
 8005cf0:	08005f5d 	.word	0x08005f5d
 8005cf4:	08005f5d 	.word	0x08005f5d
 8005cf8:	08005f5d 	.word	0x08005f5d
 8005cfc:	08005f5d 	.word	0x08005f5d
 8005d00:	08005f5d 	.word	0x08005f5d
 8005d04:	08005f5d 	.word	0x08005f5d
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005f5d 	.word	0x08005f5d
 8005d10:	08005f5d 	.word	0x08005f5d
 8005d14:	08005f5d 	.word	0x08005f5d
 8005d18:	08005f5d 	.word	0x08005f5d
 8005d1c:	08005f5d 	.word	0x08005f5d
 8005d20:	08005f5d 	.word	0x08005f5d
 8005d24:	08005f5d 	.word	0x08005f5d
 8005d28:	08005d5f 	.word	0x08005d5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d2c:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d38:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	4a8c      	ldr	r2, [pc, #560]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
 8005d48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d4a:	e10a      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d4c:	4b89      	ldr	r3, [pc, #548]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d4e:	61bb      	str	r3, [r7, #24]
    break;
 8005d50:	e107      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d52:	4b89      	ldr	r3, [pc, #548]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005d54:	61bb      	str	r3, [r7, #24]
    break;
 8005d56:	e104      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005d5a:	61bb      	str	r3, [r7, #24]
    break;
 8005d5c:	e101      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d5e:	4b84      	ldr	r3, [pc, #528]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d68:	4b81      	ldr	r3, [pc, #516]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d74:	4b7e      	ldr	r3, [pc, #504]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d7e:	4b7c      	ldr	r3, [pc, #496]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	08db      	lsrs	r3, r3, #3
 8005d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80da 	beq.w	8005f56 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d05a      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0x1b2>
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d302      	bcc.n	8005db2 <HAL_RCC_GetSysClockFreq+0x106>
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d078      	beq.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005db0:	e099      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db2:	4b6f      	ldr	r3, [pc, #444]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02d      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dbe:	4b6c      	ldr	r3, [pc, #432]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	4a6a      	ldr	r2, [pc, #424]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e18:	e087      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f84 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	4b50      	ldr	r3, [pc, #320]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e40:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e5c:	e065      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f88 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e84:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea0:	e043      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f8c <HAL_RCC_GetSysClockFreq+0x2e0>
 8005eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb4:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee4:	e021      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f88 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f08:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f28:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f2a:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	3301      	adds	r3, #1
 8005f36:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4e:	ee17 3a90 	vmov	r3, s15
 8005f52:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f54:	e005      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
    break;
 8005f5a:	e002      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f5e:	61bb      	str	r3, [r7, #24]
    break;
 8005f60:	bf00      	nop
  }

  return sysclockfreq;
 8005f62:	69bb      	ldr	r3, [r7, #24]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3724      	adds	r7, #36	; 0x24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	58024400 	.word	0x58024400
 8005f74:	03d09000 	.word	0x03d09000
 8005f78:	003d0900 	.word	0x003d0900
 8005f7c:	017d7840 	.word	0x017d7840
 8005f80:	46000000 	.word	0x46000000
 8005f84:	4c742400 	.word	0x4c742400
 8005f88:	4a742400 	.word	0x4a742400
 8005f8c:	4bbebc20 	.word	0x4bbebc20

08005f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f94:	f001 fd64 	bl	8007a60 <HAL_RCCEx_GetD1SysClockFreq>
 8005f98:	4601      	mov	r1, r0
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x2c>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005fa4:	5cd3      	ldrb	r3, [r2, r3]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	fa21 f303 	lsr.w	r3, r1, r3
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005fb0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	0800d064 	.word	0x0800d064
 8005fc4:	24000004 	.word	0x24000004

08005fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fcc:	f7ff ffe0 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4601      	mov	r1, r0
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	0800d064 	.word	0x0800d064

08005ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ff8:	f7ff ffca 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <HAL_RCC_GetPCLK2Freq+0x28>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	58024400 	.word	0x58024400
 800601c:	0800d064 	.word	0x0800d064

08006020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800602c:	2300      	movs	r3, #0
 800602e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006044:	d013      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d802      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006050:	e01f      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006056:	d013      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800605c:	d01c      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800605e:	e018      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4baf      	ldr	r3, [pc, #700]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	4aae      	ldr	r2, [pc, #696]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800606c:	e015      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fd0f 	bl	8007a98 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800607e:	e00c      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3324      	adds	r3, #36	; 0x24
 8006084:	2102      	movs	r1, #2
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fdb8 	bl	8007bfc <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006090:	e003      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060a0:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ac:	499c      	ldr	r1, [pc, #624]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	650b      	str	r3, [r1, #80]	; 0x50
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d03d      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d826      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e9 	.word	0x080060e9
 80060d8:	080060f7 	.word	0x080060f7
 80060dc:	08006109 	.word	0x08006109
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e8:	4b8d      	ldr	r3, [pc, #564]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a8c      	ldr	r2, [pc, #560]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060f4:	e015      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3304      	adds	r3, #4
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fccb 	bl	8007a98 <RCCEx_PLL2_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006106:	e00c      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fd74 	bl	8007bfc <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006118:	e003      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006128:	4b7d      	ldr	r3, [pc, #500]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	f023 0207 	bic.w	r2, r3, #7
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	497a      	ldr	r1, [pc, #488]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006136:	4313      	orrs	r3, r2
 8006138:	650b      	str	r3, [r1, #80]	; 0x50
 800613a:	e001      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03e      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d01c      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d804      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d00d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006160:	e01e      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006162:	2bc0      	cmp	r3, #192	; 0xc0
 8006164:	d01f      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616a:	d01e      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800616c:	e018      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616e:	4b6c      	ldr	r3, [pc, #432]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	4a6b      	ldr	r2, [pc, #428]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800617a:	e017      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fc88 	bl	8007a98 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800618c:	e00e      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3324      	adds	r3, #36	; 0x24
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fd31 	bl	8007bfc <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800619e:	e005      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	75fb      	strb	r3, [r7, #23]
      break;
 80061a4:	e002      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061b2:	4b5b      	ldr	r3, [pc, #364]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	4958      	ldr	r1, [pc, #352]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	650b      	str	r3, [r1, #80]	; 0x50
 80061c4:	e001      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d044      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e0:	d01f      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80061e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e6:	d805      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f0:	d00e      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80061f2:	e01f      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80061f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061f8:	d01f      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80061fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061fe:	d01e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006200:	e018      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006202:	4b47      	ldr	r3, [pc, #284]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a46      	ldr	r2, [pc, #280]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800620e:	e017      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	2100      	movs	r1, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fc3e 	bl	8007a98 <RCCEx_PLL2_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006220:	e00e      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3324      	adds	r3, #36	; 0x24
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fce7 	bl	8007bfc <RCCEx_PLL3_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006232:	e005      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	75fb      	strb	r3, [r7, #23]
      break;
 8006238:	e002      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800623a:	bf00      	nop
 800623c:	e000      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800623e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006246:	4b36      	ldr	r3, [pc, #216]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006254:	4932      	ldr	r1, [pc, #200]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006256:	4313      	orrs	r3, r2
 8006258:	658b      	str	r3, [r1, #88]	; 0x58
 800625a:	e001      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006268:	2b00      	cmp	r3, #0
 800626a:	d044      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006276:	d01f      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627c:	d805      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006286:	d00e      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006288:	e01f      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800628a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800628e:	d01f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006294:	d01e      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006296:	e018      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006298:	4b21      	ldr	r3, [pc, #132]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800629e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a4:	e017      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fbf3 	bl	8007a98 <RCCEx_PLL2_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062b6:	e00e      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fc9c 	bl	8007bfc <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	75fb      	strb	r3, [r7, #23]
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062ea:	490d      	ldr	r1, [pc, #52]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	658b      	str	r3, [r1, #88]	; 0x58
 80062f0:	e001      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d035      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	2b10      	cmp	r3, #16
 8006308:	d00c      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800630a:	2b10      	cmp	r3, #16
 800630c:	d802      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01b      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006312:	e017      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d00c      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d018      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800631c:	e012      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4baf      	ldr	r3, [pc, #700]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4aae      	ldr	r2, [pc, #696]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006330:	e00e      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fbad 	bl	8007a98 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006342:	e005      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800634e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d109      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006356:	4ba3      	ldr	r3, [pc, #652]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	49a0      	ldr	r1, [pc, #640]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006364:	4313      	orrs	r3, r2
 8006366:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006368:	e001      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d042      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006382:	d01f      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d805      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800638e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006392:	d00e      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006394:	e01f      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639a:	d01f      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800639c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a0:	d01e      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80063a2:	e018      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a4:	4b8f      	ldr	r3, [pc, #572]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a8e      	ldr	r2, [pc, #568]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063b0:	e017      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 fb6d 	bl	8007a98 <RCCEx_PLL2_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063c2:	e00e      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fc16 	bl	8007bfc <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063d4:	e005      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
      break;
 80063da:	e002      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063dc:	bf00      	nop
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063e8:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f4:	497b      	ldr	r1, [pc, #492]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	650b      	str	r3, [r1, #80]	; 0x50
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d042      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006414:	d01b      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641a:	d805      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d022      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006426:	e01b      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800642c:	d01d      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800642e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006432:	d01c      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006438:	d01b      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800643a:	e011      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	2101      	movs	r1, #1
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fb28 	bl	8007a98 <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800644c:	e012      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fbd1 	bl	8007bfc <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800645e:	e009      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e006      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006466:	bf00      	nop
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800647a:	4b5a      	ldr	r3, [pc, #360]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006486:	4957      	ldr	r1, [pc, #348]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006488:	4313      	orrs	r3, r2
 800648a:	650b      	str	r3, [r1, #80]	; 0x50
 800648c:	e001      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d044      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a8:	d01b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ae:	d805      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d022      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80064ba:	e01b      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80064bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c0:	d01d      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c6:	d01c      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80064c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064cc:	d01b      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fade 	bl	8007a98 <RCCEx_PLL2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064e0:	e012      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3324      	adds	r3, #36	; 0x24
 80064e6:	2101      	movs	r1, #1
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fb87 	bl	8007bfc <RCCEx_PLL3_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064f2:	e009      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
      break;
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064fa:	bf00      	nop
 80064fc:	e004      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800650e:	4b35      	ldr	r3, [pc, #212]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006512:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800651c:	4931      	ldr	r1, [pc, #196]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	658b      	str	r3, [r1, #88]	; 0x58
 8006522:	e001      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02d      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800653c:	d005      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d009      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d013      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006548:	e00f      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654a:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006556:	e00c      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fa9a 	bl	8007a98 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
      break;
 800656e:	e000      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	4917      	ldr	r1, [pc, #92]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006586:	4313      	orrs	r3, r2
 8006588:	650b      	str	r3, [r1, #80]	; 0x50
 800658a:	e001      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d035      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d81b      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065e9 	.word	0x080065e9
 80065b0:	080065bd 	.word	0x080065bd
 80065b4:	080065cb 	.word	0x080065cb
 80065b8:	080065e9 	.word	0x080065e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065c8:	e00f      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3304      	adds	r3, #4
 80065ce:	2102      	movs	r1, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 fa61 	bl	8007a98 <RCCEx_PLL2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065da:	e006      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
      break;
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80065e2:	bf00      	nop
 80065e4:	58024400 	.word	0x58024400
      break;
 80065e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065f0:	4bba      	ldr	r3, [pc, #744]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f4:	f023 0203 	bic.w	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	49b7      	ldr	r1, [pc, #732]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006602:	e001      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8086 	beq.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006616:	4bb2      	ldr	r3, [pc, #712]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4ab1      	ldr	r2, [pc, #708]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006620:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006622:	f7fb fe7f 	bl	8002324 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006628:	e009      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662a:	f7fb fe7b 	bl	8002324 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b64      	cmp	r3, #100	; 0x64
 8006636:	d902      	bls.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	75fb      	strb	r3, [r7, #23]
        break;
 800663c:	e005      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800663e:	4ba8      	ldr	r3, [pc, #672]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0ef      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d166      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006650:	4ba2      	ldr	r3, [pc, #648]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800665a:	4053      	eors	r3, r2
 800665c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006664:	4b9d      	ldr	r3, [pc, #628]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800666e:	4b9b      	ldr	r3, [pc, #620]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	4a9a      	ldr	r2, [pc, #616]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006678:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800667a:	4b98      	ldr	r3, [pc, #608]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	4a97      	ldr	r2, [pc, #604]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006684:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006686:	4a95      	ldr	r2, [pc, #596]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006696:	d115      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fb fe44 	bl	8002324 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800669e:	e00b      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a0:	f7fb fe40 	bl	8002324 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d902      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	75fb      	strb	r3, [r7, #23]
            break;
 80066b6:	e005      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b8:	4b88      	ldr	r3, [pc, #544]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0ed      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d126      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80066da:	4b80      	ldr	r3, [pc, #512]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066e8:	0919      	lsrs	r1, r3, #4
 80066ea:	4b7e      	ldr	r3, [pc, #504]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80066ec:	400b      	ands	r3, r1
 80066ee:	497b      	ldr	r1, [pc, #492]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	610b      	str	r3, [r1, #16]
 80066f4:	e005      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80066f6:	4b79      	ldr	r3, [pc, #484]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	4a78      	ldr	r2, [pc, #480]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006700:	6113      	str	r3, [r2, #16]
 8006702:	4b76      	ldr	r3, [pc, #472]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800670c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006710:	4972      	ldr	r1, [pc, #456]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	670b      	str	r3, [r1, #112]	; 0x70
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	75bb      	strb	r3, [r7, #22]
 800671c:	e001      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d07d      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006732:	2b28      	cmp	r3, #40	; 0x28
 8006734:	d866      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	0800680b 	.word	0x0800680b
 8006740:	08006805 	.word	0x08006805
 8006744:	08006805 	.word	0x08006805
 8006748:	08006805 	.word	0x08006805
 800674c:	08006805 	.word	0x08006805
 8006750:	08006805 	.word	0x08006805
 8006754:	08006805 	.word	0x08006805
 8006758:	08006805 	.word	0x08006805
 800675c:	080067e1 	.word	0x080067e1
 8006760:	08006805 	.word	0x08006805
 8006764:	08006805 	.word	0x08006805
 8006768:	08006805 	.word	0x08006805
 800676c:	08006805 	.word	0x08006805
 8006770:	08006805 	.word	0x08006805
 8006774:	08006805 	.word	0x08006805
 8006778:	08006805 	.word	0x08006805
 800677c:	080067f3 	.word	0x080067f3
 8006780:	08006805 	.word	0x08006805
 8006784:	08006805 	.word	0x08006805
 8006788:	08006805 	.word	0x08006805
 800678c:	08006805 	.word	0x08006805
 8006790:	08006805 	.word	0x08006805
 8006794:	08006805 	.word	0x08006805
 8006798:	08006805 	.word	0x08006805
 800679c:	0800680b 	.word	0x0800680b
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006805 	.word	0x08006805
 80067a8:	08006805 	.word	0x08006805
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006805 	.word	0x08006805
 80067b8:	08006805 	.word	0x08006805
 80067bc:	0800680b 	.word	0x0800680b
 80067c0:	08006805 	.word	0x08006805
 80067c4:	08006805 	.word	0x08006805
 80067c8:	08006805 	.word	0x08006805
 80067cc:	08006805 	.word	0x08006805
 80067d0:	08006805 	.word	0x08006805
 80067d4:	08006805 	.word	0x08006805
 80067d8:	08006805 	.word	0x08006805
 80067dc:	0800680b 	.word	0x0800680b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 f956 	bl	8007a98 <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067f0:	e00c      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3324      	adds	r3, #36	; 0x24
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 f9ff 	bl	8007bfc <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
      break;
 8006808:	e000      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800680a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006812:	4b32      	ldr	r3, [pc, #200]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	492f      	ldr	r1, [pc, #188]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006820:	4313      	orrs	r3, r2
 8006822:	654b      	str	r3, [r1, #84]	; 0x54
 8006824:	e001      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d037      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683a:	2b05      	cmp	r3, #5
 800683c:	d820      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006887 	.word	0x08006887
 8006848:	0800685d 	.word	0x0800685d
 800684c:	0800686f 	.word	0x0800686f
 8006850:	08006887 	.word	0x08006887
 8006854:	08006887 	.word	0x08006887
 8006858:	08006887 	.word	0x08006887
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	2101      	movs	r1, #1
 8006862:	4618      	mov	r0, r3
 8006864:	f001 f918 	bl	8007a98 <RCCEx_PLL2_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800686c:	e00c      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3324      	adds	r3, #36	; 0x24
 8006872:	2101      	movs	r1, #1
 8006874:	4618      	mov	r0, r3
 8006876:	f001 f9c1 	bl	8007bfc <RCCEx_PLL3_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800687e:	e003      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
      break;
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f023 0207 	bic.w	r2, r3, #7
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689a:	4910      	ldr	r1, [pc, #64]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800689c:	4313      	orrs	r3, r2
 800689e:	654b      	str	r3, [r1, #84]	; 0x54
 80068a0:	e001      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d040      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d827      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	08006913 	.word	0x08006913
 80068c8:	080068e9 	.word	0x080068e9
 80068cc:	080068fb 	.word	0x080068fb
 80068d0:	08006913 	.word	0x08006913
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006913 	.word	0x08006913
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58024800 	.word	0x58024800
 80068e4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	2101      	movs	r1, #1
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f8d2 	bl	8007a98 <RCCEx_PLL2_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068f8:	e00c      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3324      	adds	r3, #36	; 0x24
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f97b 	bl	8007bfc <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800691a:	4bb3      	ldr	r3, [pc, #716]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	f023 0207 	bic.w	r2, r3, #7
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	49af      	ldr	r1, [pc, #700]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800692a:	4313      	orrs	r3, r2
 800692c:	658b      	str	r3, [r1, #88]	; 0x58
 800692e:	e001      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d044      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694a:	d01b      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800694c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006950:	d805      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d022      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800695c:	e01b      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d01d      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006968:	d01c      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800696a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800696e:	d01b      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006970:	e011      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3304      	adds	r3, #4
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f001 f88d 	bl	8007a98 <RCCEx_PLL2_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006982:	e012      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3324      	adds	r3, #36	; 0x24
 8006988:	2102      	movs	r1, #2
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f936 	bl	8007bfc <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006994:	e009      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	75fb      	strb	r3, [r7, #23]
      break;
 800699a:	e006      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800699c:	bf00      	nop
 800699e:	e004      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069b0:	4b8d      	ldr	r3, [pc, #564]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069be:	498a      	ldr	r1, [pc, #552]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	654b      	str	r3, [r1, #84]	; 0x54
 80069c4:	e001      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d044      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e0:	d01b      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80069e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e6:	d805      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d022      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80069f2:	e01b      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f8:	d01d      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80069fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069fe:	d01c      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a04:	d01b      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006a06:	e011      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 f842 	bl	8007a98 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a18:	e012      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	; 0x24
 8006a1e:	2102      	movs	r1, #2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 f8eb 	bl	8007bfc <RCCEx_PLL3_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a2a:	e009      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a30:	e006      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a46:	4b68      	ldr	r3, [pc, #416]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a54:	4964      	ldr	r1, [pc, #400]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	658b      	str	r3, [r1, #88]	; 0x58
 8006a5a:	e001      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d044      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a76:	d01b      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d805      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d022      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a88:	e01b      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	d01d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a94:	d01c      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006a96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a9a:	d01b      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006a9c:	e011      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fff7 	bl	8007a98 <RCCEx_PLL2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006aae:	e012      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3324      	adds	r3, #36	; 0x24
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f8a0 	bl	8007bfc <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ac0:	e009      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	e006      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e004      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006acc:	bf00      	nop
 8006ace:	e002      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006adc:	4b42      	ldr	r3, [pc, #264]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aea:	493f      	ldr	r1, [pc, #252]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	658b      	str	r3, [r1, #88]	; 0x58
 8006af0:	e001      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d10b      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3324      	adds	r3, #36	; 0x24
 8006b12:	2102      	movs	r1, #2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 f871 	bl	8007bfc <RCCEx_PLL3_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	75bb      	strb	r3, [r7, #22]
 8006b24:	e009      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b26:	4b30      	ldr	r3, [pc, #192]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b34:	492c      	ldr	r1, [pc, #176]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01b      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f84f 	bl	8007bfc <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75bb      	strb	r3, [r7, #22]
 8006b68:	e009      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b6a:	4b1f      	ldr	r3, [pc, #124]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b78:	491b      	ldr	r1, [pc, #108]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d032      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b94:	d00d      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b9a:	d016      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d111      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 ff76 	bl	8007a98 <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bb0:	e00c      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3324      	adds	r3, #36	; 0x24
 8006bb6:	2102      	movs	r1, #2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f81f 	bl	8007bfc <RCCEx_PLL3_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bc2:	e003      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8006bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006be0:	4901      	ldr	r1, [pc, #4]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	658b      	str	r3, [r1, #88]	; 0x58
 8006be6:	e003      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02f      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c06:	d00c      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c0c:	d015      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c12:	d10f      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b79      	ldr	r3, [pc, #484]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a78      	ldr	r2, [pc, #480]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c20:	e00c      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3324      	adds	r3, #36	; 0x24
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ffe7 	bl	8007bfc <RCCEx_PLL3_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c42:	4b6e      	ldr	r3, [pc, #440]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c50:	496a      	ldr	r1, [pc, #424]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	654b      	str	r3, [r1, #84]	; 0x54
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d029      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c74:	d007      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006c76:	e00f      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4b60      	ldr	r3, [pc, #384]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a5f      	ldr	r2, [pc, #380]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c84:	e00b      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 ff03 	bl	8007a98 <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ca4:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	4952      	ldr	r1, [pc, #328]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cb6:	e001      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3324      	adds	r3, #36	; 0x24
 8006ccc:	2102      	movs	r1, #2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ff94 	bl	8007bfc <RCCEx_PLL3_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d02f      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf2:	d00c      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf8:	d802      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d011      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006cfe:	e00d      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d04:	d00f      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0a:	d00e      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8006d0c:	e006      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	4a3a      	ldr	r2, [pc, #232]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d1a:	e007      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d32:	4b32      	ldr	r3, [pc, #200]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3e:	492f      	ldr	r1, [pc, #188]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	654b      	str	r3, [r1, #84]	; 0x54
 8006d44:	e001      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	4926      	ldr	r1, [pc, #152]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d74:	4b21      	ldr	r3, [pc, #132]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d82:	491e      	ldr	r1, [pc, #120]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da0:	4916      	ldr	r1, [pc, #88]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dbc:	6113      	str	r3, [r2, #16]
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006dc8:	490c      	ldr	r1, [pc, #48]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da08      	bge.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de2:	4906      	ldr	r1, [pc, #24]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58024400 	.word	0x58024400

08006e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b090      	sub	sp, #64	; 0x40
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d150      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e10:	4ba1      	ldr	r3, [pc, #644]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d844      	bhi.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e3d 	.word	0x08006e3d
 8006e2c:	08006e4d 	.word	0x08006e4d
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006ea5 	.word	0x08006ea5
 8006e38:	08006e6d 	.word	0x08006e6d
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fcc1 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4a:	e200      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e4c:	f107 0318 	add.w	r3, r7, #24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fa21 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e5a:	e1f8      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fb65 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e6a:	e1f0      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e6c:	4b8a      	ldr	r3, [pc, #552]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e7c:	4b87      	ldr	r3, [pc, #540]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e80:	e1e5      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e88:	d102      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006e8a:	4b85      	ldr	r3, [pc, #532]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8e:	e1de      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006e98:	4b82      	ldr	r3, [pc, #520]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e9c:	e1d7      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e1d4      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea8:	e1d1      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eae:	bf00      	nop
 8006eb0:	e1cd      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb8:	d14f      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006eba:	4b77      	ldr	r3, [pc, #476]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006ec2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d01c      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d804      	bhi.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006ed6:	e03c      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006ed8:	2bc0      	cmp	r3, #192	; 0xc0
 8006eda:	d037      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee0:	d018      	beq.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006ee2:	e036      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fc6d 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef2:	e1ac      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef4:	f107 0318 	add.w	r3, r7, #24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f9cd 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f02:	e1a4      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fb11 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f12:	e19c      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f14:	4b60      	ldr	r3, [pc, #384]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f24:	4b5d      	ldr	r3, [pc, #372]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f28:	e191      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f30:	d102      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006f32:	4b5b      	ldr	r3, [pc, #364]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e18a      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006f40:	4b58      	ldr	r3, [pc, #352]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f44:	e183      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4a:	e180      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f4c:	4b56      	ldr	r3, [pc, #344]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f50:	e17d      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f56:	bf00      	nop
 8006f58:	e179      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f60:	d153      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f62:	4b4d      	ldr	r3, [pc, #308]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f72:	d01f      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f78:	d805      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f82:	d00f      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006f84:	e03d      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006f86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f8a:	d037      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f90:	d018      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006f92:	e036      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fc15 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa2:	e154      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa4:	f107 0318 	add.w	r3, r7, #24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f975 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb2:	e14c      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fab9 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc2:	e144      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fc4:	4b34      	ldr	r3, [pc, #208]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006fd4:	4b31      	ldr	r3, [pc, #196]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006fd8:	e139      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe0:	d102      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006fe2:	4b2f      	ldr	r3, [pc, #188]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe6:	e132      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006ff0:	4b2c      	ldr	r3, [pc, #176]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff4:	e12b      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffa:	e128      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ffc:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007000:	e125      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007006:	bf00      	nop
 8007008:	e121      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007010:	d15d      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007012:	4b21      	ldr	r3, [pc, #132]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007022:	d01f      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007028:	d805      	bhi.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800702e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007032:	d00f      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007034:	e047      	b.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007036:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800703a:	d041      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800703c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007040:	d018      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007042:	e040      	b.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fbbd 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007052:	e0fc      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007054:	f107 0318 	add.w	r3, r7, #24
 8007058:	4618      	mov	r0, r3
 800705a:	f000 f91d 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007062:	e0f4      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fa61 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007072:	e0ec      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007074:	4b08      	ldr	r3, [pc, #32]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800707c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007088:	e0e1      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007090:	d10c      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e0da      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007098:	58024400 	.word	0x58024400
 800709c:	03d09000 	.word	0x03d09000
 80070a0:	003d0900 	.word	0x003d0900
 80070a4:	017d7840 	.word	0x017d7840
 80070a8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b2:	d102      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80070b4:	4b68      	ldr	r3, [pc, #416]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b8:	e0c9      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070be:	e0c6      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070c0:	4b66      	ldr	r3, [pc, #408]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c4:	e0c3      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ca:	bf00      	nop
 80070cc:	e0bf      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d4:	d153      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80070d6:	4b62      	ldr	r3, [pc, #392]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80070d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	d01f      	beq.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ec:	d805      	bhi.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d00f      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80070f8:	e03d      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80070fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070fe:	d037      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007104:	d018      	beq.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007106:	e036      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fb5b 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007116:	e09a      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007118:	f107 0318 	add.w	r3, r7, #24
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f8bb 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007126:	e092      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4618      	mov	r0, r3
 800712e:	f000 f9ff 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007136:	e08a      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007138:	4b49      	ldr	r3, [pc, #292]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800713a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007140:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007148:	4b46      	ldr	r3, [pc, #280]	; (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800714c:	e07f      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007154:	d102      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007156:	4b44      	ldr	r3, [pc, #272]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715a:	e078      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007162:	d102      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007164:	4b3c      	ldr	r3, [pc, #240]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007168:	e071      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716e:	e06e      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007170:	4b3a      	ldr	r3, [pc, #232]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007174:	e06b      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717a:	bf00      	nop
 800717c:	e067      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007184:	d13d      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007186:	4b36      	ldr	r3, [pc, #216]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d00c      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800719c:	d011      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d12b      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f876 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b0:	e04d      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b2:	f107 030c 	add.w	r3, r7, #12
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f9ba 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c0:	e045      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071c2:	4b27      	ldr	r3, [pc, #156]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071d2:	4b24      	ldr	r3, [pc, #144]	; (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071d6:	e03a      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071de:	d102      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e4:	e033      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ec:	d102      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f2:	e02c      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f8:	e029      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fe:	bf00      	nop
 8007200:	e025      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d11f      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800721a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721e:	d008      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007226:	4618      	mov	r0, r3
 8007228:	f000 face 	bl	80077c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007230:	e00d      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f82e 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007240:	e005      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	bf00      	nop
 8007248:	e001      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007250:	4618      	mov	r0, r3
 8007252:	3740      	adds	r7, #64	; 0x40
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	017d7840 	.word	0x017d7840
 800725c:	00bb8000 	.word	0x00bb8000
 8007260:	58024400 	.word	0x58024400
 8007264:	03d09000 	.word	0x03d09000
 8007268:	003d0900 	.word	0x003d0900

0800726c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007270:	f7fe fe8e 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8007274:	4601      	mov	r1, r0
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4a04      	ldr	r2, [pc, #16]	; (8007294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007282:	5cd3      	ldrb	r3, [r2, r3]
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800728c:	4618      	mov	r0, r3
 800728e:	bd80      	pop	{r7, pc}
 8007290:	58024400 	.word	0x58024400
 8007294:	0800d064 	.word	0x0800d064

08007298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	; 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a0:	4b9d      	ldr	r3, [pc, #628]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80072aa:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	0b1b      	lsrs	r3, r3, #12
 80072b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80072b6:	4b98      	ldr	r3, [pc, #608]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80072c0:	4b95      	ldr	r3, [pc, #596]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	08db      	lsrs	r3, r3, #3
 80072c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 810a 	beq.w	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d05a      	beq.n	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d302      	bcc.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d078      	beq.n	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80072f2:	e099      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f4:	4b88      	ldr	r3, [pc, #544]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d02d      	beq.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007300:	4b85      	ldr	r3, [pc, #532]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	08db      	lsrs	r3, r3, #3
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	4a84      	ldr	r2, [pc, #528]	; (800751c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
 8007310:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732a:	4b7b      	ldr	r3, [pc, #492]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733a:	ed97 6a03 	vldr	s12, [r7, #12]
 800733e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800735a:	e087      	b.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736e:	4b6a      	ldr	r3, [pc, #424]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007382:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800739e:	e065      	b.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	4b59      	ldr	r3, [pc, #356]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073e2:	e043      	b.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800752c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80073f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f6:	4b48      	ldr	r3, [pc, #288]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a03 	vldr	s12, [r7, #12]
 800740a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007426:	e021      	b.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743a:	4b37      	ldr	r3, [pc, #220]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744a:	ed97 6a03 	vldr	s12, [r7, #12]
 800744e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800745e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800746a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	0a5b      	lsrs	r3, r3, #9
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007486:	edd7 6a07 	vldr	s13, [r7, #28]
 800748a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007492:	ee17 2a90 	vmov	r2, s15
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c0:	ee17 2a90 	vmov	r2, s15
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80074c8:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	0e1b      	lsrs	r3, r3, #24
 80074ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ee:	ee17 2a90 	vmov	r2, s15
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074f6:	e008      	b.n	800750a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	609a      	str	r2, [r3, #8]
}
 800750a:	bf00      	nop
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	58024400 	.word	0x58024400
 800751c:	03d09000 	.word	0x03d09000
 8007520:	46000000 	.word	0x46000000
 8007524:	4c742400 	.word	0x4c742400
 8007528:	4a742400 	.word	0x4a742400
 800752c:	4bbebc20 	.word	0x4bbebc20

08007530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007530:	b480      	push	{r7}
 8007532:	b089      	sub	sp, #36	; 0x24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007538:	4b9d      	ldr	r3, [pc, #628]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007542:	4b9b      	ldr	r3, [pc, #620]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	0d1b      	lsrs	r3, r3, #20
 8007548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800754c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800754e:	4b98      	ldr	r3, [pc, #608]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007556:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007558:	4b95      	ldr	r3, [pc, #596]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	08db      	lsrs	r3, r3, #3
 800755e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	fb02 f303 	mul.w	r3, r2, r3
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007570:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 810a 	beq.w	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d05a      	beq.n	8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d302      	bcc.n	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007586:	2b02      	cmp	r3, #2
 8007588:	d078      	beq.n	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800758a:	e099      	b.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800758c:	4b88      	ldr	r3, [pc, #544]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d02d      	beq.n	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007598:	4b85      	ldr	r3, [pc, #532]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	08db      	lsrs	r3, r3, #3
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	4a84      	ldr	r2, [pc, #528]	; (80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80075a4:	fa22 f303 	lsr.w	r3, r2, r3
 80075a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b7b      	ldr	r3, [pc, #492]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075f2:	e087      	b.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007606:	4b6a      	ldr	r3, [pc, #424]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	ed97 6a03 	vldr	s12, [r7, #12]
 800761a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800761e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007636:	e065      	b.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764a:	4b59      	ldr	r3, [pc, #356]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765a:	ed97 6a03 	vldr	s12, [r7, #12]
 800765e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800767a:	e043      	b.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800768a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768e:	4b48      	ldr	r3, [pc, #288]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076be:	e021      	b.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80076ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d2:	4b37      	ldr	r3, [pc, #220]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007702:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007704:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	0a5b      	lsrs	r3, r3, #9
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800771a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800771e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772a:	ee17 2a90 	vmov	r2, s15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007732:	4b1f      	ldr	r3, [pc, #124]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007758:	ee17 2a90 	vmov	r2, s15
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800777a:	edd7 6a07 	vldr	s13, [r7, #28]
 800777e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007786:	ee17 2a90 	vmov	r2, s15
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800778e:	e008      	b.n	80077a2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
}
 80077a2:	bf00      	nop
 80077a4:	3724      	adds	r7, #36	; 0x24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	58024400 	.word	0x58024400
 80077b4:	03d09000 	.word	0x03d09000
 80077b8:	46000000 	.word	0x46000000
 80077bc:	4c742400 	.word	0x4c742400
 80077c0:	4a742400 	.word	0x4a742400
 80077c4:	4bbebc20 	.word	0x4bbebc20

080077c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b089      	sub	sp, #36	; 0x24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077d0:	4b9d      	ldr	r3, [pc, #628]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	f003 0303 	and.w	r3, r3, #3
 80077d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80077da:	4b9b      	ldr	r3, [pc, #620]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	091b      	lsrs	r3, r3, #4
 80077e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077e6:	4b98      	ldr	r3, [pc, #608]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077f0:	4b95      	ldr	r3, [pc, #596]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	fb02 f303 	mul.w	r3, r2, r3
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007808:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 810a 	beq.w	8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d05a      	beq.n	80078d0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800781a:	2b01      	cmp	r3, #1
 800781c:	d302      	bcc.n	8007824 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800781e:	2b02      	cmp	r3, #2
 8007820:	d078      	beq.n	8007914 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007822:	e099      	b.n	8007958 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007824:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d02d      	beq.n	800788c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007830:	4b85      	ldr	r3, [pc, #532]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	08db      	lsrs	r3, r3, #3
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	4a84      	ldr	r2, [pc, #528]	; (8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
 8007840:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b7b      	ldr	r3, [pc, #492]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800788a:	e087      	b.n	800799c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b6a      	ldr	r3, [pc, #424]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ce:	e065      	b.n	800799c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007912:	e043      	b.n	800799c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007956:	e021      	b.n	800799c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b37      	ldr	r3, [pc, #220]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800799a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800799c:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	0a5b      	lsrs	r3, r3, #9
 80079a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c2:	ee17 2a90 	vmov	r2, s15
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f0:	ee17 2a90 	vmov	r2, s15
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	0e1b      	lsrs	r3, r3, #24
 80079fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1e:	ee17 2a90 	vmov	r2, s15
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a26:	e008      	b.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	609a      	str	r2, [r3, #8]
}
 8007a3a:	bf00      	nop
 8007a3c:	3724      	adds	r7, #36	; 0x24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	03d09000 	.word	0x03d09000
 8007a50:	46000000 	.word	0x46000000
 8007a54:	4c742400 	.word	0x4c742400
 8007a58:	4a742400 	.word	0x4a742400
 8007a5c:	4bbebc20 	.word	0x4bbebc20

08007a60 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a64:	f7fe f922 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007a76:	5cd3      	ldrb	r3, [r2, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	fa21 f303 	lsr.w	r3, r1, r3
 8007a80:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007a82:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007a84:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007a86:	681b      	ldr	r3, [r3, #0]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	0800d064 	.word	0x0800d064
 8007a94:	24000000 	.word	0x24000000

08007a98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa6:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d101      	bne.n	8007ab6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e099      	b.n	8007bea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ab6:	4b4f      	ldr	r3, [pc, #316]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a4e      	ldr	r2, [pc, #312]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac2:	f7fa fc2f 	bl	8002324 <HAL_GetTick>
 8007ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac8:	e008      	b.n	8007adc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007aca:	f7fa fc2b 	bl	8002324 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e086      	b.n	8007bea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007adc:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ae8:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	031b      	lsls	r3, r3, #12
 8007af6:	493f      	ldr	r1, [pc, #252]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	628b      	str	r3, [r1, #40]	; 0x28
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	025b      	lsls	r3, r3, #9
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	061b      	lsls	r3, r3, #24
 8007b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b2c:	4931      	ldr	r1, [pc, #196]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b32:	4b30      	ldr	r3, [pc, #192]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	492d      	ldr	r1, [pc, #180]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f023 0220 	bic.w	r2, r3, #32
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	4928      	ldr	r1, [pc, #160]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	f023 0310 	bic.w	r3, r3, #16
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <RCCEx_PLL2_Config+0x160>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	69d2      	ldr	r2, [r2, #28]
 8007b6e:	00d2      	lsls	r2, r2, #3
 8007b70:	4920      	ldr	r1, [pc, #128]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b76:	4b1f      	ldr	r3, [pc, #124]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	f043 0310 	orr.w	r3, r3, #16
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b94:	e00f      	b.n	8007bb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d106      	bne.n	8007baa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba8:	e005      	b.n	8007bb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fa fbaf 	bl	8002324 <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bca:	f7fa fbab 	bl	8002324 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	ffff0007 	.word	0xffff0007

08007bfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c0a:	4b53      	ldr	r3, [pc, #332]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d101      	bne.n	8007c1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e099      	b.n	8007d4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c1a:	4b4f      	ldr	r3, [pc, #316]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a4e      	ldr	r2, [pc, #312]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c26:	f7fa fb7d 	bl	8002324 <HAL_GetTick>
 8007c2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c2c:	e008      	b.n	8007c40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c2e:	f7fa fb79 	bl	8002324 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e086      	b.n	8007d4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c40:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f0      	bne.n	8007c2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c4c:	4b42      	ldr	r3, [pc, #264]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	051b      	lsls	r3, r3, #20
 8007c5a:	493f      	ldr	r1, [pc, #252]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	025b      	lsls	r3, r3, #9
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	061b      	lsls	r3, r3, #24
 8007c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c90:	4931      	ldr	r1, [pc, #196]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c96:	4b30      	ldr	r3, [pc, #192]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	492d      	ldr	r1, [pc, #180]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ca8:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	4928      	ldr	r1, [pc, #160]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cba:	4b27      	ldr	r3, [pc, #156]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cc6:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cca:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <RCCEx_PLL3_Config+0x160>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	69d2      	ldr	r2, [r2, #28]
 8007cd2:	00d2      	lsls	r2, r2, #3
 8007cd4:	4920      	ldr	r1, [pc, #128]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4a19      	ldr	r2, [pc, #100]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007cf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf8:	e00f      	b.n	8007d1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d106      	bne.n	8007d0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d00:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d0c:	e005      	b.n	8007d1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d1a:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a0e      	ldr	r2, [pc, #56]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d26:	f7fa fafd 	bl	8002324 <HAL_GetTick>
 8007d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d2c:	e008      	b.n	8007d40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d2e:	f7fa faf9 	bl	8002324 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d901      	bls.n	8007d40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e006      	b.n	8007d4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <RCCEx_PLL3_Config+0x15c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0f0      	beq.n	8007d2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	58024400 	.word	0x58024400
 8007d5c:	ffff0007 	.word	0xffff0007

08007d60 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	; 0x28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e25b      	b.n	800822a <HAL_SAI_Init+0x4ca>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d72:	f7fa fb05 	bl	8002380 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d113      	bne.n	8007da8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4aa1      	ldr	r2, [pc, #644]	; (800800c <HAL_SAI_Init+0x2ac>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_SAI_Init+0x34>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4aa0      	ldr	r2, [pc, #640]	; (8008010 <HAL_SAI_Init+0x2b0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d107      	bne.n	8007da4 <HAL_SAI_Init+0x44>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d103      	bne.n	8007da4 <HAL_SAI_Init+0x44>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e240      	b.n	800822a <HAL_SAI_Init+0x4ca>
    }
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a97      	ldr	r2, [pc, #604]	; (800800c <HAL_SAI_Init+0x2ac>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_SAI_Init+0x5c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a97      	ldr	r2, [pc, #604]	; (8008014 <HAL_SAI_Init+0x2b4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d102      	bne.n	8007dc2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007dbc:	4b96      	ldr	r3, [pc, #600]	; (8008018 <HAL_SAI_Init+0x2b8>)
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	e01b      	b.n	8007dfa <HAL_SAI_Init+0x9a>
  }
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a95      	ldr	r2, [pc, #596]	; (800801c <HAL_SAI_Init+0x2bc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_SAI_Init+0x76>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a93      	ldr	r2, [pc, #588]	; (8008020 <HAL_SAI_Init+0x2c0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d102      	bne.n	8007ddc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007dd6:	4b93      	ldr	r3, [pc, #588]	; (8008024 <HAL_SAI_Init+0x2c4>)
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	e00e      	b.n	8007dfa <HAL_SAI_Init+0x9a>
  }
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a91      	ldr	r2, [pc, #580]	; (8008028 <HAL_SAI_Init+0x2c8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_SAI_Init+0x90>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a90      	ldr	r2, [pc, #576]	; (800802c <HAL_SAI_Init+0x2cc>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d102      	bne.n	8007df6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007df0:	4b8f      	ldr	r3, [pc, #572]	; (8008030 <HAL_SAI_Init+0x2d0>)
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	e001      	b.n	8007dfa <HAL_SAI_Init+0x9a>
  }
  else
  {
    SaiBaseAddress = SAI4;
 8007df6:	4b8f      	ldr	r3, [pc, #572]	; (8008034 <HAL_SAI_Init+0x2d4>)
 8007df8:	61bb      	str	r3, [r7, #24]
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_SAI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fa f8ce 	bl	8001fb0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa19 	bl	800824c <SAI_Disable>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_SAI_Init+0xc4>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e202      	b.n	800822a <HAL_SAI_Init+0x4ca>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d007      	beq.n	8007e44 <HAL_SAI_Init+0xe4>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d302      	bcc.n	8007e3e <HAL_SAI_Init+0xde>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d006      	beq.n	8007e4a <HAL_SAI_Init+0xea>
 8007e3c:	e008      	b.n	8007e50 <HAL_SAI_Init+0xf0>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e42:	e008      	b.n	8007e56 <HAL_SAI_Init+0xf6>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007e44:	2310      	movs	r3, #16
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e48:	e005      	b.n	8007e56 <HAL_SAI_Init+0xf6>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007e4a:	2320      	movs	r3, #32
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e4e:	e002      	b.n	8007e56 <HAL_SAI_Init+0xf6>
    default:
      tmpregisterGCR = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e54:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	d831      	bhi.n	8007ec2 <HAL_SAI_Init+0x162>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <HAL_SAI_Init+0x104>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e7d 	.word	0x08007e7d
 8007e68:	08007e83 	.word	0x08007e83
 8007e6c:	08007e8b 	.word	0x08007e8b
 8007e70:	08007e93 	.word	0x08007e93
 8007e74:	08007ea3 	.word	0x08007ea3
 8007e78:	08007eb3 	.word	0x08007eb3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
      break;
 8007e80:	e022      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e86:	61fb      	str	r3, [r7, #28]
      break;
 8007e88:	e01e      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e8e:	61fb      	str	r3, [r7, #28]
      break;
 8007e90:	e01a      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e96:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ea0:	e012      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ea6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	f043 0302 	orr.w	r3, r3, #2
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007eb0:	e00a      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eb6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	f043 0303 	orr.w	r3, r3, #3
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ec0:	e002      	b.n	8007ec8 <HAL_SAI_Init+0x168>
    default:
      syncen_bits = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
      break;
 8007ec6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ecc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8088 	beq.w	8007fe8 <HAL_SAI_Init+0x288>
  {
    uint32_t freq = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a4a      	ldr	r2, [pc, #296]	; (800800c <HAL_SAI_Init+0x2ac>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d004      	beq.n	8007ef0 <HAL_SAI_Init+0x190>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a4a      	ldr	r2, [pc, #296]	; (8008014 <HAL_SAI_Init+0x2b4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d104      	bne.n	8007efa <HAL_SAI_Init+0x19a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ef0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ef4:	f7fe ff84 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ef8:	6178      	str	r0, [r7, #20]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a47      	ldr	r2, [pc, #284]	; (800801c <HAL_SAI_Init+0x2bc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_SAI_Init+0x1ae>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a45      	ldr	r2, [pc, #276]	; (8008020 <HAL_SAI_Init+0x2c0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d104      	bne.n	8007f18 <HAL_SAI_Init+0x1b8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007f12:	f7fe ff75 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f16:	6178      	str	r0, [r7, #20]
    }
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a42      	ldr	r2, [pc, #264]	; (8008028 <HAL_SAI_Init+0x2c8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_SAI_Init+0x1cc>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a41      	ldr	r2, [pc, #260]	; (800802c <HAL_SAI_Init+0x2cc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d104      	bne.n	8007f36 <HAL_SAI_Init+0x1d6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007f2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007f30:	f7fe ff66 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f34:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_A)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a35      	ldr	r2, [pc, #212]	; (8008010 <HAL_SAI_Init+0x2b0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d104      	bne.n	8007f4a <HAL_SAI_Init+0x1ea>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007f44:	f7fe ff5c 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f48:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a3a      	ldr	r2, [pc, #232]	; (8008038 <HAL_SAI_Init+0x2d8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d104      	bne.n	8007f5e <HAL_SAI_Init+0x1fe>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f58:	f7fe ff52 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f5c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f66:	d10f      	bne.n	8007f88 <HAL_SAI_Init+0x228>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	4619      	mov	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	e017      	b.n	8007fb8 <HAL_SAI_Init+0x258>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f90:	d101      	bne.n	8007f96 <HAL_SAI_Init+0x236>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e000      	b.n	8007f98 <HAL_SAI_Init+0x238>
 8007f96:	2301      	movs	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fb6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	4a20      	ldr	r2, [pc, #128]	; (800803c <HAL_SAI_Init+0x2dc>)
 8007fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc0:	08da      	lsrs	r2, r3, #3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007fc6:	6939      	ldr	r1, [r7, #16]
 8007fc8:	4b1c      	ldr	r3, [pc, #112]	; (800803c <HAL_SAI_Init+0x2dc>)
 8007fca:	fba3 2301 	umull	r2, r3, r3, r1
 8007fce:	08da      	lsrs	r2, r3, #3
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	1aca      	subs	r2, r1, r3
 8007fda:	2a08      	cmp	r2, #8
 8007fdc:	d904      	bls.n	8007fe8 <HAL_SAI_Init+0x288>
    {
      hsai->Init.Mckdiv += 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <HAL_SAI_Init+0x298>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d123      	bne.n	8008040 <HAL_SAI_Init+0x2e0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_SAI_Init+0x2a4>
 8008000:	2300      	movs	r3, #0
 8008002:	e001      	b.n	8008008 <HAL_SAI_Init+0x2a8>
 8008004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008008:	623b      	str	r3, [r7, #32]
 800800a:	e022      	b.n	8008052 <HAL_SAI_Init+0x2f2>
 800800c:	40015804 	.word	0x40015804
 8008010:	58005404 	.word	0x58005404
 8008014:	40015824 	.word	0x40015824
 8008018:	40015800 	.word	0x40015800
 800801c:	40015c04 	.word	0x40015c04
 8008020:	40015c24 	.word	0x40015c24
 8008024:	40015c00 	.word	0x40015c00
 8008028:	40016004 	.word	0x40016004
 800802c:	40016024 	.word	0x40016024
 8008030:	40016000 	.word	0x40016000
 8008034:	58005400 	.word	0x58005400
 8008038:	58005424 	.word	0x58005424
 800803c:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008044:	2b01      	cmp	r3, #1
 8008046:	d102      	bne.n	800804e <HAL_SAI_Init+0x2ee>
 8008048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804c:	e000      	b.n	8008050 <HAL_SAI_Init+0x2f0>
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008052:	f7fa f995 	bl	8002380 <HAL_GetREVID>
 8008056:	4603      	mov	r3, r0
 8008058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805c:	d331      	bcc.n	80080c2 <HAL_SAI_Init+0x362>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	4b72      	ldr	r3, [pc, #456]	; (8008234 <HAL_SAI_Init+0x4d4>)
 800806a:	400b      	ands	r3, r1
 800806c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008082:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008088:	431a      	orrs	r2, r3
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008096:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080a2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	051b      	lsls	r3, r3, #20
 80080aa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080b0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e02d      	b.n	800811e <HAL_SAI_Init+0x3be>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4b5a      	ldr	r3, [pc, #360]	; (8008238 <HAL_SAI_Init+0x4d8>)
 80080ce:	400b      	ands	r3, r1
 80080d0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080e6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	431a      	orrs	r2, r3
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80080fa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008106:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	051b      	lsls	r3, r3, #20
 800810e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008114:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	601a      	str	r2, [r3, #0]
  }

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6859      	ldr	r1, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	4b44      	ldr	r3, [pc, #272]	; (800823c <HAL_SAI_Init+0x4dc>)
 800812a:	400b      	ands	r3, r1
 800812c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6859      	ldr	r1, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6899      	ldr	r1, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b3a      	ldr	r3, [pc, #232]	; (8008240 <HAL_SAI_Init+0x4e0>)
 8008158:	400b      	ands	r3, r1
 800815a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008166:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800816c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008172:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008178:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	3b01      	subs	r3, #1
 8008180:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008182:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68d9      	ldr	r1, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	f24f 0320 	movw	r3, #61472	; 0xf020
 800819a:	400b      	ands	r3, r1
 800819c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68d9      	ldr	r1, [r3, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081b4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ba:	3b01      	subs	r3, #1
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <HAL_SAI_Init+0x4e4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d004      	beq.n	80081dc <HAL_SAI_Init+0x47c>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <HAL_SAI_Init+0x4e8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d119      	bne.n	8008210 <HAL_SAI_Init+0x4b0>
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e0:	f023 0201 	bic.w	r2, r3, #1
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <HAL_SAI_Init+0x4b0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	3b01      	subs	r3, #1
 80081fc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081fe:	431a      	orrs	r2, r3
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008208:	f043 0201 	orr.w	r2, r3, #1
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3728      	adds	r7, #40	; 0x28
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	f005c010 	.word	0xf005c010
 8008238:	f805c010 	.word	0xf805c010
 800823c:	ffff1ff0 	.word	0xffff1ff0
 8008240:	fff88000 	.word	0xfff88000
 8008244:	40015804 	.word	0x40015804
 8008248:	58005404 	.word	0x58005404

0800824c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800824c:	b490      	push	{r4, r7}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <SAI_Disable+0x60>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <SAI_Disable+0x64>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	0b1b      	lsrs	r3, r3, #12
 8008260:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008274:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008276:	2c00      	cmp	r4, #0
 8008278:	d10a      	bne.n	8008290 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	73fb      	strb	r3, [r7, #15]
      break;
 800828e:	e007      	b.n	80082a0 <SAI_Disable+0x54>
    }
    count--;
 8008290:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1ea      	bne.n	8008276 <SAI_Disable+0x2a>

  return status;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc90      	pop	{r4, r7}
 80082aa:	4770      	bx	lr
 80082ac:	24000000 	.word	0x24000000
 80082b0:	95cbec1b 	.word	0x95cbec1b

080082b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	; 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e07c      	b.n	80083c0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10c      	bne.n	80082ec <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f9 fbb0 	bl	8001a4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2203      	movs	r2, #3
 80082f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f867 	bl	80083c8 <HAL_SD_InitCard>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e05d      	b.n	80083c0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa94 	bl	8008838 <HAL_SD_GetCardStatus>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e052      	b.n	80083c0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800831a:	7e3b      	ldrb	r3, [r7, #24]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008320:	7e7b      	ldrb	r3, [r7, #25]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10a      	bne.n	8008344 <HAL_SD_Init+0x90>
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <HAL_SD_Init+0x86>
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008340:	65da      	str	r2, [r3, #92]	; 0x5c
 8008342:	e00b      	b.n	800835c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	2b01      	cmp	r3, #1
 800834a:	d104      	bne.n	8008356 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008352:	65da      	str	r2, [r3, #92]	; 0x5c
 8008354:	e002      	b.n	800835c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb00 	bl	8008968 <HAL_SD_ConfigWideBusOperation>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e026      	b.n	80083c0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008372:	f7f9 ffd7 	bl	8002324 <HAL_GetTick>
 8008376:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008378:	e011      	b.n	800839e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800837a:	f7f9 ffd3 	bl	8002324 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d109      	bne.n	800839e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e010      	b.n	80083c0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fb72 	bl	8008a88 <HAL_SD_GetCardState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d1e7      	bne.n	800837a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3728      	adds	r7, #40	; 0x28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083c8:	b5b0      	push	{r4, r5, r7, lr}
 80083ca:	b090      	sub	sp, #64	; 0x40
 80083cc:	af04      	add	r7, sp, #16
 80083ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083dc:	2300      	movs	r3, #0
 80083de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80083e0:	23fa      	movs	r3, #250	; 0xfa
 80083e2:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d107      	bne.n	80083fc <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0210 	orr.w	r2, r2, #16
 80083fa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681d      	ldr	r5, [r3, #0]
 8008400:	466c      	mov	r4, sp
 8008402:	f107 0318 	add.w	r3, r7, #24
 8008406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800840a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800840e:	f107 030c 	add.w	r3, r7, #12
 8008412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008414:	4628      	mov	r0, r5
 8008416:	f003 fe2b 	bl	800c070 <SDMMC_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 8008420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e04d      	b.n	80084c8 <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f003 fe54 	bl	800c0de <SDMMC_PowerState_ON>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 800843c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e03f      	b.n	80084c8 <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8008448:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800844c:	f7fe fcd8 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8008450:	4602      	mov	r2, r0
 8008452:	4b1f      	ldr	r3, [pc, #124]	; (80084d0 <HAL_SD_InitCard+0x108>)
 8008454:	fba3 2302 	umull	r2, r3, r3, r2
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008462:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <HAL_SD_InitCard+0x10c>)
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	fbb2 f3f3 	udiv	r3, r2, r3
 800846a:	3301      	adds	r3, #1
 800846c:	4618      	mov	r0, r3
 800846e:	f7f9 ff65 	bl	800233c <HAL_Delay>
 8008472:	e002      	b.n	800847a <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8008474:	2002      	movs	r0, #2
 8008476:	f7f9 ff61 	bl	800233c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fbe2 	bl	8008c44 <SD_PowerON>
 8008480:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e013      	b.n	80084c8 <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fb11 	bl	8008ac8 <SD_InitCard>
 80084a6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3730      	adds	r7, #48	; 0x30
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bdb0      	pop	{r4, r5, r7, pc}
 80084d0:	10624dd3 	.word	0x10624dd3
 80084d4:	00012110 	.word	0x00012110

080084d8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	0f9b      	lsrs	r3, r3, #30
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850a:	0e9b      	lsrs	r3, r3, #26
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	b2da      	uxtb	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851c:	0e1b      	lsrs	r3, r3, #24
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	b2da      	uxtb	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	b2da      	uxtb	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	b29a      	uxth	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856e:	0bdb      	lsrs	r3, r3, #15
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008580:	0b9b      	lsrs	r3, r3, #14
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008592:	0b5b      	lsrs	r3, r3, #13
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a4:	0b1b      	lsrs	r3, r3, #12
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2200      	movs	r2, #0
 80085b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d163      	bne.n	8008688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c4:	009a      	lsls	r2, r3, #2
 80085c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80085ca:	4013      	ands	r3, r2
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085d0:	0f92      	lsrs	r2, r2, #30
 80085d2:	431a      	orrs	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085dc:	0edb      	lsrs	r3, r3, #27
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008600:	0d5b      	lsrs	r3, r3, #21
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	b2da      	uxtb	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008612:	0c9b      	lsrs	r3, r3, #18
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	b2da      	uxtb	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008624:	0bdb      	lsrs	r3, r3, #15
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	b2da      	uxtb	r2, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	7e1b      	ldrb	r3, [r3, #24]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	3302      	adds	r3, #2
 8008648:	2201      	movs	r2, #1
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008652:	fb02 f203 	mul.w	r2, r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	7a1b      	ldrb	r3, [r3, #8]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	2201      	movs	r2, #1
 8008666:	409a      	lsls	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008674:	0a52      	lsrs	r2, r2, #9
 8008676:	fb02 f203 	mul.w	r2, r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008684:	659a      	str	r2, [r3, #88]	; 0x58
 8008686:	e031      	b.n	80086ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d11d      	bne.n	80086cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008694:	041b      	lsls	r3, r3, #16
 8008696:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	431a      	orrs	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	3301      	adds	r3, #1
 80086ac:	029a      	lsls	r2, r3, #10
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	659a      	str	r2, [r3, #88]	; 0x58
 80086ca:	e00f      	b.n	80086ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a58      	ldr	r2, [pc, #352]	; (8008834 <HAL_SD_GetCardCSD+0x344>)
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e09d      	b.n	8008828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086f0:	0b9b      	lsrs	r3, r3, #14
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008702:	09db      	lsrs	r3, r3, #7
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008724:	0fdb      	lsrs	r3, r3, #31
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008730:	0f5b      	lsrs	r3, r3, #29
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	b2da      	uxtb	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008742:	0e9b      	lsrs	r3, r3, #26
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008754:	0d9b      	lsrs	r3, r3, #22
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	b2da      	uxtb	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008766:	0d5b      	lsrs	r3, r3, #21
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	0bdb      	lsrs	r3, r3, #15
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087aa:	0b9b      	lsrs	r3, r3, #14
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087be:	0b5b      	lsrs	r3, r3, #13
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d2:	0b1b      	lsrs	r3, r3, #12
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e6:	0a9b      	lsrs	r3, r3, #10
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fa:	0a1b      	lsrs	r3, r3, #8
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008816:	b2da      	uxtb	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	1fe00fff 	.word	0x1fe00fff

08008838 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b094      	sub	sp, #80	; 0x50
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008842:	f107 030c 	add.w	r3, r7, #12
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb09 	bl	8008e60 <SD_SendSDStatus>
 800884e:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00f      	beq.n	8008876 <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a42      	ldr	r2, [pc, #264]	; (8008964 <HAL_SD_GetCardStatus+0x12c>)
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e071      	b.n	800895a <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	099b      	lsrs	r3, r3, #6
 800887a:	b2db      	uxtb	r3, r3
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	b2da      	uxtb	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	095b      	lsrs	r3, r3, #5
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	0a1b      	lsrs	r3, r3, #8
 800889a:	b29b      	uxth	r3, r3
 800889c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	0e1b      	lsrs	r3, r3, #24
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	061a      	lsls	r2, r3, #24
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	0a1b      	lsrs	r3, r3, #8
 80088c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	0e1b      	lsrs	r3, r3, #24
 80088cc:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	0d1b      	lsrs	r3, r3, #20
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088fe:	b29a      	uxth	r2, r3
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	b29b      	uxth	r3, r3
 8008904:	b2db      	uxtb	r3, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	b29a      	uxth	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	0a9b      	lsrs	r3, r3, #10
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800891a:	b2da      	uxtb	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	0a1b      	lsrs	r3, r3, #8
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	b2db      	uxtb	r3, r3
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	b2da      	uxtb	r2, r3
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	0e1b      	lsrs	r3, r3, #24
 8008952:	b2da      	uxtb	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3750      	adds	r7, #80	; 0x50
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	1fe00fff 	.word	0x1fe00fff

08008968 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008968:	b5b0      	push	{r4, r5, r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af04      	add	r7, sp, #16
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2203      	movs	r2, #3
 8008976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897e:	2b03      	cmp	r3, #3
 8008980:	d02e      	beq.n	80089e0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008988:	d106      	bne.n	8008998 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	639a      	str	r2, [r3, #56]	; 0x38
 8008996:	e029      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800899e:	d10a      	bne.n	80089b6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb55 	bl	8009050 <SD_WideBus_Enable>
 80089a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
 80089b4:	e01a      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fb92 	bl	80090e6 <SD_WideBus_Disable>
 80089c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
 80089d0:	e00c      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
 80089de:	e005      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a22      	ldr	r2, [pc, #136]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x11c>)
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e039      	b.n	8008a7c <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d903      	bls.n	8008a2e <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e012      	b.n	8008a54 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a36:	d103      	bne.n	8008a40 <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	61fb      	str	r3, [r7, #28]
 8008a3e:	e009      	b.n	8008a54 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a48:	d102      	bne.n	8008a50 <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e001      	b.n	8008a54 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008a50:	2304      	movs	r3, #4
 8008a52:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681d      	ldr	r5, [r3, #0]
 8008a58:	466c      	mov	r4, sp
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a66:	f107 030c 	add.w	r3, r7, #12
 8008a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f003 faff 	bl	800c070 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	; 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bdb0      	pop	{r4, r5, r7, pc}
 8008a84:	1fe00fff 	.word	0x1fe00fff

08008a88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fab0 	bl	8009000 <SD_SendStatus>
 8008aa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	0a5b      	lsrs	r3, r3, #9
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008abe:	693b      	ldr	r3, [r7, #16]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ac8:	b590      	push	{r4, r7, lr}
 8008aca:	b091      	sub	sp, #68	; 0x44
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f003 fb11 	bl	800c100 <SDMMC_GetPowerState>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ae4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ae8:	e0a8      	b.n	8008c3c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d02e      	beq.n	8008b50 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f003 fc93 	bl	800c422 <SDMMC_CmdSendCID>
 8008afc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	e099      	b.n	8008c3c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f003 fb3b 	bl	800c18a <SDMMC_GetResponse>
 8008b14:	4602      	mov	r2, r0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2104      	movs	r1, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f003 fb32 	bl	800c18a <SDMMC_GetResponse>
 8008b26:	4602      	mov	r2, r0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2108      	movs	r1, #8
 8008b32:	4618      	mov	r0, r3
 8008b34:	f003 fb29 	bl	800c18a <SDMMC_GetResponse>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	210c      	movs	r1, #12
 8008b44:	4618      	mov	r0, r3
 8008b46:	f003 fb20 	bl	800c18a <SDMMC_GetResponse>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d00d      	beq.n	8008b74 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f107 020e 	add.w	r2, r7, #14
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f003 fc9c 	bl	800c4a0 <SDMMC_CmdSetRelAdd>
 8008b68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <SD_InitCard+0xac>
    {
      return errorstate;
 8008b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b72:	e063      	b.n	8008c3c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d036      	beq.n	8008bea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b7c:	89fb      	ldrh	r3, [r7, #14]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8c:	041b      	lsls	r3, r3, #16
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f003 fc65 	bl	800c460 <SDMMC_CmdSendCSD>
 8008b96:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <SD_InitCard+0xda>
    {
      return errorstate;
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba0:	e04c      	b.n	8008c3c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f003 faee 	bl	800c18a <SDMMC_GetResponse>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2104      	movs	r1, #4
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f003 fae5 	bl	800c18a <SDMMC_GetResponse>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2108      	movs	r1, #8
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f003 fadc 	bl	800c18a <SDMMC_GetResponse>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	210c      	movs	r1, #12
 8008bde:	4618      	mov	r0, r3
 8008be0:	f003 fad3 	bl	800c18a <SDMMC_GetResponse>
 8008be4:	4602      	mov	r2, r0
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2104      	movs	r1, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f003 faca 	bl	800c18a <SDMMC_GetResponse>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	0d1a      	lsrs	r2, r3, #20
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bfe:	f107 0310 	add.w	r3, r7, #16
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fc73 	bl	80084f0 <HAL_SD_GetCardCSD>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c14:	e012      	b.n	8008c3c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1e:	041b      	lsls	r3, r3, #16
 8008c20:	f04f 0400 	mov.w	r4, #0
 8008c24:	461a      	mov	r2, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	4608      	mov	r0, r1
 8008c2a:	f003 fb10 	bl	800c24e <SDMMC_CmdSelDesel>
 8008c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <SD_InitCard+0x172>
  {
    return errorstate;
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	e000      	b.n	8008c3c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3744      	adds	r7, #68	; 0x44
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd90      	pop	{r4, r7, pc}

08008c44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	2300      	movs	r3, #0
 8008c56:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008c58:	f7f9 fb64 	bl	8002324 <HAL_GetTick>
 8008c5c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f003 fb17 	bl	800c296 <SDMMC_CmdGoIdleState>
 8008c68:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <SD_PowerON+0x30>
  {
    return errorstate;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	e0ee      	b.n	8008e52 <SD_PowerON+0x20e>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f003 fb2a 	bl	800c2d2 <SDMMC_CmdOperCond>
 8008c7e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f003 fb00 	bl	800c296 <SDMMC_CmdGoIdleState>
 8008c96:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d004      	beq.n	8008ca8 <SD_PowerON+0x64>
    {
      return errorstate;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	e0d7      	b.n	8008e52 <SD_PowerON+0x20e>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d137      	bne.n	8008d20 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f003 fb2b 	bl	800c312 <SDMMC_CmdAppCommand>
 8008cbc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02d      	beq.n	8008d20 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cc8:	e0c3      	b.n	8008e52 <SD_PowerON+0x20e>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f003 fb1e 	bl	800c312 <SDMMC_CmdAppCommand>
 8008cd6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e0b7      	b.n	8008e52 <SD_PowerON+0x20e>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	495d      	ldr	r1, [pc, #372]	; (8008e5c <SD_PowerON+0x218>)
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f003 fb35 	bl	800c358 <SDMMC_CmdAppOperCommand>
 8008cee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cfa:	e0aa      	b.n	8008e52 <SD_PowerON+0x20e>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f003 fa41 	bl	800c18a <SDMMC_GetResponse>
 8008d08:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	0fdb      	lsrs	r3, r3, #31
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <SD_PowerON+0xd2>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <SD_PowerON+0xd4>
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]

    count++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d802      	bhi.n	8008d30 <SD_PowerON+0xec>
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0cc      	beq.n	8008cca <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d902      	bls.n	8008d40 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d3e:	e088      	b.n	8008e52 <SD_PowerON+0x20e>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8082 	beq.w	8008e50 <SD_PowerON+0x20c>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d17a      	bne.n	8008e50 <SD_PowerON+0x20c>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d075      	beq.n	8008e50 <SD_PowerON+0x20c>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d6a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0208 	orr.w	r2, r2, #8
 8008d7a:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f003 fbf4 	bl	800c56e <SDMMC_CmdVoltageSwitch>
 8008d86:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <SD_PowerON+0x164>
        {
          return errorstate;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	e05f      	b.n	8008e52 <SD_PowerON+0x20e>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d92:	f7f9 fac7 	bl	8002324 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d102      	bne.n	8008da8 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008da2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008da6:	e054      	b.n	8008e52 <SD_PowerON+0x20e>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008db6:	d1ec      	bne.n	8008d92 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd0:	d002      	beq.n	8008dd8 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dd6:	e03c      	b.n	8008e52 <SD_PowerON+0x20e>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7ff fb7d 	bl	80084d8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0204 	orr.w	r2, r2, #4
 8008dec:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008dee:	e00a      	b.n	8008e06 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008df0:	f7f9 fa98 	bl	8002324 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d102      	bne.n	8008e06 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e04:	e025      	b.n	8008e52 <SD_PowerON+0x20e>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e14:	d1ec      	bne.n	8008df0 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2e:	d102      	bne.n	8008e36 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e34:	e00d      	b.n	8008e52 <SD_PowerON+0x20e>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2213      	movs	r2, #19
 8008e3c:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	c1100000 	.word	0xc1100000

08008e60 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08c      	sub	sp, #48	; 0x30
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e6a:	f7f9 fa5b 	bl	8002324 <HAL_GetTick>
 8008e6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f003 f985 	bl	800c18a <SDMMC_GetResponse>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e8a:	d102      	bne.n	8008e92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e90:	e0b0      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2140      	movs	r1, #64	; 0x40
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f003 f9b5 	bl	800c208 <SDMMC_CmdBlockLength>
 8008e9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	e0a0      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eba:	041b      	lsls	r3, r3, #16
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f003 fa27 	bl	800c312 <SDMMC_CmdAppCommand>
 8008ec4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	e08d      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8008edc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008ede:	2340      	movs	r3, #64	; 0x40
 8008ee0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008ee2:	2360      	movs	r3, #96	; 0x60
 8008ee4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f107 0208 	add.w	r2, r7, #8
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f003 f957 	bl	800c1b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f003 fb0f 	bl	800c52a <SDMMC_CmdStatusRegister>
 8008f0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d02b      	beq.n	8008f6c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	e069      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d013      	beq.n	8008f56 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f32:	e00d      	b.n	8008f50 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f003 f8c3 	bl	800c0c4 <SDMMC_ReadFIFO>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	601a      	str	r2, [r3, #0]
        pData++;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	3304      	adds	r3, #4
 8008f48:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	2b07      	cmp	r3, #7
 8008f54:	d9ee      	bls.n	8008f34 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f56:	f7f9 f9e5 	bl	8002324 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d102      	bne.n	8008f6c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f6a:	e043      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0d2      	beq.n	8008f20 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f88:	2308      	movs	r3, #8
 8008f8a:	e033      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e02a      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d017      	beq.n	8008fdc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008fac:	2320      	movs	r3, #32
 8008fae:	e021      	b.n	8008ff4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f003 f885 	bl	800c0c4 <SDMMC_ReadFIFO>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	601a      	str	r2, [r3, #0]
    pData++;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fc6:	f7f9 f9ad 	bl	8002324 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d102      	bne.n	8008fdc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fda:	e00b      	b.n	8008ff4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e2      	bne.n	8008fb0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a03      	ldr	r2, [pc, #12]	; (8008ffc <SD_SendSDStatus+0x19c>)
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	18000f3a 	.word	0x18000f3a

08009000 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d102      	bne.n	8009016 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009014:	e018      	b.n	8009048 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901e:	041b      	lsls	r3, r3, #16
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f003 fa5e 	bl	800c4e4 <SDMMC_CmdSendStatus>
 8009028:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e009      	b.n	8009048 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f003 f8a5 	bl	800c18a <SDMMC_GetResponse>
 8009040:	4602      	mov	r2, r0
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f003 f88f 	bl	800c18a <SDMMC_GetResponse>
 800906c:	4603      	mov	r3, r0
 800906e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009076:	d102      	bne.n	800907e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800907c:	e02f      	b.n	80090de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f879 	bl	800917c <SD_FindSCR>
 800908a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	e023      	b.n	80090de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01c      	beq.n	80090da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f003 f930 	bl	800c312 <SDMMC_CmdAppCommand>
 80090b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	e00f      	b.n	80090de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2102      	movs	r1, #2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f003 f967 	bl	800c398 <SDMMC_CmdBusWidth>
 80090ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	e003      	b.n	80090de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e001      	b.n	80090de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	2300      	movs	r3, #0
 80090f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f003 f844 	bl	800c18a <SDMMC_GetResponse>
 8009102:	4603      	mov	r3, r0
 8009104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800910c:	d102      	bne.n	8009114 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800910e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009112:	e02f      	b.n	8009174 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f82e 	bl	800917c <SD_FindSCR>
 8009120:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	e023      	b.n	8009174 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01c      	beq.n	8009170 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f003 f8e5 	bl	800c312 <SDMMC_CmdAppCommand>
 8009148:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	e00f      	b.n	8009174 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f003 f91c 	bl	800c398 <SDMMC_CmdBusWidth>
 8009160:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	e003      	b.n	8009174 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800916c:	2300      	movs	r3, #0
 800916e:	e001      	b.n	8009174 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009170:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08e      	sub	sp, #56	; 0x38
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009186:	f7f9 f8cd 	bl	8002324 <HAL_GetTick>
 800918a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009190:	2300      	movs	r3, #0
 8009192:	60bb      	str	r3, [r7, #8]
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2108      	movs	r1, #8
 80091a2:	4618      	mov	r0, r3
 80091a4:	f003 f830 	bl	800c208 <SDMMC_CmdBlockLength>
 80091a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	e0ad      	b.n	8009310 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f003 f8a6 	bl	800c312 <SDMMC_CmdAppCommand>
 80091c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	e09e      	b.n	8009310 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091d8:	2308      	movs	r3, #8
 80091da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091dc:	2330      	movs	r3, #48	; 0x30
 80091de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091e0:	2302      	movs	r3, #2
 80091e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f107 0210 	add.w	r2, r7, #16
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f002 ffda 	bl	800c1b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f003 f8ec 	bl	800c3de <SDMMC_CmdSendSCR>
 8009206:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	2b00      	cmp	r3, #0
 800920c:	d027      	beq.n	800925e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	e07e      	b.n	8009310 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d113      	bne.n	8009248 <SD_FindSCR+0xcc>
 8009220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009222:	2b00      	cmp	r3, #0
 8009224:	d110      	bne.n	8009248 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f002 ff4a 	bl	800c0c4 <SDMMC_ReadFIFO>
 8009230:	4603      	mov	r3, r0
 8009232:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f002 ff43 	bl	800c0c4 <SDMMC_ReadFIFO>
 800923e:	4603      	mov	r3, r0
 8009240:	60fb      	str	r3, [r7, #12]
      index++;
 8009242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009244:	3301      	adds	r3, #1
 8009246:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009248:	f7f9 f86c 	bl	8002324 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d102      	bne.n	800925e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800925c:	e058      	b.n	8009310 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009264:	f240 532a 	movw	r3, #1322	; 0x52a
 8009268:	4013      	ands	r3, r2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0d1      	beq.n	8009212 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009284:	2308      	movs	r3, #8
 8009286:	e043      	b.n	8009310 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2202      	movs	r2, #2
 800929c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800929e:	2302      	movs	r3, #2
 80092a0:	e036      	b.n	8009310 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2220      	movs	r2, #32
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092b8:	2320      	movs	r3, #32
 80092ba:	e029      	b.n	8009310 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a15      	ldr	r2, [pc, #84]	; (8009318 <SD_FindSCR+0x19c>)
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	061a      	lsls	r2, r3, #24
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	0e1b      	lsrs	r3, r3, #24
 80092e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	601a      	str	r2, [r3, #0]
    scr++;
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	3304      	adds	r3, #4
 80092ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	061a      	lsls	r2, r3, #24
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	0a1b      	lsrs	r3, r3, #8
 80092fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009302:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	0e1b      	lsrs	r3, r3, #24
 8009308:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3738      	adds	r7, #56	; 0x38
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	18000f3a 	.word	0x18000f3a

0800931c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e02b      	b.n	8009388 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7f8 fe29 	bl	8001f9c <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2202      	movs	r2, #2
 800934e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3304      	adds	r3, #4
 800935a:	4619      	mov	r1, r3
 800935c:	4610      	mov	r0, r2
 800935e:	f002 fdc1 	bl	800bee4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	461a      	mov	r2, r3
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	f002 fe15 	bl	800bf9c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <HAL_SDRAM_Init+0x74>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a06      	ldr	r2, [pc, #24]	; (8009390 <HAL_SDRAM_Init+0x74>)
 8009378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800937c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	52004000 	.word	0x52004000

08009394 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e03e      	b.n	8009428 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7f8 fde2 	bl	8001f88 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3308      	adds	r3, #8
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f002 fc88 	bl	800bce4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	461a      	mov	r2, r3
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	f002 fcf8 	bl	800bdd4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6858      	ldr	r0, [r3, #4]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	f002 fd3f 	bl	800be74 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	6892      	ldr	r2, [r2, #8]
 80093fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	6892      	ldr	r2, [r2, #8]
 800940a:	f041 0101 	orr.w	r1, r1, #1
 800940e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009412:	4b07      	ldr	r3, [pc, #28]	; (8009430 <HAL_SRAM_Init+0x9c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a06      	ldr	r2, [pc, #24]	; (8009430 <HAL_SRAM_Init+0x9c>)
 8009418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800941c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	52004000 	.word	0x52004000

08009434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e042      	b.n	80094cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 fb95 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2224      	movs	r2, #36	; 0x24
 8009462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f82e 	bl	80094d8 <UART_SetConfig>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e022      	b.n	80094cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f002 f9a0 	bl	800b7d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f002 fa27 	bl	800b918 <UART_CheckIdleState>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	0000      	movs	r0, r0
	...

080094d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80094dc:	b090      	sub	sp, #64	; 0x40
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	4313      	orrs	r3, r2
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800950e:	4313      	orrs	r3, r2
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4bc1      	ldr	r3, [pc, #772]	; (8009820 <UART_SetConfig+0x348>)
 800951a:	4013      	ands	r3, r2
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009522:	430b      	orrs	r3, r1
 8009524:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4ab7      	ldr	r2, [pc, #732]	; (8009824 <UART_SetConfig+0x34c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d004      	beq.n	8009556 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009552:	4313      	orrs	r3, r2
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	4bb2      	ldr	r3, [pc, #712]	; (8009828 <UART_SetConfig+0x350>)
 800955e:	4013      	ands	r3, r2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009566:	430b      	orrs	r3, r1
 8009568:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	f023 010f 	bic.w	r1, r3, #15
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4aa9      	ldr	r2, [pc, #676]	; (800982c <UART_SetConfig+0x354>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d177      	bne.n	800967a <UART_SetConfig+0x1a2>
 800958a:	4ba9      	ldr	r3, [pc, #676]	; (8009830 <UART_SetConfig+0x358>)
 800958c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009592:	2b28      	cmp	r3, #40	; 0x28
 8009594:	d86c      	bhi.n	8009670 <UART_SetConfig+0x198>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <UART_SetConfig+0xc4>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	08009641 	.word	0x08009641
 80095a0:	08009671 	.word	0x08009671
 80095a4:	08009671 	.word	0x08009671
 80095a8:	08009671 	.word	0x08009671
 80095ac:	08009671 	.word	0x08009671
 80095b0:	08009671 	.word	0x08009671
 80095b4:	08009671 	.word	0x08009671
 80095b8:	08009671 	.word	0x08009671
 80095bc:	08009649 	.word	0x08009649
 80095c0:	08009671 	.word	0x08009671
 80095c4:	08009671 	.word	0x08009671
 80095c8:	08009671 	.word	0x08009671
 80095cc:	08009671 	.word	0x08009671
 80095d0:	08009671 	.word	0x08009671
 80095d4:	08009671 	.word	0x08009671
 80095d8:	08009671 	.word	0x08009671
 80095dc:	08009651 	.word	0x08009651
 80095e0:	08009671 	.word	0x08009671
 80095e4:	08009671 	.word	0x08009671
 80095e8:	08009671 	.word	0x08009671
 80095ec:	08009671 	.word	0x08009671
 80095f0:	08009671 	.word	0x08009671
 80095f4:	08009671 	.word	0x08009671
 80095f8:	08009671 	.word	0x08009671
 80095fc:	08009659 	.word	0x08009659
 8009600:	08009671 	.word	0x08009671
 8009604:	08009671 	.word	0x08009671
 8009608:	08009671 	.word	0x08009671
 800960c:	08009671 	.word	0x08009671
 8009610:	08009671 	.word	0x08009671
 8009614:	08009671 	.word	0x08009671
 8009618:	08009671 	.word	0x08009671
 800961c:	08009661 	.word	0x08009661
 8009620:	08009671 	.word	0x08009671
 8009624:	08009671 	.word	0x08009671
 8009628:	08009671 	.word	0x08009671
 800962c:	08009671 	.word	0x08009671
 8009630:	08009671 	.word	0x08009671
 8009634:	08009671 	.word	0x08009671
 8009638:	08009671 	.word	0x08009671
 800963c:	08009669 	.word	0x08009669
 8009640:	2301      	movs	r3, #1
 8009642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009646:	e233      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800964e:	e22f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009656:	e22b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800965e:	e227      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009660:	2320      	movs	r3, #32
 8009662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009666:	e223      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800966e:	e21f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009670:	2380      	movs	r3, #128	; 0x80
 8009672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009676:	bf00      	nop
 8009678:	e21a      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a6d      	ldr	r2, [pc, #436]	; (8009834 <UART_SetConfig+0x35c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d132      	bne.n	80096ea <UART_SetConfig+0x212>
 8009684:	4b6a      	ldr	r3, [pc, #424]	; (8009830 <UART_SetConfig+0x358>)
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	2b05      	cmp	r3, #5
 800968e:	d827      	bhi.n	80096e0 <UART_SetConfig+0x208>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x1c0>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096b6:	e1fb      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096be:	e1f7      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096c6:	e1f3      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096ce:	e1ef      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096d6:	e1eb      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096de:	e1e7      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096e6:	bf00      	nop
 80096e8:	e1e2      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a52      	ldr	r2, [pc, #328]	; (8009838 <UART_SetConfig+0x360>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d132      	bne.n	800975a <UART_SetConfig+0x282>
 80096f4:	4b4e      	ldr	r3, [pc, #312]	; (8009830 <UART_SetConfig+0x358>)
 80096f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d827      	bhi.n	8009750 <UART_SetConfig+0x278>
 8009700:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <UART_SetConfig+0x230>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2300      	movs	r3, #0
 8009722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009726:	e1c3      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800972e:	e1bf      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009736:	e1bb      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800973e:	e1b7      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009746:	e1b3      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800974e:	e1af      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009756:	bf00      	nop
 8009758:	e1aa      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a37      	ldr	r2, [pc, #220]	; (800983c <UART_SetConfig+0x364>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d132      	bne.n	80097ca <UART_SetConfig+0x2f2>
 8009764:	4b32      	ldr	r3, [pc, #200]	; (8009830 <UART_SetConfig+0x358>)
 8009766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	2b05      	cmp	r3, #5
 800976e:	d827      	bhi.n	80097c0 <UART_SetConfig+0x2e8>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <UART_SetConfig+0x2a0>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	08009791 	.word	0x08009791
 800977c:	08009799 	.word	0x08009799
 8009780:	080097a1 	.word	0x080097a1
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097b1 	.word	0x080097b1
 800978c:	080097b9 	.word	0x080097b9
 8009790:	2300      	movs	r3, #0
 8009792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009796:	e18b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009798:	2304      	movs	r3, #4
 800979a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800979e:	e187      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097a0:	2308      	movs	r3, #8
 80097a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097a6:	e183      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097a8:	2310      	movs	r3, #16
 80097aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ae:	e17f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097b0:	2320      	movs	r3, #32
 80097b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097b6:	e17b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097be:	e177      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097c6:	bf00      	nop
 80097c8:	e172      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1c      	ldr	r2, [pc, #112]	; (8009840 <UART_SetConfig+0x368>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d144      	bne.n	800985e <UART_SetConfig+0x386>
 80097d4:	4b16      	ldr	r3, [pc, #88]	; (8009830 <UART_SetConfig+0x358>)
 80097d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d839      	bhi.n	8009854 <UART_SetConfig+0x37c>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <UART_SetConfig+0x310>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	08009801 	.word	0x08009801
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009811 	.word	0x08009811
 80097f4:	08009819 	.word	0x08009819
 80097f8:	08009845 	.word	0x08009845
 80097fc:	0800984d 	.word	0x0800984d
 8009800:	2300      	movs	r3, #0
 8009802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009806:	e153      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009808:	2304      	movs	r3, #4
 800980a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800980e:	e14f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009810:	2308      	movs	r3, #8
 8009812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009816:	e14b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009818:	2310      	movs	r3, #16
 800981a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800981e:	e147      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009820:	cfff69f3 	.word	0xcfff69f3
 8009824:	58000c00 	.word	0x58000c00
 8009828:	11fff4ff 	.word	0x11fff4ff
 800982c:	40011000 	.word	0x40011000
 8009830:	58024400 	.word	0x58024400
 8009834:	40004400 	.word	0x40004400
 8009838:	40004800 	.word	0x40004800
 800983c:	40004c00 	.word	0x40004c00
 8009840:	40005000 	.word	0x40005000
 8009844:	2320      	movs	r3, #32
 8009846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800984a:	e131      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 800984c:	2340      	movs	r3, #64	; 0x40
 800984e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009852:	e12d      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009854:	2380      	movs	r3, #128	; 0x80
 8009856:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800985a:	bf00      	nop
 800985c:	e128      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4ac3      	ldr	r2, [pc, #780]	; (8009b70 <UART_SetConfig+0x698>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d178      	bne.n	800995a <UART_SetConfig+0x482>
 8009868:	4bc2      	ldr	r3, [pc, #776]	; (8009b74 <UART_SetConfig+0x69c>)
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009870:	2b28      	cmp	r3, #40	; 0x28
 8009872:	d86d      	bhi.n	8009950 <UART_SetConfig+0x478>
 8009874:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x3a4>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	08009921 	.word	0x08009921
 8009880:	08009951 	.word	0x08009951
 8009884:	08009951 	.word	0x08009951
 8009888:	08009951 	.word	0x08009951
 800988c:	08009951 	.word	0x08009951
 8009890:	08009951 	.word	0x08009951
 8009894:	08009951 	.word	0x08009951
 8009898:	08009951 	.word	0x08009951
 800989c:	08009929 	.word	0x08009929
 80098a0:	08009951 	.word	0x08009951
 80098a4:	08009951 	.word	0x08009951
 80098a8:	08009951 	.word	0x08009951
 80098ac:	08009951 	.word	0x08009951
 80098b0:	08009951 	.word	0x08009951
 80098b4:	08009951 	.word	0x08009951
 80098b8:	08009951 	.word	0x08009951
 80098bc:	08009931 	.word	0x08009931
 80098c0:	08009951 	.word	0x08009951
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009951 	.word	0x08009951
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009951 	.word	0x08009951
 80098d4:	08009951 	.word	0x08009951
 80098d8:	08009951 	.word	0x08009951
 80098dc:	08009939 	.word	0x08009939
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009951 	.word	0x08009951
 80098ec:	08009951 	.word	0x08009951
 80098f0:	08009951 	.word	0x08009951
 80098f4:	08009951 	.word	0x08009951
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009941 	.word	0x08009941
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009951 	.word	0x08009951
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009949 	.word	0x08009949
 8009920:	2301      	movs	r3, #1
 8009922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009926:	e0c3      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009928:	2304      	movs	r3, #4
 800992a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800992e:	e0bf      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009930:	2308      	movs	r3, #8
 8009932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009936:	e0bb      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009938:	2310      	movs	r3, #16
 800993a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800993e:	e0b7      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009940:	2320      	movs	r3, #32
 8009942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009946:	e0b3      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800994e:	e0af      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009956:	bf00      	nop
 8009958:	e0aa      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a86      	ldr	r2, [pc, #536]	; (8009b78 <UART_SetConfig+0x6a0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d132      	bne.n	80099ca <UART_SetConfig+0x4f2>
 8009964:	4b83      	ldr	r3, [pc, #524]	; (8009b74 <UART_SetConfig+0x69c>)
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	2b05      	cmp	r3, #5
 800996e:	d827      	bhi.n	80099c0 <UART_SetConfig+0x4e8>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x4a0>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	08009991 	.word	0x08009991
 800997c:	08009999 	.word	0x08009999
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2300      	movs	r3, #0
 8009992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009996:	e08b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800999e:	e087      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099a6:	e083      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ae:	e07f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099b6:	e07b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e077      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	bf00      	nop
 80099c8:	e072      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a6b      	ldr	r2, [pc, #428]	; (8009b7c <UART_SetConfig+0x6a4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d132      	bne.n	8009a3a <UART_SetConfig+0x562>
 80099d4:	4b67      	ldr	r3, [pc, #412]	; (8009b74 <UART_SetConfig+0x69c>)
 80099d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d827      	bhi.n	8009a30 <UART_SetConfig+0x558>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0x510>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a06:	e053      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a0e:	e04f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a16:	e04b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a1e:	e047      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a26:	e043      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e03f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	bf00      	nop
 8009a38:	e03a      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a50      	ldr	r2, [pc, #320]	; (8009b80 <UART_SetConfig+0x6a8>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d132      	bne.n	8009aaa <UART_SetConfig+0x5d2>
 8009a44:	4b4b      	ldr	r3, [pc, #300]	; (8009b74 <UART_SetConfig+0x69c>)
 8009a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d827      	bhi.n	8009aa0 <UART_SetConfig+0x5c8>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x580>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2302      	movs	r3, #2
 8009a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a76:	e01b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a7e:	e017      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a86:	e013      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a8e:	e00f      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a96:	e00b      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e007      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	bf00      	nop
 8009aa8:	e002      	b.n	8009ab0 <UART_SetConfig+0x5d8>
 8009aaa:	2380      	movs	r3, #128	; 0x80
 8009aac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a32      	ldr	r2, [pc, #200]	; (8009b80 <UART_SetConfig+0x6a8>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	f040 86f7 	bne.w	800a8aa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009abc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	f000 80c0 	beq.w	8009c46 <UART_SetConfig+0x76e>
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	dc04      	bgt.n	8009ad4 <UART_SetConfig+0x5fc>
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d00c      	beq.n	8009ae8 <UART_SetConfig+0x610>
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d065      	beq.n	8009b9e <UART_SetConfig+0x6c6>
 8009ad2:	e27a      	b.n	8009fca <UART_SetConfig+0xaf2>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	f000 81b0 	beq.w	8009e3a <UART_SetConfig+0x962>
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	f000 821e 	beq.w	8009f1c <UART_SetConfig+0xa44>
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	f000 8104 	beq.w	8009cee <UART_SetConfig+0x816>
 8009ae6:	e270      	b.n	8009fca <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ae8:	f7fd fbc0 	bl	800726c <HAL_RCCEx_GetD3PCLK1Freq>
 8009aec:	4602      	mov	r2, r0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d04e      	beq.n	8009b94 <UART_SetConfig+0x6bc>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d048      	beq.n	8009b90 <UART_SetConfig+0x6b8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d042      	beq.n	8009b8c <UART_SetConfig+0x6b4>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d03c      	beq.n	8009b88 <UART_SetConfig+0x6b0>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d036      	beq.n	8009b84 <UART_SetConfig+0x6ac>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d026      	beq.n	8009b6c <UART_SetConfig+0x694>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b06      	cmp	r3, #6
 8009b24:	d020      	beq.n	8009b68 <UART_SetConfig+0x690>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b07      	cmp	r3, #7
 8009b2c:	d01a      	beq.n	8009b64 <UART_SetConfig+0x68c>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d014      	beq.n	8009b60 <UART_SetConfig+0x688>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	2b09      	cmp	r3, #9
 8009b3c:	d00e      	beq.n	8009b5c <UART_SetConfig+0x684>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	2b0a      	cmp	r3, #10
 8009b44:	d008      	beq.n	8009b58 <UART_SetConfig+0x680>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2b0b      	cmp	r3, #11
 8009b4c:	d102      	bne.n	8009b54 <UART_SetConfig+0x67c>
 8009b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b52:	e020      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e01e      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b58:	2380      	movs	r3, #128	; 0x80
 8009b5a:	e01c      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	e01a      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b60:	2320      	movs	r3, #32
 8009b62:	e018      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b64:	2310      	movs	r3, #16
 8009b66:	e016      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	e014      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b6c:	230a      	movs	r3, #10
 8009b6e:	e012      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b70:	40011400 	.word	0x40011400
 8009b74:	58024400 	.word	0x58024400
 8009b78:	40007800 	.word	0x40007800
 8009b7c:	40007c00 	.word	0x40007c00
 8009b80:	58000c00 	.word	0x58000c00
 8009b84:	2308      	movs	r3, #8
 8009b86:	e006      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b88:	2306      	movs	r3, #6
 8009b8a:	e004      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b8c:	2304      	movs	r3, #4
 8009b8e:	e002      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e000      	b.n	8009b96 <UART_SetConfig+0x6be>
 8009b94:	2301      	movs	r3, #1
 8009b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b9c:	e219      	b.n	8009fd2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b9e:	f107 0318 	add.w	r3, r7, #24
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fd fb78 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d044      	beq.n	8009c3c <UART_SetConfig+0x764>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d03e      	beq.n	8009c38 <UART_SetConfig+0x760>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d038      	beq.n	8009c34 <UART_SetConfig+0x75c>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d032      	beq.n	8009c30 <UART_SetConfig+0x758>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d02c      	beq.n	8009c2c <UART_SetConfig+0x754>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	d026      	beq.n	8009c28 <UART_SetConfig+0x750>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b06      	cmp	r3, #6
 8009be0:	d020      	beq.n	8009c24 <UART_SetConfig+0x74c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b07      	cmp	r3, #7
 8009be8:	d01a      	beq.n	8009c20 <UART_SetConfig+0x748>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d014      	beq.n	8009c1c <UART_SetConfig+0x744>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d00e      	beq.n	8009c18 <UART_SetConfig+0x740>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b0a      	cmp	r3, #10
 8009c00:	d008      	beq.n	8009c14 <UART_SetConfig+0x73c>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2b0b      	cmp	r3, #11
 8009c08:	d102      	bne.n	8009c10 <UART_SetConfig+0x738>
 8009c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c0e:	e016      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e014      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	e012      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	e010      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c1c:	2320      	movs	r3, #32
 8009c1e:	e00e      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c20:	2310      	movs	r3, #16
 8009c22:	e00c      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c24:	230c      	movs	r3, #12
 8009c26:	e00a      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c28:	230a      	movs	r3, #10
 8009c2a:	e008      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	e006      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c30:	2306      	movs	r3, #6
 8009c32:	e004      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c34:	2304      	movs	r3, #4
 8009c36:	e002      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e000      	b.n	8009c3e <UART_SetConfig+0x766>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c44:	e1c5      	b.n	8009fd2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c46:	f107 030c 	add.w	r3, r7, #12
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fc70 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d044      	beq.n	8009ce4 <UART_SetConfig+0x80c>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d03e      	beq.n	8009ce0 <UART_SetConfig+0x808>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d038      	beq.n	8009cdc <UART_SetConfig+0x804>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d032      	beq.n	8009cd8 <UART_SetConfig+0x800>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d02c      	beq.n	8009cd4 <UART_SetConfig+0x7fc>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d026      	beq.n	8009cd0 <UART_SetConfig+0x7f8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b06      	cmp	r3, #6
 8009c88:	d020      	beq.n	8009ccc <UART_SetConfig+0x7f4>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b07      	cmp	r3, #7
 8009c90:	d01a      	beq.n	8009cc8 <UART_SetConfig+0x7f0>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d014      	beq.n	8009cc4 <UART_SetConfig+0x7ec>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	d00e      	beq.n	8009cc0 <UART_SetConfig+0x7e8>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b0a      	cmp	r3, #10
 8009ca8:	d008      	beq.n	8009cbc <UART_SetConfig+0x7e4>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b0b      	cmp	r3, #11
 8009cb0:	d102      	bne.n	8009cb8 <UART_SetConfig+0x7e0>
 8009cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb6:	e016      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e014      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	e012      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	e010      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	e00e      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	e00c      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	e00a      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cd0:	230a      	movs	r3, #10
 8009cd2:	e008      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	e006      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cd8:	2306      	movs	r3, #6
 8009cda:	e004      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009cdc:	2304      	movs	r3, #4
 8009cde:	e002      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e000      	b.n	8009ce6 <UART_SetConfig+0x80e>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cec:	e171      	b.n	8009fd2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cee:	4b7a      	ldr	r3, [pc, #488]	; (8009ed8 <UART_SetConfig+0xa00>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d054      	beq.n	8009da4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009cfa:	4b77      	ldr	r3, [pc, #476]	; (8009ed8 <UART_SetConfig+0xa00>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	08db      	lsrs	r3, r3, #3
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	4a75      	ldr	r2, [pc, #468]	; (8009edc <UART_SetConfig+0xa04>)
 8009d06:	40da      	lsrs	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d044      	beq.n	8009d9a <UART_SetConfig+0x8c2>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d03e      	beq.n	8009d96 <UART_SetConfig+0x8be>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d038      	beq.n	8009d92 <UART_SetConfig+0x8ba>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d032      	beq.n	8009d8e <UART_SetConfig+0x8b6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d02c      	beq.n	8009d8a <UART_SetConfig+0x8b2>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	2b05      	cmp	r3, #5
 8009d36:	d026      	beq.n	8009d86 <UART_SetConfig+0x8ae>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	2b06      	cmp	r3, #6
 8009d3e:	d020      	beq.n	8009d82 <UART_SetConfig+0x8aa>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2b07      	cmp	r3, #7
 8009d46:	d01a      	beq.n	8009d7e <UART_SetConfig+0x8a6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d014      	beq.n	8009d7a <UART_SetConfig+0x8a2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	d00e      	beq.n	8009d76 <UART_SetConfig+0x89e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5c:	2b0a      	cmp	r3, #10
 8009d5e:	d008      	beq.n	8009d72 <UART_SetConfig+0x89a>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	2b0b      	cmp	r3, #11
 8009d66:	d102      	bne.n	8009d6e <UART_SetConfig+0x896>
 8009d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d6c:	e016      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e014      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d72:	2380      	movs	r3, #128	; 0x80
 8009d74:	e012      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	e010      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d7a:	2320      	movs	r3, #32
 8009d7c:	e00e      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d7e:	2310      	movs	r3, #16
 8009d80:	e00c      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d82:	230c      	movs	r3, #12
 8009d84:	e00a      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d86:	230a      	movs	r3, #10
 8009d88:	e008      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	e006      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d8e:	2306      	movs	r3, #6
 8009d90:	e004      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d92:	2304      	movs	r3, #4
 8009d94:	e002      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d96:	2302      	movs	r3, #2
 8009d98:	e000      	b.n	8009d9c <UART_SetConfig+0x8c4>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009da2:	e116      	b.n	8009fd2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d043      	beq.n	8009e34 <UART_SetConfig+0x95c>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d03d      	beq.n	8009e30 <UART_SetConfig+0x958>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d037      	beq.n	8009e2c <UART_SetConfig+0x954>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b03      	cmp	r3, #3
 8009dc2:	d031      	beq.n	8009e28 <UART_SetConfig+0x950>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d02b      	beq.n	8009e24 <UART_SetConfig+0x94c>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	d025      	beq.n	8009e20 <UART_SetConfig+0x948>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	2b06      	cmp	r3, #6
 8009dda:	d01f      	beq.n	8009e1c <UART_SetConfig+0x944>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	2b07      	cmp	r3, #7
 8009de2:	d019      	beq.n	8009e18 <UART_SetConfig+0x940>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d013      	beq.n	8009e14 <UART_SetConfig+0x93c>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d00d      	beq.n	8009e10 <UART_SetConfig+0x938>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	2b0a      	cmp	r3, #10
 8009dfa:	d007      	beq.n	8009e0c <UART_SetConfig+0x934>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b0b      	cmp	r3, #11
 8009e02:	d101      	bne.n	8009e08 <UART_SetConfig+0x930>
 8009e04:	4b36      	ldr	r3, [pc, #216]	; (8009ee0 <UART_SetConfig+0xa08>)
 8009e06:	e016      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e08:	4b34      	ldr	r3, [pc, #208]	; (8009edc <UART_SetConfig+0xa04>)
 8009e0a:	e014      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e0c:	4b35      	ldr	r3, [pc, #212]	; (8009ee4 <UART_SetConfig+0xa0c>)
 8009e0e:	e012      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e10:	4b35      	ldr	r3, [pc, #212]	; (8009ee8 <UART_SetConfig+0xa10>)
 8009e12:	e010      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e14:	4b35      	ldr	r3, [pc, #212]	; (8009eec <UART_SetConfig+0xa14>)
 8009e16:	e00e      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e18:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <UART_SetConfig+0xa18>)
 8009e1a:	e00c      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e1c:	4b35      	ldr	r3, [pc, #212]	; (8009ef4 <UART_SetConfig+0xa1c>)
 8009e1e:	e00a      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e20:	4b35      	ldr	r3, [pc, #212]	; (8009ef8 <UART_SetConfig+0xa20>)
 8009e22:	e008      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e24:	4b35      	ldr	r3, [pc, #212]	; (8009efc <UART_SetConfig+0xa24>)
 8009e26:	e006      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e28:	4b35      	ldr	r3, [pc, #212]	; (8009f00 <UART_SetConfig+0xa28>)
 8009e2a:	e004      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <UART_SetConfig+0xa2c>)
 8009e2e:	e002      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e30:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <UART_SetConfig+0xa30>)
 8009e32:	e000      	b.n	8009e36 <UART_SetConfig+0x95e>
 8009e34:	4b29      	ldr	r3, [pc, #164]	; (8009edc <UART_SetConfig+0xa04>)
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e38:	e0cb      	b.n	8009fd2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d046      	beq.n	8009ed0 <UART_SetConfig+0x9f8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d040      	beq.n	8009ecc <UART_SetConfig+0x9f4>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d03a      	beq.n	8009ec8 <UART_SetConfig+0x9f0>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d034      	beq.n	8009ec4 <UART_SetConfig+0x9ec>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d02e      	beq.n	8009ec0 <UART_SetConfig+0x9e8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d028      	beq.n	8009ebc <UART_SetConfig+0x9e4>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b06      	cmp	r3, #6
 8009e70:	d022      	beq.n	8009eb8 <UART_SetConfig+0x9e0>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b07      	cmp	r3, #7
 8009e78:	d01c      	beq.n	8009eb4 <UART_SetConfig+0x9dc>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b08      	cmp	r3, #8
 8009e80:	d016      	beq.n	8009eb0 <UART_SetConfig+0x9d8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b09      	cmp	r3, #9
 8009e88:	d00f      	beq.n	8009eaa <UART_SetConfig+0x9d2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b0a      	cmp	r3, #10
 8009e90:	d008      	beq.n	8009ea4 <UART_SetConfig+0x9cc>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2b0b      	cmp	r3, #11
 8009e98:	d102      	bne.n	8009ea0 <UART_SetConfig+0x9c8>
 8009e9a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009e9e:	e018      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ea0:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <UART_SetConfig+0xa18>)
 8009ea2:	e016      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ea4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009ea8:	e013      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009eaa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009eae:	e010      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009eb0:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <UART_SetConfig+0xa34>)
 8009eb2:	e00e      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <UART_SetConfig+0xa08>)
 8009eb6:	e00c      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009eb8:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <UART_SetConfig+0xa38>)
 8009eba:	e00a      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ebc:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <UART_SetConfig+0xa3c>)
 8009ebe:	e008      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ec0:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <UART_SetConfig+0xa0c>)
 8009ec2:	e006      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ec4:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <UART_SetConfig+0xa40>)
 8009ec6:	e004      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ec8:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <UART_SetConfig+0xa10>)
 8009eca:	e002      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ecc:	4b07      	ldr	r3, [pc, #28]	; (8009eec <UART_SetConfig+0xa14>)
 8009ece:	e000      	b.n	8009ed2 <UART_SetConfig+0x9fa>
 8009ed0:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <UART_SetConfig+0xa18>)
 8009ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ed4:	e07d      	b.n	8009fd2 <UART_SetConfig+0xafa>
 8009ed6:	bf00      	nop
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	03d09000 	.word	0x03d09000
 8009ee0:	0003d090 	.word	0x0003d090
 8009ee4:	0007a120 	.word	0x0007a120
 8009ee8:	000f4240 	.word	0x000f4240
 8009eec:	001e8480 	.word	0x001e8480
 8009ef0:	003d0900 	.word	0x003d0900
 8009ef4:	00516155 	.word	0x00516155
 8009ef8:	0061a800 	.word	0x0061a800
 8009efc:	007a1200 	.word	0x007a1200
 8009f00:	00a2c2aa 	.word	0x00a2c2aa
 8009f04:	00f42400 	.word	0x00f42400
 8009f08:	01e84800 	.word	0x01e84800
 8009f0c:	0001e848 	.word	0x0001e848
 8009f10:	00051615 	.word	0x00051615
 8009f14:	00061a80 	.word	0x00061a80
 8009f18:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d04e      	beq.n	8009fc2 <UART_SetConfig+0xaea>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d047      	beq.n	8009fbc <UART_SetConfig+0xae4>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d040      	beq.n	8009fb6 <UART_SetConfig+0xade>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d039      	beq.n	8009fb0 <UART_SetConfig+0xad8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d032      	beq.n	8009faa <UART_SetConfig+0xad2>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d02b      	beq.n	8009fa4 <UART_SetConfig+0xacc>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b06      	cmp	r3, #6
 8009f52:	d024      	beq.n	8009f9e <UART_SetConfig+0xac6>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	d01d      	beq.n	8009f98 <UART_SetConfig+0xac0>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d016      	beq.n	8009f92 <UART_SetConfig+0xaba>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b09      	cmp	r3, #9
 8009f6a:	d00f      	beq.n	8009f8c <UART_SetConfig+0xab4>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b0a      	cmp	r3, #10
 8009f72:	d008      	beq.n	8009f86 <UART_SetConfig+0xaae>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	2b0b      	cmp	r3, #11
 8009f7a:	d101      	bne.n	8009f80 <UART_SetConfig+0xaa8>
 8009f7c:	2380      	movs	r3, #128	; 0x80
 8009f7e:	e022      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f84:	e01f      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f8a:	e01c      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f90:	e019      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f96:	e016      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f9c:	e013      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009f9e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009fa2:	e010      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009fa4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009fa8:	e00d      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fae:	e00a      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009fb0:	f241 5355 	movw	r3, #5461	; 0x1555
 8009fb4:	e007      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fba:	e004      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fc0:	e001      	b.n	8009fc6 <UART_SetConfig+0xaee>
 8009fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fc8:	e003      	b.n	8009fd2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009fd0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f001 83e8 	beq.w	800b7aa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d305      	bcc.n	8009ff6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d904      	bls.n	800a000 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffc:	f001 bbd5 	b.w	800b7aa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a000:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a004:	2b08      	cmp	r3, #8
 800a006:	f000 8154 	beq.w	800a2b2 <UART_SetConfig+0xdda>
 800a00a:	2b08      	cmp	r3, #8
 800a00c:	dc06      	bgt.n	800a01c <UART_SetConfig+0xb44>
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d00f      	beq.n	800a032 <UART_SetConfig+0xb5a>
 800a012:	2b04      	cmp	r3, #4
 800a014:	f000 80ac 	beq.w	800a170 <UART_SetConfig+0xc98>
 800a018:	f000 bc30 	b.w	800a87c <UART_SetConfig+0x13a4>
 800a01c:	2b20      	cmp	r3, #32
 800a01e:	f000 832d 	beq.w	800a67c <UART_SetConfig+0x11a4>
 800a022:	2b40      	cmp	r3, #64	; 0x40
 800a024:	f000 83a5 	beq.w	800a772 <UART_SetConfig+0x129a>
 800a028:	2b10      	cmp	r3, #16
 800a02a:	f000 81e3 	beq.w	800a3f4 <UART_SetConfig+0xf1c>
 800a02e:	f000 bc25 	b.w	800a87c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a032:	f7fd f91b 	bl	800726c <HAL_RCCEx_GetD3PCLK1Freq>
 800a036:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	4618      	mov	r0, r3
 800a03c:	f04f 0100 	mov.w	r1, #0
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d067      	beq.n	800a118 <UART_SetConfig+0xc40>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d05e      	beq.n	800a10e <UART_SetConfig+0xc36>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b02      	cmp	r3, #2
 800a056:	d055      	beq.n	800a104 <UART_SetConfig+0xc2c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d04c      	beq.n	800a0fa <UART_SetConfig+0xc22>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b04      	cmp	r3, #4
 800a066:	d043      	beq.n	800a0f0 <UART_SetConfig+0xc18>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	d03a      	beq.n	800a0e6 <UART_SetConfig+0xc0e>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b06      	cmp	r3, #6
 800a076:	d031      	beq.n	800a0dc <UART_SetConfig+0xc04>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b07      	cmp	r3, #7
 800a07e:	d028      	beq.n	800a0d2 <UART_SetConfig+0xbfa>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b08      	cmp	r3, #8
 800a086:	d01f      	beq.n	800a0c8 <UART_SetConfig+0xbf0>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d016      	beq.n	800a0be <UART_SetConfig+0xbe6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b0a      	cmp	r3, #10
 800a096:	d00d      	beq.n	800a0b4 <UART_SetConfig+0xbdc>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b0b      	cmp	r3, #11
 800a09e:	d104      	bne.n	800a0aa <UART_SetConfig+0xbd2>
 800a0a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0a4:	f04f 0400 	mov.w	r4, #0
 800a0a8:	e03a      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0aa:	f04f 0301 	mov.w	r3, #1
 800a0ae:	f04f 0400 	mov.w	r4, #0
 800a0b2:	e035      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a0b8:	f04f 0400 	mov.w	r4, #0
 800a0bc:	e030      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0be:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a0c2:	f04f 0400 	mov.w	r4, #0
 800a0c6:	e02b      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0c8:	f04f 0320 	mov.w	r3, #32
 800a0cc:	f04f 0400 	mov.w	r4, #0
 800a0d0:	e026      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0d2:	f04f 0310 	mov.w	r3, #16
 800a0d6:	f04f 0400 	mov.w	r4, #0
 800a0da:	e021      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0dc:	f04f 030c 	mov.w	r3, #12
 800a0e0:	f04f 0400 	mov.w	r4, #0
 800a0e4:	e01c      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0e6:	f04f 030a 	mov.w	r3, #10
 800a0ea:	f04f 0400 	mov.w	r4, #0
 800a0ee:	e017      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0f0:	f04f 0308 	mov.w	r3, #8
 800a0f4:	f04f 0400 	mov.w	r4, #0
 800a0f8:	e012      	b.n	800a120 <UART_SetConfig+0xc48>
 800a0fa:	f04f 0306 	mov.w	r3, #6
 800a0fe:	f04f 0400 	mov.w	r4, #0
 800a102:	e00d      	b.n	800a120 <UART_SetConfig+0xc48>
 800a104:	f04f 0304 	mov.w	r3, #4
 800a108:	f04f 0400 	mov.w	r4, #0
 800a10c:	e008      	b.n	800a120 <UART_SetConfig+0xc48>
 800a10e:	f04f 0302 	mov.w	r3, #2
 800a112:	f04f 0400 	mov.w	r4, #0
 800a116:	e003      	b.n	800a120 <UART_SetConfig+0xc48>
 800a118:	f04f 0301 	mov.w	r3, #1
 800a11c:	f04f 0400 	mov.w	r4, #0
 800a120:	461a      	mov	r2, r3
 800a122:	4623      	mov	r3, r4
 800a124:	f7f6 f8d8 	bl	80002d8 <__aeabi_uldivmod>
 800a128:	4603      	mov	r3, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	4619      	mov	r1, r3
 800a12e:	4622      	mov	r2, r4
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	f04f 0400 	mov.w	r4, #0
 800a138:	0214      	lsls	r4, r2, #8
 800a13a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a13e:	020b      	lsls	r3, r1, #8
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	6852      	ldr	r2, [r2, #4]
 800a144:	0852      	lsrs	r2, r2, #1
 800a146:	4611      	mov	r1, r2
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	eb13 0b01 	adds.w	fp, r3, r1
 800a150:	eb44 0c02 	adc.w	ip, r4, r2
 800a154:	4658      	mov	r0, fp
 800a156:	4661      	mov	r1, ip
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f04f 0400 	mov.w	r4, #0
 800a160:	461a      	mov	r2, r3
 800a162:	4623      	mov	r3, r4
 800a164:	f7f6 f8b8 	bl	80002d8 <__aeabi_uldivmod>
 800a168:	4603      	mov	r3, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a16e:	e389      	b.n	800a884 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a170:	f107 0318 	add.w	r3, r7, #24
 800a174:	4618      	mov	r0, r3
 800a176:	f7fd f88f 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f04f 0100 	mov.w	r1, #0
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d067      	beq.n	800a25a <UART_SetConfig+0xd82>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d05e      	beq.n	800a250 <UART_SetConfig+0xd78>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b02      	cmp	r3, #2
 800a198:	d055      	beq.n	800a246 <UART_SetConfig+0xd6e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d04c      	beq.n	800a23c <UART_SetConfig+0xd64>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d043      	beq.n	800a232 <UART_SetConfig+0xd5a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b05      	cmp	r3, #5
 800a1b0:	d03a      	beq.n	800a228 <UART_SetConfig+0xd50>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b06      	cmp	r3, #6
 800a1b8:	d031      	beq.n	800a21e <UART_SetConfig+0xd46>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b07      	cmp	r3, #7
 800a1c0:	d028      	beq.n	800a214 <UART_SetConfig+0xd3c>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d01f      	beq.n	800a20a <UART_SetConfig+0xd32>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b09      	cmp	r3, #9
 800a1d0:	d016      	beq.n	800a200 <UART_SetConfig+0xd28>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b0a      	cmp	r3, #10
 800a1d8:	d00d      	beq.n	800a1f6 <UART_SetConfig+0xd1e>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b0b      	cmp	r3, #11
 800a1e0:	d104      	bne.n	800a1ec <UART_SetConfig+0xd14>
 800a1e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1e6:	f04f 0400 	mov.w	r4, #0
 800a1ea:	e03a      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a1ec:	f04f 0301 	mov.w	r3, #1
 800a1f0:	f04f 0400 	mov.w	r4, #0
 800a1f4:	e035      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a1f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a1fa:	f04f 0400 	mov.w	r4, #0
 800a1fe:	e030      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a200:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a204:	f04f 0400 	mov.w	r4, #0
 800a208:	e02b      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a20a:	f04f 0320 	mov.w	r3, #32
 800a20e:	f04f 0400 	mov.w	r4, #0
 800a212:	e026      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a214:	f04f 0310 	mov.w	r3, #16
 800a218:	f04f 0400 	mov.w	r4, #0
 800a21c:	e021      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a21e:	f04f 030c 	mov.w	r3, #12
 800a222:	f04f 0400 	mov.w	r4, #0
 800a226:	e01c      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a228:	f04f 030a 	mov.w	r3, #10
 800a22c:	f04f 0400 	mov.w	r4, #0
 800a230:	e017      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a232:	f04f 0308 	mov.w	r3, #8
 800a236:	f04f 0400 	mov.w	r4, #0
 800a23a:	e012      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a23c:	f04f 0306 	mov.w	r3, #6
 800a240:	f04f 0400 	mov.w	r4, #0
 800a244:	e00d      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a246:	f04f 0304 	mov.w	r3, #4
 800a24a:	f04f 0400 	mov.w	r4, #0
 800a24e:	e008      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a250:	f04f 0302 	mov.w	r3, #2
 800a254:	f04f 0400 	mov.w	r4, #0
 800a258:	e003      	b.n	800a262 <UART_SetConfig+0xd8a>
 800a25a:	f04f 0301 	mov.w	r3, #1
 800a25e:	f04f 0400 	mov.w	r4, #0
 800a262:	461a      	mov	r2, r3
 800a264:	4623      	mov	r3, r4
 800a266:	f7f6 f837 	bl	80002d8 <__aeabi_uldivmod>
 800a26a:	4603      	mov	r3, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	4619      	mov	r1, r3
 800a270:	4622      	mov	r2, r4
 800a272:	f04f 0300 	mov.w	r3, #0
 800a276:	f04f 0400 	mov.w	r4, #0
 800a27a:	0214      	lsls	r4, r2, #8
 800a27c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a280:	020b      	lsls	r3, r1, #8
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6852      	ldr	r2, [r2, #4]
 800a286:	0852      	lsrs	r2, r2, #1
 800a288:	4611      	mov	r1, r2
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	eb13 0b01 	adds.w	fp, r3, r1
 800a292:	eb44 0c02 	adc.w	ip, r4, r2
 800a296:	4658      	mov	r0, fp
 800a298:	4661      	mov	r1, ip
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f04f 0400 	mov.w	r4, #0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	f7f6 f817 	bl	80002d8 <__aeabi_uldivmod>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2b0:	e2e8      	b.n	800a884 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b2:	f107 030c 	add.w	r3, r7, #12
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd f93a 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f04f 0100 	mov.w	r1, #0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d067      	beq.n	800a39c <UART_SetConfig+0xec4>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d05e      	beq.n	800a392 <UART_SetConfig+0xeba>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d055      	beq.n	800a388 <UART_SetConfig+0xeb0>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d04c      	beq.n	800a37e <UART_SetConfig+0xea6>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d043      	beq.n	800a374 <UART_SetConfig+0xe9c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2b05      	cmp	r3, #5
 800a2f2:	d03a      	beq.n	800a36a <UART_SetConfig+0xe92>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	2b06      	cmp	r3, #6
 800a2fa:	d031      	beq.n	800a360 <UART_SetConfig+0xe88>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b07      	cmp	r3, #7
 800a302:	d028      	beq.n	800a356 <UART_SetConfig+0xe7e>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d01f      	beq.n	800a34c <UART_SetConfig+0xe74>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b09      	cmp	r3, #9
 800a312:	d016      	beq.n	800a342 <UART_SetConfig+0xe6a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b0a      	cmp	r3, #10
 800a31a:	d00d      	beq.n	800a338 <UART_SetConfig+0xe60>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b0b      	cmp	r3, #11
 800a322:	d104      	bne.n	800a32e <UART_SetConfig+0xe56>
 800a324:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a328:	f04f 0400 	mov.w	r4, #0
 800a32c:	e03a      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a32e:	f04f 0301 	mov.w	r3, #1
 800a332:	f04f 0400 	mov.w	r4, #0
 800a336:	e035      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a338:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a33c:	f04f 0400 	mov.w	r4, #0
 800a340:	e030      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a342:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a346:	f04f 0400 	mov.w	r4, #0
 800a34a:	e02b      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a34c:	f04f 0320 	mov.w	r3, #32
 800a350:	f04f 0400 	mov.w	r4, #0
 800a354:	e026      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a356:	f04f 0310 	mov.w	r3, #16
 800a35a:	f04f 0400 	mov.w	r4, #0
 800a35e:	e021      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a360:	f04f 030c 	mov.w	r3, #12
 800a364:	f04f 0400 	mov.w	r4, #0
 800a368:	e01c      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a36a:	f04f 030a 	mov.w	r3, #10
 800a36e:	f04f 0400 	mov.w	r4, #0
 800a372:	e017      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a374:	f04f 0308 	mov.w	r3, #8
 800a378:	f04f 0400 	mov.w	r4, #0
 800a37c:	e012      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a37e:	f04f 0306 	mov.w	r3, #6
 800a382:	f04f 0400 	mov.w	r4, #0
 800a386:	e00d      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a388:	f04f 0304 	mov.w	r3, #4
 800a38c:	f04f 0400 	mov.w	r4, #0
 800a390:	e008      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a392:	f04f 0302 	mov.w	r3, #2
 800a396:	f04f 0400 	mov.w	r4, #0
 800a39a:	e003      	b.n	800a3a4 <UART_SetConfig+0xecc>
 800a39c:	f04f 0301 	mov.w	r3, #1
 800a3a0:	f04f 0400 	mov.w	r4, #0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	f7f5 ff96 	bl	80002d8 <__aeabi_uldivmod>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	f04f 0300 	mov.w	r3, #0
 800a3b8:	f04f 0400 	mov.w	r4, #0
 800a3bc:	0214      	lsls	r4, r2, #8
 800a3be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a3c2:	020b      	lsls	r3, r1, #8
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	6852      	ldr	r2, [r2, #4]
 800a3c8:	0852      	lsrs	r2, r2, #1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	f04f 0200 	mov.w	r2, #0
 800a3d0:	eb13 0b01 	adds.w	fp, r3, r1
 800a3d4:	eb44 0c02 	adc.w	ip, r4, r2
 800a3d8:	4658      	mov	r0, fp
 800a3da:	4661      	mov	r1, ip
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f04f 0400 	mov.w	r4, #0
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	f7f5 ff76 	bl	80002d8 <__aeabi_uldivmod>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3f2:	e247      	b.n	800a884 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f4:	4b96      	ldr	r3, [pc, #600]	; (800a650 <UART_SetConfig+0x1178>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0320 	and.w	r3, r3, #32
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 80a3 	beq.w	800a548 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a402:	4b93      	ldr	r3, [pc, #588]	; (800a650 <UART_SetConfig+0x1178>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	4a91      	ldr	r2, [pc, #580]	; (800a654 <UART_SetConfig+0x117c>)
 800a40e:	fa22 f303 	lsr.w	r3, r2, r3
 800a412:	4618      	mov	r0, r3
 800a414:	f04f 0100 	mov.w	r1, #0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d067      	beq.n	800a4f0 <UART_SetConfig+0x1018>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b01      	cmp	r3, #1
 800a426:	d05e      	beq.n	800a4e6 <UART_SetConfig+0x100e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d055      	beq.n	800a4dc <UART_SetConfig+0x1004>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	2b03      	cmp	r3, #3
 800a436:	d04c      	beq.n	800a4d2 <UART_SetConfig+0xffa>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d043      	beq.n	800a4c8 <UART_SetConfig+0xff0>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2b05      	cmp	r3, #5
 800a446:	d03a      	beq.n	800a4be <UART_SetConfig+0xfe6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b06      	cmp	r3, #6
 800a44e:	d031      	beq.n	800a4b4 <UART_SetConfig+0xfdc>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	2b07      	cmp	r3, #7
 800a456:	d028      	beq.n	800a4aa <UART_SetConfig+0xfd2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b08      	cmp	r3, #8
 800a45e:	d01f      	beq.n	800a4a0 <UART_SetConfig+0xfc8>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b09      	cmp	r3, #9
 800a466:	d016      	beq.n	800a496 <UART_SetConfig+0xfbe>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b0a      	cmp	r3, #10
 800a46e:	d00d      	beq.n	800a48c <UART_SetConfig+0xfb4>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2b0b      	cmp	r3, #11
 800a476:	d104      	bne.n	800a482 <UART_SetConfig+0xfaa>
 800a478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a47c:	f04f 0400 	mov.w	r4, #0
 800a480:	e03a      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a482:	f04f 0301 	mov.w	r3, #1
 800a486:	f04f 0400 	mov.w	r4, #0
 800a48a:	e035      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a48c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a490:	f04f 0400 	mov.w	r4, #0
 800a494:	e030      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a496:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a49a:	f04f 0400 	mov.w	r4, #0
 800a49e:	e02b      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4a0:	f04f 0320 	mov.w	r3, #32
 800a4a4:	f04f 0400 	mov.w	r4, #0
 800a4a8:	e026      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4aa:	f04f 0310 	mov.w	r3, #16
 800a4ae:	f04f 0400 	mov.w	r4, #0
 800a4b2:	e021      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4b4:	f04f 030c 	mov.w	r3, #12
 800a4b8:	f04f 0400 	mov.w	r4, #0
 800a4bc:	e01c      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4be:	f04f 030a 	mov.w	r3, #10
 800a4c2:	f04f 0400 	mov.w	r4, #0
 800a4c6:	e017      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4c8:	f04f 0308 	mov.w	r3, #8
 800a4cc:	f04f 0400 	mov.w	r4, #0
 800a4d0:	e012      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4d2:	f04f 0306 	mov.w	r3, #6
 800a4d6:	f04f 0400 	mov.w	r4, #0
 800a4da:	e00d      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4dc:	f04f 0304 	mov.w	r3, #4
 800a4e0:	f04f 0400 	mov.w	r4, #0
 800a4e4:	e008      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4e6:	f04f 0302 	mov.w	r3, #2
 800a4ea:	f04f 0400 	mov.w	r4, #0
 800a4ee:	e003      	b.n	800a4f8 <UART_SetConfig+0x1020>
 800a4f0:	f04f 0301 	mov.w	r3, #1
 800a4f4:	f04f 0400 	mov.w	r4, #0
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	f7f5 feec 	bl	80002d8 <__aeabi_uldivmod>
 800a500:	4603      	mov	r3, r0
 800a502:	460c      	mov	r4, r1
 800a504:	4619      	mov	r1, r3
 800a506:	4622      	mov	r2, r4
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	f04f 0400 	mov.w	r4, #0
 800a510:	0214      	lsls	r4, r2, #8
 800a512:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a516:	020b      	lsls	r3, r1, #8
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6852      	ldr	r2, [r2, #4]
 800a51c:	0852      	lsrs	r2, r2, #1
 800a51e:	4611      	mov	r1, r2
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	eb13 0b01 	adds.w	fp, r3, r1
 800a528:	eb44 0c02 	adc.w	ip, r4, r2
 800a52c:	4658      	mov	r0, fp
 800a52e:	4661      	mov	r1, ip
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f04f 0400 	mov.w	r4, #0
 800a538:	461a      	mov	r2, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	f7f5 fecc 	bl	80002d8 <__aeabi_uldivmod>
 800a540:	4603      	mov	r3, r0
 800a542:	460c      	mov	r4, r1
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a546:	e19d      	b.n	800a884 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d05b      	beq.n	800a608 <UART_SetConfig+0x1130>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b01      	cmp	r3, #1
 800a556:	d053      	beq.n	800a600 <UART_SetConfig+0x1128>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d04b      	beq.n	800a5f8 <UART_SetConfig+0x1120>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b03      	cmp	r3, #3
 800a566:	d043      	beq.n	800a5f0 <UART_SetConfig+0x1118>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d03b      	beq.n	800a5e8 <UART_SetConfig+0x1110>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	2b05      	cmp	r3, #5
 800a576:	d033      	beq.n	800a5e0 <UART_SetConfig+0x1108>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d02b      	beq.n	800a5d8 <UART_SetConfig+0x1100>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	2b07      	cmp	r3, #7
 800a586:	d023      	beq.n	800a5d0 <UART_SetConfig+0x10f8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d01b      	beq.n	800a5c8 <UART_SetConfig+0x10f0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b09      	cmp	r3, #9
 800a596:	d013      	beq.n	800a5c0 <UART_SetConfig+0x10e8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2b0a      	cmp	r3, #10
 800a59e:	d00b      	beq.n	800a5b8 <UART_SetConfig+0x10e0>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	2b0b      	cmp	r3, #11
 800a5a6:	d103      	bne.n	800a5b0 <UART_SetConfig+0x10d8>
 800a5a8:	4b2a      	ldr	r3, [pc, #168]	; (800a654 <UART_SetConfig+0x117c>)
 800a5aa:	f04f 0400 	mov.w	r4, #0
 800a5ae:	e02e      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5b0:	4b29      	ldr	r3, [pc, #164]	; (800a658 <UART_SetConfig+0x1180>)
 800a5b2:	f04f 0403 	mov.w	r4, #3
 800a5b6:	e02a      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5b8:	4b28      	ldr	r3, [pc, #160]	; (800a65c <UART_SetConfig+0x1184>)
 800a5ba:	f04f 0400 	mov.w	r4, #0
 800a5be:	e026      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5c0:	4b27      	ldr	r3, [pc, #156]	; (800a660 <UART_SetConfig+0x1188>)
 800a5c2:	f04f 0400 	mov.w	r4, #0
 800a5c6:	e022      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5c8:	4b26      	ldr	r3, [pc, #152]	; (800a664 <UART_SetConfig+0x118c>)
 800a5ca:	f04f 0400 	mov.w	r4, #0
 800a5ce:	e01e      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5d0:	4b25      	ldr	r3, [pc, #148]	; (800a668 <UART_SetConfig+0x1190>)
 800a5d2:	f04f 0400 	mov.w	r4, #0
 800a5d6:	e01a      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5d8:	a419      	add	r4, pc, #100	; (adr r4, 800a640 <UART_SetConfig+0x1168>)
 800a5da:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a5de:	e016      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5e0:	4b22      	ldr	r3, [pc, #136]	; (800a66c <UART_SetConfig+0x1194>)
 800a5e2:	f04f 0400 	mov.w	r4, #0
 800a5e6:	e012      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5e8:	4b21      	ldr	r3, [pc, #132]	; (800a670 <UART_SetConfig+0x1198>)
 800a5ea:	f04f 0400 	mov.w	r4, #0
 800a5ee:	e00e      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5f0:	a415      	add	r4, pc, #84	; (adr r4, 800a648 <UART_SetConfig+0x1170>)
 800a5f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a5f6:	e00a      	b.n	800a60e <UART_SetConfig+0x1136>
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <UART_SetConfig+0x119c>)
 800a5fa:	f04f 0400 	mov.w	r4, #0
 800a5fe:	e006      	b.n	800a60e <UART_SetConfig+0x1136>
 800a600:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <UART_SetConfig+0x11a0>)
 800a602:	f04f 0401 	mov.w	r4, #1
 800a606:	e002      	b.n	800a60e <UART_SetConfig+0x1136>
 800a608:	4b13      	ldr	r3, [pc, #76]	; (800a658 <UART_SetConfig+0x1180>)
 800a60a:	f04f 0403 	mov.w	r4, #3
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6852      	ldr	r2, [r2, #4]
 800a612:	0852      	lsrs	r2, r2, #1
 800a614:	4611      	mov	r1, r2
 800a616:	f04f 0200 	mov.w	r2, #0
 800a61a:	eb13 0b01 	adds.w	fp, r3, r1
 800a61e:	eb44 0c02 	adc.w	ip, r4, r2
 800a622:	4658      	mov	r0, fp
 800a624:	4661      	mov	r1, ip
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f04f 0400 	mov.w	r4, #0
 800a62e:	461a      	mov	r2, r3
 800a630:	4623      	mov	r3, r4
 800a632:	f7f5 fe51 	bl	80002d8 <__aeabi_uldivmod>
 800a636:	4603      	mov	r3, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a63c:	e122      	b.n	800a884 <UART_SetConfig+0x13ac>
 800a63e:	bf00      	nop
 800a640:	51615500 	.word	0x51615500
 800a644:	00000000 	.word	0x00000000
 800a648:	a2c2aa00 	.word	0xa2c2aa00
 800a64c:	00000000 	.word	0x00000000
 800a650:	58024400 	.word	0x58024400
 800a654:	03d09000 	.word	0x03d09000
 800a658:	d0900000 	.word	0xd0900000
 800a65c:	07a12000 	.word	0x07a12000
 800a660:	0f424000 	.word	0x0f424000
 800a664:	1e848000 	.word	0x1e848000
 800a668:	3d090000 	.word	0x3d090000
 800a66c:	61a80000 	.word	0x61a80000
 800a670:	7a120000 	.word	0x7a120000
 800a674:	f4240000 	.word	0xf4240000
 800a678:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d05b      	beq.n	800a73c <UART_SetConfig+0x1264>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d053      	beq.n	800a734 <UART_SetConfig+0x125c>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b02      	cmp	r3, #2
 800a692:	d04b      	beq.n	800a72c <UART_SetConfig+0x1254>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d043      	beq.n	800a724 <UART_SetConfig+0x124c>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d03b      	beq.n	800a71c <UART_SetConfig+0x1244>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b05      	cmp	r3, #5
 800a6aa:	d033      	beq.n	800a714 <UART_SetConfig+0x123c>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b06      	cmp	r3, #6
 800a6b2:	d02b      	beq.n	800a70c <UART_SetConfig+0x1234>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	2b07      	cmp	r3, #7
 800a6ba:	d023      	beq.n	800a704 <UART_SetConfig+0x122c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d01b      	beq.n	800a6fc <UART_SetConfig+0x1224>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	2b09      	cmp	r3, #9
 800a6ca:	d013      	beq.n	800a6f4 <UART_SetConfig+0x121c>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	2b0a      	cmp	r3, #10
 800a6d2:	d00b      	beq.n	800a6ec <UART_SetConfig+0x1214>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	2b0b      	cmp	r3, #11
 800a6da:	d103      	bne.n	800a6e4 <UART_SetConfig+0x120c>
 800a6dc:	4bc0      	ldr	r3, [pc, #768]	; (800a9e0 <UART_SetConfig+0x1508>)
 800a6de:	f04f 0400 	mov.w	r4, #0
 800a6e2:	e02e      	b.n	800a742 <UART_SetConfig+0x126a>
 800a6e4:	4bbf      	ldr	r3, [pc, #764]	; (800a9e4 <UART_SetConfig+0x150c>)
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	e02a      	b.n	800a742 <UART_SetConfig+0x126a>
 800a6ec:	4bbe      	ldr	r3, [pc, #760]	; (800a9e8 <UART_SetConfig+0x1510>)
 800a6ee:	f04f 0400 	mov.w	r4, #0
 800a6f2:	e026      	b.n	800a742 <UART_SetConfig+0x126a>
 800a6f4:	4bbd      	ldr	r3, [pc, #756]	; (800a9ec <UART_SetConfig+0x1514>)
 800a6f6:	f04f 0400 	mov.w	r4, #0
 800a6fa:	e022      	b.n	800a742 <UART_SetConfig+0x126a>
 800a6fc:	4bbc      	ldr	r3, [pc, #752]	; (800a9f0 <UART_SetConfig+0x1518>)
 800a6fe:	f04f 0400 	mov.w	r4, #0
 800a702:	e01e      	b.n	800a742 <UART_SetConfig+0x126a>
 800a704:	4bbb      	ldr	r3, [pc, #748]	; (800a9f4 <UART_SetConfig+0x151c>)
 800a706:	f04f 0400 	mov.w	r4, #0
 800a70a:	e01a      	b.n	800a742 <UART_SetConfig+0x126a>
 800a70c:	a4b0      	add	r4, pc, #704	; (adr r4, 800a9d0 <UART_SetConfig+0x14f8>)
 800a70e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a712:	e016      	b.n	800a742 <UART_SetConfig+0x126a>
 800a714:	4bb8      	ldr	r3, [pc, #736]	; (800a9f8 <UART_SetConfig+0x1520>)
 800a716:	f04f 0400 	mov.w	r4, #0
 800a71a:	e012      	b.n	800a742 <UART_SetConfig+0x126a>
 800a71c:	4bb7      	ldr	r3, [pc, #732]	; (800a9fc <UART_SetConfig+0x1524>)
 800a71e:	f04f 0400 	mov.w	r4, #0
 800a722:	e00e      	b.n	800a742 <UART_SetConfig+0x126a>
 800a724:	a4ac      	add	r4, pc, #688	; (adr r4, 800a9d8 <UART_SetConfig+0x1500>)
 800a726:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a72a:	e00a      	b.n	800a742 <UART_SetConfig+0x126a>
 800a72c:	4bb4      	ldr	r3, [pc, #720]	; (800aa00 <UART_SetConfig+0x1528>)
 800a72e:	f04f 0400 	mov.w	r4, #0
 800a732:	e006      	b.n	800a742 <UART_SetConfig+0x126a>
 800a734:	4bb3      	ldr	r3, [pc, #716]	; (800aa04 <UART_SetConfig+0x152c>)
 800a736:	f04f 0400 	mov.w	r4, #0
 800a73a:	e002      	b.n	800a742 <UART_SetConfig+0x126a>
 800a73c:	4ba9      	ldr	r3, [pc, #676]	; (800a9e4 <UART_SetConfig+0x150c>)
 800a73e:	f04f 0400 	mov.w	r4, #0
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6852      	ldr	r2, [r2, #4]
 800a746:	0852      	lsrs	r2, r2, #1
 800a748:	4611      	mov	r1, r2
 800a74a:	f04f 0200 	mov.w	r2, #0
 800a74e:	eb13 0b01 	adds.w	fp, r3, r1
 800a752:	eb44 0c02 	adc.w	ip, r4, r2
 800a756:	4658      	mov	r0, fp
 800a758:	4661      	mov	r1, ip
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f04f 0400 	mov.w	r4, #0
 800a762:	461a      	mov	r2, r3
 800a764:	4623      	mov	r3, r4
 800a766:	f7f5 fdb7 	bl	80002d8 <__aeabi_uldivmod>
 800a76a:	4603      	mov	r3, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a770:	e088      	b.n	800a884 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d064      	beq.n	800a844 <UART_SetConfig+0x136c>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d05b      	beq.n	800a83a <UART_SetConfig+0x1362>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b02      	cmp	r3, #2
 800a788:	d052      	beq.n	800a830 <UART_SetConfig+0x1358>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d04a      	beq.n	800a828 <UART_SetConfig+0x1350>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b04      	cmp	r3, #4
 800a798:	d041      	beq.n	800a81e <UART_SetConfig+0x1346>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d039      	beq.n	800a816 <UART_SetConfig+0x133e>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b06      	cmp	r3, #6
 800a7a8:	d031      	beq.n	800a80e <UART_SetConfig+0x1336>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b07      	cmp	r3, #7
 800a7b0:	d028      	beq.n	800a804 <UART_SetConfig+0x132c>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d01f      	beq.n	800a7fa <UART_SetConfig+0x1322>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2b09      	cmp	r3, #9
 800a7c0:	d016      	beq.n	800a7f0 <UART_SetConfig+0x1318>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b0a      	cmp	r3, #10
 800a7c8:	d00d      	beq.n	800a7e6 <UART_SetConfig+0x130e>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b0b      	cmp	r3, #11
 800a7d0:	d104      	bne.n	800a7dc <UART_SetConfig+0x1304>
 800a7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d6:	f04f 0400 	mov.w	r4, #0
 800a7da:	e037      	b.n	800a84c <UART_SetConfig+0x1374>
 800a7dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a7e0:	f04f 0400 	mov.w	r4, #0
 800a7e4:	e032      	b.n	800a84c <UART_SetConfig+0x1374>
 800a7e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7ea:	f04f 0400 	mov.w	r4, #0
 800a7ee:	e02d      	b.n	800a84c <UART_SetConfig+0x1374>
 800a7f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e028      	b.n	800a84c <UART_SetConfig+0x1374>
 800a7fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e023      	b.n	800a84c <UART_SetConfig+0x1374>
 800a804:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e01e      	b.n	800a84c <UART_SetConfig+0x1374>
 800a80e:	4b7e      	ldr	r3, [pc, #504]	; (800aa08 <UART_SetConfig+0x1530>)
 800a810:	f04f 0400 	mov.w	r4, #0
 800a814:	e01a      	b.n	800a84c <UART_SetConfig+0x1374>
 800a816:	4b7d      	ldr	r3, [pc, #500]	; (800aa0c <UART_SetConfig+0x1534>)
 800a818:	f04f 0400 	mov.w	r4, #0
 800a81c:	e016      	b.n	800a84c <UART_SetConfig+0x1374>
 800a81e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a822:	f04f 0400 	mov.w	r4, #0
 800a826:	e011      	b.n	800a84c <UART_SetConfig+0x1374>
 800a828:	4b79      	ldr	r3, [pc, #484]	; (800aa10 <UART_SetConfig+0x1538>)
 800a82a:	f04f 0400 	mov.w	r4, #0
 800a82e:	e00d      	b.n	800a84c <UART_SetConfig+0x1374>
 800a830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a834:	f04f 0400 	mov.w	r4, #0
 800a838:	e008      	b.n	800a84c <UART_SetConfig+0x1374>
 800a83a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a83e:	f04f 0400 	mov.w	r4, #0
 800a842:	e003      	b.n	800a84c <UART_SetConfig+0x1374>
 800a844:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a848:	f04f 0400 	mov.w	r4, #0
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6852      	ldr	r2, [r2, #4]
 800a850:	0852      	lsrs	r2, r2, #1
 800a852:	4611      	mov	r1, r2
 800a854:	f04f 0200 	mov.w	r2, #0
 800a858:	eb13 0b01 	adds.w	fp, r3, r1
 800a85c:	eb44 0c02 	adc.w	ip, r4, r2
 800a860:	4658      	mov	r0, fp
 800a862:	4661      	mov	r1, ip
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f04f 0400 	mov.w	r4, #0
 800a86c:	461a      	mov	r2, r3
 800a86e:	4623      	mov	r3, r4
 800a870:	f7f5 fd32 	bl	80002d8 <__aeabi_uldivmod>
 800a874:	4603      	mov	r3, r0
 800a876:	460c      	mov	r4, r1
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a87a:	e003      	b.n	800a884 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a882:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a88a:	d309      	bcc.n	800a8a0 <UART_SetConfig+0x13c8>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a892:	d205      	bcs.n	800a8a0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89a:	60da      	str	r2, [r3, #12]
 800a89c:	f000 bf85 	b.w	800b7aa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	f000 bf80 	b.w	800b7aa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8b2:	f040 83da 	bne.w	800b06a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800a8b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	f200 83b3 	bhi.w	800b026 <UART_SetConfig+0x1b4e>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <UART_SetConfig+0x13f0>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800aa15 	.word	0x0800aa15
 800a8cc:	0800aacd 	.word	0x0800aacd
 800a8d0:	0800b027 	.word	0x0800b027
 800a8d4:	0800b027 	.word	0x0800b027
 800a8d8:	0800ab85 	.word	0x0800ab85
 800a8dc:	0800b027 	.word	0x0800b027
 800a8e0:	0800b027 	.word	0x0800b027
 800a8e4:	0800b027 	.word	0x0800b027
 800a8e8:	0800ac41 	.word	0x0800ac41
 800a8ec:	0800b027 	.word	0x0800b027
 800a8f0:	0800b027 	.word	0x0800b027
 800a8f4:	0800b027 	.word	0x0800b027
 800a8f8:	0800b027 	.word	0x0800b027
 800a8fc:	0800b027 	.word	0x0800b027
 800a900:	0800b027 	.word	0x0800b027
 800a904:	0800b027 	.word	0x0800b027
 800a908:	0800acfd 	.word	0x0800acfd
 800a90c:	0800b027 	.word	0x0800b027
 800a910:	0800b027 	.word	0x0800b027
 800a914:	0800b027 	.word	0x0800b027
 800a918:	0800b027 	.word	0x0800b027
 800a91c:	0800b027 	.word	0x0800b027
 800a920:	0800b027 	.word	0x0800b027
 800a924:	0800b027 	.word	0x0800b027
 800a928:	0800b027 	.word	0x0800b027
 800a92c:	0800b027 	.word	0x0800b027
 800a930:	0800b027 	.word	0x0800b027
 800a934:	0800b027 	.word	0x0800b027
 800a938:	0800b027 	.word	0x0800b027
 800a93c:	0800b027 	.word	0x0800b027
 800a940:	0800b027 	.word	0x0800b027
 800a944:	0800b027 	.word	0x0800b027
 800a948:	0800ae6f 	.word	0x0800ae6f
 800a94c:	0800b027 	.word	0x0800b027
 800a950:	0800b027 	.word	0x0800b027
 800a954:	0800b027 	.word	0x0800b027
 800a958:	0800b027 	.word	0x0800b027
 800a95c:	0800b027 	.word	0x0800b027
 800a960:	0800b027 	.word	0x0800b027
 800a964:	0800b027 	.word	0x0800b027
 800a968:	0800b027 	.word	0x0800b027
 800a96c:	0800b027 	.word	0x0800b027
 800a970:	0800b027 	.word	0x0800b027
 800a974:	0800b027 	.word	0x0800b027
 800a978:	0800b027 	.word	0x0800b027
 800a97c:	0800b027 	.word	0x0800b027
 800a980:	0800b027 	.word	0x0800b027
 800a984:	0800b027 	.word	0x0800b027
 800a988:	0800b027 	.word	0x0800b027
 800a98c:	0800b027 	.word	0x0800b027
 800a990:	0800b027 	.word	0x0800b027
 800a994:	0800b027 	.word	0x0800b027
 800a998:	0800b027 	.word	0x0800b027
 800a99c:	0800b027 	.word	0x0800b027
 800a9a0:	0800b027 	.word	0x0800b027
 800a9a4:	0800b027 	.word	0x0800b027
 800a9a8:	0800b027 	.word	0x0800b027
 800a9ac:	0800b027 	.word	0x0800b027
 800a9b0:	0800b027 	.word	0x0800b027
 800a9b4:	0800b027 	.word	0x0800b027
 800a9b8:	0800b027 	.word	0x0800b027
 800a9bc:	0800b027 	.word	0x0800b027
 800a9c0:	0800b027 	.word	0x0800b027
 800a9c4:	0800b027 	.word	0x0800b027
 800a9c8:	0800af65 	.word	0x0800af65
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	05161500 	.word	0x05161500
 800a9d4:	00000000 	.word	0x00000000
 800a9d8:	0a2c2a00 	.word	0x0a2c2a00
 800a9dc:	00000000 	.word	0x00000000
 800a9e0:	003d0900 	.word	0x003d0900
 800a9e4:	3d090000 	.word	0x3d090000
 800a9e8:	007a1200 	.word	0x007a1200
 800a9ec:	00f42400 	.word	0x00f42400
 800a9f0:	01e84800 	.word	0x01e84800
 800a9f4:	03d09000 	.word	0x03d09000
 800a9f8:	061a8000 	.word	0x061a8000
 800a9fc:	07a12000 	.word	0x07a12000
 800aa00:	0f424000 	.word	0x0f424000
 800aa04:	1e848000 	.word	0x1e848000
 800aa08:	000aaa00 	.word	0x000aaa00
 800aa0c:	000ccc00 	.word	0x000ccc00
 800aa10:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa14:	f7fb fad8 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 800aa18:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d044      	beq.n	800aaac <UART_SetConfig+0x15d4>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d03e      	beq.n	800aaa8 <UART_SetConfig+0x15d0>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d038      	beq.n	800aaa4 <UART_SetConfig+0x15cc>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d032      	beq.n	800aaa0 <UART_SetConfig+0x15c8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d02c      	beq.n	800aa9c <UART_SetConfig+0x15c4>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b05      	cmp	r3, #5
 800aa48:	d026      	beq.n	800aa98 <UART_SetConfig+0x15c0>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4e:	2b06      	cmp	r3, #6
 800aa50:	d020      	beq.n	800aa94 <UART_SetConfig+0x15bc>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b07      	cmp	r3, #7
 800aa58:	d01a      	beq.n	800aa90 <UART_SetConfig+0x15b8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d014      	beq.n	800aa8c <UART_SetConfig+0x15b4>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b09      	cmp	r3, #9
 800aa68:	d00e      	beq.n	800aa88 <UART_SetConfig+0x15b0>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d008      	beq.n	800aa84 <UART_SetConfig+0x15ac>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa76:	2b0b      	cmp	r3, #11
 800aa78:	d102      	bne.n	800aa80 <UART_SetConfig+0x15a8>
 800aa7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa7e:	e016      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e014      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	e012      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa88:	2340      	movs	r3, #64	; 0x40
 800aa8a:	e010      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	e00e      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa90:	2310      	movs	r3, #16
 800aa92:	e00c      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa94:	230c      	movs	r3, #12
 800aa96:	e00a      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa98:	230a      	movs	r3, #10
 800aa9a:	e008      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aa9c:	2308      	movs	r3, #8
 800aa9e:	e006      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aaa0:	2306      	movs	r3, #6
 800aaa2:	e004      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	e002      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e000      	b.n	800aaae <UART_SetConfig+0x15d6>
 800aaac:	2301      	movs	r3, #1
 800aaae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab4:	005a      	lsls	r2, r3, #1
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	085b      	lsrs	r3, r3, #1
 800aabc:	441a      	add	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaca:	e2b0      	b.n	800b02e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aacc:	f7fb fa92 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
 800aad0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d044      	beq.n	800ab64 <UART_SetConfig+0x168c>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d03e      	beq.n	800ab60 <UART_SetConfig+0x1688>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d038      	beq.n	800ab5c <UART_SetConfig+0x1684>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d032      	beq.n	800ab58 <UART_SetConfig+0x1680>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b04      	cmp	r3, #4
 800aaf8:	d02c      	beq.n	800ab54 <UART_SetConfig+0x167c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b05      	cmp	r3, #5
 800ab00:	d026      	beq.n	800ab50 <UART_SetConfig+0x1678>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b06      	cmp	r3, #6
 800ab08:	d020      	beq.n	800ab4c <UART_SetConfig+0x1674>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	d01a      	beq.n	800ab48 <UART_SetConfig+0x1670>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b08      	cmp	r3, #8
 800ab18:	d014      	beq.n	800ab44 <UART_SetConfig+0x166c>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b09      	cmp	r3, #9
 800ab20:	d00e      	beq.n	800ab40 <UART_SetConfig+0x1668>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b0a      	cmp	r3, #10
 800ab28:	d008      	beq.n	800ab3c <UART_SetConfig+0x1664>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b0b      	cmp	r3, #11
 800ab30:	d102      	bne.n	800ab38 <UART_SetConfig+0x1660>
 800ab32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab36:	e016      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e014      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	e012      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	e010      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab44:	2320      	movs	r3, #32
 800ab46:	e00e      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	e00c      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	e00a      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab50:	230a      	movs	r3, #10
 800ab52:	e008      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab54:	2308      	movs	r3, #8
 800ab56:	e006      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab58:	2306      	movs	r3, #6
 800ab5a:	e004      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	e002      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e000      	b.n	800ab66 <UART_SetConfig+0x168e>
 800ab64:	2301      	movs	r3, #1
 800ab66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6c:	005a      	lsls	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	441a      	add	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab82:	e254      	b.n	800b02e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab84:	f107 0318 	add.w	r3, r7, #24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fc fb85 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d044      	beq.n	800ac22 <UART_SetConfig+0x174a>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d03e      	beq.n	800ac1e <UART_SetConfig+0x1746>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d038      	beq.n	800ac1a <UART_SetConfig+0x1742>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	2b03      	cmp	r3, #3
 800abae:	d032      	beq.n	800ac16 <UART_SetConfig+0x173e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	2b04      	cmp	r3, #4
 800abb6:	d02c      	beq.n	800ac12 <UART_SetConfig+0x173a>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d026      	beq.n	800ac0e <UART_SetConfig+0x1736>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	2b06      	cmp	r3, #6
 800abc6:	d020      	beq.n	800ac0a <UART_SetConfig+0x1732>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	2b07      	cmp	r3, #7
 800abce:	d01a      	beq.n	800ac06 <UART_SetConfig+0x172e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d014      	beq.n	800ac02 <UART_SetConfig+0x172a>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	2b09      	cmp	r3, #9
 800abde:	d00e      	beq.n	800abfe <UART_SetConfig+0x1726>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	2b0a      	cmp	r3, #10
 800abe6:	d008      	beq.n	800abfa <UART_SetConfig+0x1722>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2b0b      	cmp	r3, #11
 800abee:	d102      	bne.n	800abf6 <UART_SetConfig+0x171e>
 800abf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abf4:	e016      	b.n	800ac24 <UART_SetConfig+0x174c>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e014      	b.n	800ac24 <UART_SetConfig+0x174c>
 800abfa:	2380      	movs	r3, #128	; 0x80
 800abfc:	e012      	b.n	800ac24 <UART_SetConfig+0x174c>
 800abfe:	2340      	movs	r3, #64	; 0x40
 800ac00:	e010      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac02:	2320      	movs	r3, #32
 800ac04:	e00e      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac06:	2310      	movs	r3, #16
 800ac08:	e00c      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	e00a      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac0e:	230a      	movs	r3, #10
 800ac10:	e008      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac12:	2308      	movs	r3, #8
 800ac14:	e006      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac16:	2306      	movs	r3, #6
 800ac18:	e004      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac1a:	2304      	movs	r3, #4
 800ac1c:	e002      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e000      	b.n	800ac24 <UART_SetConfig+0x174c>
 800ac22:	2301      	movs	r3, #1
 800ac24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac28:	005a      	lsls	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac3e:	e1f6      	b.n	800b02e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac40:	f107 030c 	add.w	r3, r7, #12
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fc fc73 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d044      	beq.n	800acde <UART_SetConfig+0x1806>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d03e      	beq.n	800acda <UART_SetConfig+0x1802>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d038      	beq.n	800acd6 <UART_SetConfig+0x17fe>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d032      	beq.n	800acd2 <UART_SetConfig+0x17fa>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b04      	cmp	r3, #4
 800ac72:	d02c      	beq.n	800acce <UART_SetConfig+0x17f6>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d026      	beq.n	800acca <UART_SetConfig+0x17f2>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b06      	cmp	r3, #6
 800ac82:	d020      	beq.n	800acc6 <UART_SetConfig+0x17ee>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b07      	cmp	r3, #7
 800ac8a:	d01a      	beq.n	800acc2 <UART_SetConfig+0x17ea>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d014      	beq.n	800acbe <UART_SetConfig+0x17e6>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b09      	cmp	r3, #9
 800ac9a:	d00e      	beq.n	800acba <UART_SetConfig+0x17e2>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b0a      	cmp	r3, #10
 800aca2:	d008      	beq.n	800acb6 <UART_SetConfig+0x17de>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b0b      	cmp	r3, #11
 800acaa:	d102      	bne.n	800acb2 <UART_SetConfig+0x17da>
 800acac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb0:	e016      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e014      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acb6:	2380      	movs	r3, #128	; 0x80
 800acb8:	e012      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	e010      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acbe:	2320      	movs	r3, #32
 800acc0:	e00e      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acc2:	2310      	movs	r3, #16
 800acc4:	e00c      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acc6:	230c      	movs	r3, #12
 800acc8:	e00a      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acca:	230a      	movs	r3, #10
 800accc:	e008      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acce:	2308      	movs	r3, #8
 800acd0:	e006      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acd2:	2306      	movs	r3, #6
 800acd4:	e004      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acd6:	2304      	movs	r3, #4
 800acd8:	e002      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acda:	2302      	movs	r3, #2
 800acdc:	e000      	b.n	800ace0 <UART_SetConfig+0x1808>
 800acde:	2301      	movs	r3, #1
 800ace0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace4:	005a      	lsls	r2, r3, #1
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	441a      	add	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acfa:	e198      	b.n	800b02e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acfc:	4b87      	ldr	r3, [pc, #540]	; (800af1c <UART_SetConfig+0x1a44>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d05e      	beq.n	800adc6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad08:	4b84      	ldr	r3, [pc, #528]	; (800af1c <UART_SetConfig+0x1a44>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	08db      	lsrs	r3, r3, #3
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	4a83      	ldr	r2, [pc, #524]	; (800af20 <UART_SetConfig+0x1a48>)
 800ad14:	40da      	lsrs	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d044      	beq.n	800ada8 <UART_SetConfig+0x18d0>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d03e      	beq.n	800ada4 <UART_SetConfig+0x18cc>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d038      	beq.n	800ada0 <UART_SetConfig+0x18c8>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d032      	beq.n	800ad9c <UART_SetConfig+0x18c4>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	d02c      	beq.n	800ad98 <UART_SetConfig+0x18c0>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	2b05      	cmp	r3, #5
 800ad44:	d026      	beq.n	800ad94 <UART_SetConfig+0x18bc>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	2b06      	cmp	r3, #6
 800ad4c:	d020      	beq.n	800ad90 <UART_SetConfig+0x18b8>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	2b07      	cmp	r3, #7
 800ad54:	d01a      	beq.n	800ad8c <UART_SetConfig+0x18b4>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	2b08      	cmp	r3, #8
 800ad5c:	d014      	beq.n	800ad88 <UART_SetConfig+0x18b0>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	2b09      	cmp	r3, #9
 800ad64:	d00e      	beq.n	800ad84 <UART_SetConfig+0x18ac>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	2b0a      	cmp	r3, #10
 800ad6c:	d008      	beq.n	800ad80 <UART_SetConfig+0x18a8>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad72:	2b0b      	cmp	r3, #11
 800ad74:	d102      	bne.n	800ad7c <UART_SetConfig+0x18a4>
 800ad76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad7a:	e016      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e014      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad80:	2380      	movs	r3, #128	; 0x80
 800ad82:	e012      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	e010      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad88:	2320      	movs	r3, #32
 800ad8a:	e00e      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	e00c      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad90:	230c      	movs	r3, #12
 800ad92:	e00a      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad94:	230a      	movs	r3, #10
 800ad96:	e008      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad98:	2308      	movs	r3, #8
 800ad9a:	e006      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ad9c:	2306      	movs	r3, #6
 800ad9e:	e004      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ada0:	2304      	movs	r3, #4
 800ada2:	e002      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e000      	b.n	800adaa <UART_SetConfig+0x18d2>
 800ada8:	2301      	movs	r3, #1
 800adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adae:	005a      	lsls	r2, r3, #1
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	085b      	lsrs	r3, r3, #1
 800adb6:	441a      	add	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800adc4:	e133      	b.n	800b02e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d043      	beq.n	800ae56 <UART_SetConfig+0x197e>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2b01      	cmp	r3, #1
 800add4:	d03d      	beq.n	800ae52 <UART_SetConfig+0x197a>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	2b02      	cmp	r3, #2
 800addc:	d037      	beq.n	800ae4e <UART_SetConfig+0x1976>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d031      	beq.n	800ae4a <UART_SetConfig+0x1972>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	2b04      	cmp	r3, #4
 800adec:	d02b      	beq.n	800ae46 <UART_SetConfig+0x196e>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	2b05      	cmp	r3, #5
 800adf4:	d025      	beq.n	800ae42 <UART_SetConfig+0x196a>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	2b06      	cmp	r3, #6
 800adfc:	d01f      	beq.n	800ae3e <UART_SetConfig+0x1966>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	d019      	beq.n	800ae3a <UART_SetConfig+0x1962>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0a:	2b08      	cmp	r3, #8
 800ae0c:	d013      	beq.n	800ae36 <UART_SetConfig+0x195e>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	2b09      	cmp	r3, #9
 800ae14:	d00d      	beq.n	800ae32 <UART_SetConfig+0x195a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	2b0a      	cmp	r3, #10
 800ae1c:	d007      	beq.n	800ae2e <UART_SetConfig+0x1956>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	2b0b      	cmp	r3, #11
 800ae24:	d101      	bne.n	800ae2a <UART_SetConfig+0x1952>
 800ae26:	4b3f      	ldr	r3, [pc, #252]	; (800af24 <UART_SetConfig+0x1a4c>)
 800ae28:	e016      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae2a:	4b3f      	ldr	r3, [pc, #252]	; (800af28 <UART_SetConfig+0x1a50>)
 800ae2c:	e014      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae2e:	4b3f      	ldr	r3, [pc, #252]	; (800af2c <UART_SetConfig+0x1a54>)
 800ae30:	e012      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae32:	4b3f      	ldr	r3, [pc, #252]	; (800af30 <UART_SetConfig+0x1a58>)
 800ae34:	e010      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae36:	4b3f      	ldr	r3, [pc, #252]	; (800af34 <UART_SetConfig+0x1a5c>)
 800ae38:	e00e      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae3a:	4b3f      	ldr	r3, [pc, #252]	; (800af38 <UART_SetConfig+0x1a60>)
 800ae3c:	e00c      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae3e:	4b3f      	ldr	r3, [pc, #252]	; (800af3c <UART_SetConfig+0x1a64>)
 800ae40:	e00a      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae42:	4b3f      	ldr	r3, [pc, #252]	; (800af40 <UART_SetConfig+0x1a68>)
 800ae44:	e008      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae46:	4b3f      	ldr	r3, [pc, #252]	; (800af44 <UART_SetConfig+0x1a6c>)
 800ae48:	e006      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae4a:	4b3f      	ldr	r3, [pc, #252]	; (800af48 <UART_SetConfig+0x1a70>)
 800ae4c:	e004      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae4e:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <UART_SetConfig+0x1a74>)
 800ae50:	e002      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae52:	4b33      	ldr	r3, [pc, #204]	; (800af20 <UART_SetConfig+0x1a48>)
 800ae54:	e000      	b.n	800ae58 <UART_SetConfig+0x1980>
 800ae56:	4b34      	ldr	r3, [pc, #208]	; (800af28 <UART_SetConfig+0x1a50>)
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	6852      	ldr	r2, [r2, #4]
 800ae5c:	0852      	lsrs	r2, r2, #1
 800ae5e:	441a      	add	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae6c:	e0df      	b.n	800b02e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d045      	beq.n	800af02 <UART_SetConfig+0x1a2a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d03f      	beq.n	800aefe <UART_SetConfig+0x1a26>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d039      	beq.n	800aefa <UART_SetConfig+0x1a22>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d033      	beq.n	800aef6 <UART_SetConfig+0x1a1e>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d02d      	beq.n	800aef2 <UART_SetConfig+0x1a1a>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d027      	beq.n	800aeee <UART_SetConfig+0x1a16>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	2b06      	cmp	r3, #6
 800aea4:	d021      	beq.n	800aeea <UART_SetConfig+0x1a12>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	2b07      	cmp	r3, #7
 800aeac:	d01b      	beq.n	800aee6 <UART_SetConfig+0x1a0e>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d015      	beq.n	800aee2 <UART_SetConfig+0x1a0a>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b09      	cmp	r3, #9
 800aebc:	d00f      	beq.n	800aede <UART_SetConfig+0x1a06>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	2b0a      	cmp	r3, #10
 800aec4:	d008      	beq.n	800aed8 <UART_SetConfig+0x1a00>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	2b0b      	cmp	r3, #11
 800aecc:	d102      	bne.n	800aed4 <UART_SetConfig+0x19fc>
 800aece:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aed2:	e017      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aed4:	4b18      	ldr	r3, [pc, #96]	; (800af38 <UART_SetConfig+0x1a60>)
 800aed6:	e015      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aed8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aedc:	e012      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aede:	4b1c      	ldr	r3, [pc, #112]	; (800af50 <UART_SetConfig+0x1a78>)
 800aee0:	e010      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aee2:	4b1c      	ldr	r3, [pc, #112]	; (800af54 <UART_SetConfig+0x1a7c>)
 800aee4:	e00e      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <UART_SetConfig+0x1a4c>)
 800aee8:	e00c      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <UART_SetConfig+0x1a80>)
 800aeec:	e00a      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aeee:	4b1b      	ldr	r3, [pc, #108]	; (800af5c <UART_SetConfig+0x1a84>)
 800aef0:	e008      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <UART_SetConfig+0x1a54>)
 800aef4:	e006      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aef6:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <UART_SetConfig+0x1a88>)
 800aef8:	e004      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aefa:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <UART_SetConfig+0x1a58>)
 800aefc:	e002      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800aefe:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <UART_SetConfig+0x1a5c>)
 800af00:	e000      	b.n	800af04 <UART_SetConfig+0x1a2c>
 800af02:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <UART_SetConfig+0x1a60>)
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6852      	ldr	r2, [r2, #4]
 800af08:	0852      	lsrs	r2, r2, #1
 800af0a:	441a      	add	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	fbb2 f3f3 	udiv	r3, r2, r3
 800af14:	b29b      	uxth	r3, r3
 800af16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af18:	e089      	b.n	800b02e <UART_SetConfig+0x1b56>
 800af1a:	bf00      	nop
 800af1c:	58024400 	.word	0x58024400
 800af20:	03d09000 	.word	0x03d09000
 800af24:	0007a120 	.word	0x0007a120
 800af28:	07a12000 	.word	0x07a12000
 800af2c:	000f4240 	.word	0x000f4240
 800af30:	001e8480 	.word	0x001e8480
 800af34:	003d0900 	.word	0x003d0900
 800af38:	007a1200 	.word	0x007a1200
 800af3c:	00a2c2aa 	.word	0x00a2c2aa
 800af40:	00c35000 	.word	0x00c35000
 800af44:	00f42400 	.word	0x00f42400
 800af48:	01458554 	.word	0x01458554
 800af4c:	01e84800 	.word	0x01e84800
 800af50:	0001e848 	.word	0x0001e848
 800af54:	0003d090 	.word	0x0003d090
 800af58:	000a2c2a 	.word	0x000a2c2a
 800af5c:	000c3500 	.word	0x000c3500
 800af60:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d04f      	beq.n	800b00c <UART_SetConfig+0x1b34>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	2b01      	cmp	r3, #1
 800af72:	d048      	beq.n	800b006 <UART_SetConfig+0x1b2e>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d041      	beq.n	800b000 <UART_SetConfig+0x1b28>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	2b03      	cmp	r3, #3
 800af82:	d03a      	beq.n	800affa <UART_SetConfig+0x1b22>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	2b04      	cmp	r3, #4
 800af8a:	d033      	beq.n	800aff4 <UART_SetConfig+0x1b1c>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	2b05      	cmp	r3, #5
 800af92:	d02c      	beq.n	800afee <UART_SetConfig+0x1b16>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	2b06      	cmp	r3, #6
 800af9a:	d025      	beq.n	800afe8 <UART_SetConfig+0x1b10>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	d01e      	beq.n	800afe2 <UART_SetConfig+0x1b0a>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	2b08      	cmp	r3, #8
 800afaa:	d017      	beq.n	800afdc <UART_SetConfig+0x1b04>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d010      	beq.n	800afd6 <UART_SetConfig+0x1afe>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	2b0a      	cmp	r3, #10
 800afba:	d009      	beq.n	800afd0 <UART_SetConfig+0x1af8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b0b      	cmp	r3, #11
 800afc2:	d102      	bne.n	800afca <UART_SetConfig+0x1af2>
 800afc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc8:	e022      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800afce:	e01f      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd4:	e01c      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afda:	e019      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afe0:	e016      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afe6:	e013      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afe8:	f241 5354 	movw	r3, #5460	; 0x1554
 800afec:	e010      	b.n	800b010 <UART_SetConfig+0x1b38>
 800afee:	f641 1398 	movw	r3, #6552	; 0x1998
 800aff2:	e00d      	b.n	800b010 <UART_SetConfig+0x1b38>
 800aff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aff8:	e00a      	b.n	800b010 <UART_SetConfig+0x1b38>
 800affa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800affe:	e007      	b.n	800b010 <UART_SetConfig+0x1b38>
 800b000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b004:	e004      	b.n	800b010 <UART_SetConfig+0x1b38>
 800b006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b00a:	e001      	b.n	800b010 <UART_SetConfig+0x1b38>
 800b00c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6852      	ldr	r2, [r2, #4]
 800b014:	0852      	lsrs	r2, r2, #1
 800b016:	441a      	add	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b020:	b29b      	uxth	r3, r3
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b024:	e003      	b.n	800b02e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b02c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	2b0f      	cmp	r3, #15
 800b032:	d916      	bls.n	800b062 <UART_SetConfig+0x1b8a>
 800b034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03a:	d212      	bcs.n	800b062 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f023 030f 	bic.w	r3, r3, #15
 800b044:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b048:	085b      	lsrs	r3, r3, #1
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f003 0307 	and.w	r3, r3, #7
 800b050:	b29a      	uxth	r2, r3
 800b052:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b054:	4313      	orrs	r3, r2
 800b056:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b05e:	60da      	str	r2, [r3, #12]
 800b060:	e3a3      	b.n	800b7aa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b068:	e39f      	b.n	800b7aa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b06a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b06e:	2b40      	cmp	r3, #64	; 0x40
 800b070:	f200 8388 	bhi.w	800b784 <UART_SetConfig+0x22ac>
 800b074:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <UART_SetConfig+0x1ba4>)
 800b076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07a:	bf00      	nop
 800b07c:	0800b181 	.word	0x0800b181
 800b080:	0800b237 	.word	0x0800b237
 800b084:	0800b785 	.word	0x0800b785
 800b088:	0800b785 	.word	0x0800b785
 800b08c:	0800b2ed 	.word	0x0800b2ed
 800b090:	0800b785 	.word	0x0800b785
 800b094:	0800b785 	.word	0x0800b785
 800b098:	0800b785 	.word	0x0800b785
 800b09c:	0800b3a7 	.word	0x0800b3a7
 800b0a0:	0800b785 	.word	0x0800b785
 800b0a4:	0800b785 	.word	0x0800b785
 800b0a8:	0800b785 	.word	0x0800b785
 800b0ac:	0800b785 	.word	0x0800b785
 800b0b0:	0800b785 	.word	0x0800b785
 800b0b4:	0800b785 	.word	0x0800b785
 800b0b8:	0800b785 	.word	0x0800b785
 800b0bc:	0800b461 	.word	0x0800b461
 800b0c0:	0800b785 	.word	0x0800b785
 800b0c4:	0800b785 	.word	0x0800b785
 800b0c8:	0800b785 	.word	0x0800b785
 800b0cc:	0800b785 	.word	0x0800b785
 800b0d0:	0800b785 	.word	0x0800b785
 800b0d4:	0800b785 	.word	0x0800b785
 800b0d8:	0800b785 	.word	0x0800b785
 800b0dc:	0800b785 	.word	0x0800b785
 800b0e0:	0800b785 	.word	0x0800b785
 800b0e4:	0800b785 	.word	0x0800b785
 800b0e8:	0800b785 	.word	0x0800b785
 800b0ec:	0800b785 	.word	0x0800b785
 800b0f0:	0800b785 	.word	0x0800b785
 800b0f4:	0800b785 	.word	0x0800b785
 800b0f8:	0800b785 	.word	0x0800b785
 800b0fc:	0800b5d1 	.word	0x0800b5d1
 800b100:	0800b785 	.word	0x0800b785
 800b104:	0800b785 	.word	0x0800b785
 800b108:	0800b785 	.word	0x0800b785
 800b10c:	0800b785 	.word	0x0800b785
 800b110:	0800b785 	.word	0x0800b785
 800b114:	0800b785 	.word	0x0800b785
 800b118:	0800b785 	.word	0x0800b785
 800b11c:	0800b785 	.word	0x0800b785
 800b120:	0800b785 	.word	0x0800b785
 800b124:	0800b785 	.word	0x0800b785
 800b128:	0800b785 	.word	0x0800b785
 800b12c:	0800b785 	.word	0x0800b785
 800b130:	0800b785 	.word	0x0800b785
 800b134:	0800b785 	.word	0x0800b785
 800b138:	0800b785 	.word	0x0800b785
 800b13c:	0800b785 	.word	0x0800b785
 800b140:	0800b785 	.word	0x0800b785
 800b144:	0800b785 	.word	0x0800b785
 800b148:	0800b785 	.word	0x0800b785
 800b14c:	0800b785 	.word	0x0800b785
 800b150:	0800b785 	.word	0x0800b785
 800b154:	0800b785 	.word	0x0800b785
 800b158:	0800b785 	.word	0x0800b785
 800b15c:	0800b785 	.word	0x0800b785
 800b160:	0800b785 	.word	0x0800b785
 800b164:	0800b785 	.word	0x0800b785
 800b168:	0800b785 	.word	0x0800b785
 800b16c:	0800b785 	.word	0x0800b785
 800b170:	0800b785 	.word	0x0800b785
 800b174:	0800b785 	.word	0x0800b785
 800b178:	0800b785 	.word	0x0800b785
 800b17c:	0800b6c5 	.word	0x0800b6c5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b180:	f7fa ff22 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 800b184:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d044      	beq.n	800b218 <UART_SetConfig+0x1d40>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b01      	cmp	r3, #1
 800b194:	d03e      	beq.n	800b214 <UART_SetConfig+0x1d3c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d038      	beq.n	800b210 <UART_SetConfig+0x1d38>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d032      	beq.n	800b20c <UART_SetConfig+0x1d34>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d02c      	beq.n	800b208 <UART_SetConfig+0x1d30>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	d026      	beq.n	800b204 <UART_SetConfig+0x1d2c>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d020      	beq.n	800b200 <UART_SetConfig+0x1d28>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b07      	cmp	r3, #7
 800b1c4:	d01a      	beq.n	800b1fc <UART_SetConfig+0x1d24>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b08      	cmp	r3, #8
 800b1cc:	d014      	beq.n	800b1f8 <UART_SetConfig+0x1d20>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b09      	cmp	r3, #9
 800b1d4:	d00e      	beq.n	800b1f4 <UART_SetConfig+0x1d1c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b0a      	cmp	r3, #10
 800b1dc:	d008      	beq.n	800b1f0 <UART_SetConfig+0x1d18>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	2b0b      	cmp	r3, #11
 800b1e4:	d102      	bne.n	800b1ec <UART_SetConfig+0x1d14>
 800b1e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ea:	e016      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e014      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b1f0:	2380      	movs	r3, #128	; 0x80
 800b1f2:	e012      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b1f4:	2340      	movs	r3, #64	; 0x40
 800b1f6:	e010      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	e00e      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	e00c      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b200:	230c      	movs	r3, #12
 800b202:	e00a      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b204:	230a      	movs	r3, #10
 800b206:	e008      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b208:	2308      	movs	r3, #8
 800b20a:	e006      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b20c:	2306      	movs	r3, #6
 800b20e:	e004      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b210:	2304      	movs	r3, #4
 800b212:	e002      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b214:	2302      	movs	r3, #2
 800b216:	e000      	b.n	800b21a <UART_SetConfig+0x1d42>
 800b218:	2301      	movs	r3, #1
 800b21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b21c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	085b      	lsrs	r3, r3, #1
 800b226:	441a      	add	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b230:	b29b      	uxth	r3, r3
 800b232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b234:	e2aa      	b.n	800b78c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b236:	f7fa fedd 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
 800b23a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b00      	cmp	r3, #0
 800b242:	d044      	beq.n	800b2ce <UART_SetConfig+0x1df6>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d03e      	beq.n	800b2ca <UART_SetConfig+0x1df2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2b02      	cmp	r3, #2
 800b252:	d038      	beq.n	800b2c6 <UART_SetConfig+0x1dee>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d032      	beq.n	800b2c2 <UART_SetConfig+0x1dea>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b04      	cmp	r3, #4
 800b262:	d02c      	beq.n	800b2be <UART_SetConfig+0x1de6>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b05      	cmp	r3, #5
 800b26a:	d026      	beq.n	800b2ba <UART_SetConfig+0x1de2>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b06      	cmp	r3, #6
 800b272:	d020      	beq.n	800b2b6 <UART_SetConfig+0x1dde>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b07      	cmp	r3, #7
 800b27a:	d01a      	beq.n	800b2b2 <UART_SetConfig+0x1dda>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b08      	cmp	r3, #8
 800b282:	d014      	beq.n	800b2ae <UART_SetConfig+0x1dd6>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b09      	cmp	r3, #9
 800b28a:	d00e      	beq.n	800b2aa <UART_SetConfig+0x1dd2>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b0a      	cmp	r3, #10
 800b292:	d008      	beq.n	800b2a6 <UART_SetConfig+0x1dce>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b0b      	cmp	r3, #11
 800b29a:	d102      	bne.n	800b2a2 <UART_SetConfig+0x1dca>
 800b29c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a0:	e016      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e014      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2a6:	2380      	movs	r3, #128	; 0x80
 800b2a8:	e012      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	e010      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2ae:	2320      	movs	r3, #32
 800b2b0:	e00e      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2b2:	2310      	movs	r3, #16
 800b2b4:	e00c      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	e00a      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2ba:	230a      	movs	r3, #10
 800b2bc:	e008      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2be:	2308      	movs	r3, #8
 800b2c0:	e006      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2c2:	2306      	movs	r3, #6
 800b2c4:	e004      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	e002      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e000      	b.n	800b2d0 <UART_SetConfig+0x1df8>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	085b      	lsrs	r3, r3, #1
 800b2dc:	441a      	add	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2ea:	e24f      	b.n	800b78c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ec:	f107 0318 	add.w	r3, r7, #24
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fb ffd1 	bl	8007298 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f6:	69fa      	ldr	r2, [r7, #28]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d044      	beq.n	800b38a <UART_SetConfig+0x1eb2>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	2b01      	cmp	r3, #1
 800b306:	d03e      	beq.n	800b386 <UART_SetConfig+0x1eae>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d038      	beq.n	800b382 <UART_SetConfig+0x1eaa>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	2b03      	cmp	r3, #3
 800b316:	d032      	beq.n	800b37e <UART_SetConfig+0x1ea6>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d02c      	beq.n	800b37a <UART_SetConfig+0x1ea2>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	2b05      	cmp	r3, #5
 800b326:	d026      	beq.n	800b376 <UART_SetConfig+0x1e9e>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32c:	2b06      	cmp	r3, #6
 800b32e:	d020      	beq.n	800b372 <UART_SetConfig+0x1e9a>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	2b07      	cmp	r3, #7
 800b336:	d01a      	beq.n	800b36e <UART_SetConfig+0x1e96>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d014      	beq.n	800b36a <UART_SetConfig+0x1e92>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	2b09      	cmp	r3, #9
 800b346:	d00e      	beq.n	800b366 <UART_SetConfig+0x1e8e>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34c:	2b0a      	cmp	r3, #10
 800b34e:	d008      	beq.n	800b362 <UART_SetConfig+0x1e8a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	2b0b      	cmp	r3, #11
 800b356:	d102      	bne.n	800b35e <UART_SetConfig+0x1e86>
 800b358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b35c:	e016      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b35e:	2301      	movs	r3, #1
 800b360:	e014      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b362:	2380      	movs	r3, #128	; 0x80
 800b364:	e012      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b366:	2340      	movs	r3, #64	; 0x40
 800b368:	e010      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b36a:	2320      	movs	r3, #32
 800b36c:	e00e      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b36e:	2310      	movs	r3, #16
 800b370:	e00c      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b372:	230c      	movs	r3, #12
 800b374:	e00a      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b376:	230a      	movs	r3, #10
 800b378:	e008      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b37a:	2308      	movs	r3, #8
 800b37c:	e006      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b37e:	2306      	movs	r3, #6
 800b380:	e004      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b382:	2304      	movs	r3, #4
 800b384:	e002      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b386:	2302      	movs	r3, #2
 800b388:	e000      	b.n	800b38c <UART_SetConfig+0x1eb4>
 800b38a:	2301      	movs	r3, #1
 800b38c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	441a      	add	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3a4:	e1f2      	b.n	800b78c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a6:	f107 030c 	add.w	r3, r7, #12
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fc f8c0 	bl	8007530 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d044      	beq.n	800b444 <UART_SetConfig+0x1f6c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d03e      	beq.n	800b440 <UART_SetConfig+0x1f68>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d038      	beq.n	800b43c <UART_SetConfig+0x1f64>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d032      	beq.n	800b438 <UART_SetConfig+0x1f60>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d02c      	beq.n	800b434 <UART_SetConfig+0x1f5c>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d026      	beq.n	800b430 <UART_SetConfig+0x1f58>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	2b06      	cmp	r3, #6
 800b3e8:	d020      	beq.n	800b42c <UART_SetConfig+0x1f54>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	2b07      	cmp	r3, #7
 800b3f0:	d01a      	beq.n	800b428 <UART_SetConfig+0x1f50>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	d014      	beq.n	800b424 <UART_SetConfig+0x1f4c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fe:	2b09      	cmp	r3, #9
 800b400:	d00e      	beq.n	800b420 <UART_SetConfig+0x1f48>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b0a      	cmp	r3, #10
 800b408:	d008      	beq.n	800b41c <UART_SetConfig+0x1f44>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2b0b      	cmp	r3, #11
 800b410:	d102      	bne.n	800b418 <UART_SetConfig+0x1f40>
 800b412:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b416:	e016      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b418:	2301      	movs	r3, #1
 800b41a:	e014      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b41c:	2380      	movs	r3, #128	; 0x80
 800b41e:	e012      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	e010      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b424:	2320      	movs	r3, #32
 800b426:	e00e      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b428:	2310      	movs	r3, #16
 800b42a:	e00c      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b42c:	230c      	movs	r3, #12
 800b42e:	e00a      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b430:	230a      	movs	r3, #10
 800b432:	e008      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b434:	2308      	movs	r3, #8
 800b436:	e006      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b438:	2306      	movs	r3, #6
 800b43a:	e004      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b43c:	2304      	movs	r3, #4
 800b43e:	e002      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b440:	2302      	movs	r3, #2
 800b442:	e000      	b.n	800b446 <UART_SetConfig+0x1f6e>
 800b444:	2301      	movs	r3, #1
 800b446:	fbb2 f2f3 	udiv	r2, r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	085b      	lsrs	r3, r3, #1
 800b450:	441a      	add	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	fbb2 f3f3 	udiv	r3, r2, r3
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b45e:	e195      	b.n	800b78c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b460:	4b87      	ldr	r3, [pc, #540]	; (800b680 <UART_SetConfig+0x21a8>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d05d      	beq.n	800b528 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b46c:	4b84      	ldr	r3, [pc, #528]	; (800b680 <UART_SetConfig+0x21a8>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	4a83      	ldr	r2, [pc, #524]	; (800b684 <UART_SetConfig+0x21ac>)
 800b478:	40da      	lsrs	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d044      	beq.n	800b50c <UART_SetConfig+0x2034>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b01      	cmp	r3, #1
 800b488:	d03e      	beq.n	800b508 <UART_SetConfig+0x2030>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d038      	beq.n	800b504 <UART_SetConfig+0x202c>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b03      	cmp	r3, #3
 800b498:	d032      	beq.n	800b500 <UART_SetConfig+0x2028>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b04      	cmp	r3, #4
 800b4a0:	d02c      	beq.n	800b4fc <UART_SetConfig+0x2024>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b05      	cmp	r3, #5
 800b4a8:	d026      	beq.n	800b4f8 <UART_SetConfig+0x2020>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b06      	cmp	r3, #6
 800b4b0:	d020      	beq.n	800b4f4 <UART_SetConfig+0x201c>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b07      	cmp	r3, #7
 800b4b8:	d01a      	beq.n	800b4f0 <UART_SetConfig+0x2018>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b08      	cmp	r3, #8
 800b4c0:	d014      	beq.n	800b4ec <UART_SetConfig+0x2014>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b09      	cmp	r3, #9
 800b4c8:	d00e      	beq.n	800b4e8 <UART_SetConfig+0x2010>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b0a      	cmp	r3, #10
 800b4d0:	d008      	beq.n	800b4e4 <UART_SetConfig+0x200c>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	2b0b      	cmp	r3, #11
 800b4d8:	d102      	bne.n	800b4e0 <UART_SetConfig+0x2008>
 800b4da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4de:	e016      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e014      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4e4:	2380      	movs	r3, #128	; 0x80
 800b4e6:	e012      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4e8:	2340      	movs	r3, #64	; 0x40
 800b4ea:	e010      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	e00e      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	e00c      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4f4:	230c      	movs	r3, #12
 800b4f6:	e00a      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4f8:	230a      	movs	r3, #10
 800b4fa:	e008      	b.n	800b50e <UART_SetConfig+0x2036>
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	e006      	b.n	800b50e <UART_SetConfig+0x2036>
 800b500:	2306      	movs	r3, #6
 800b502:	e004      	b.n	800b50e <UART_SetConfig+0x2036>
 800b504:	2304      	movs	r3, #4
 800b506:	e002      	b.n	800b50e <UART_SetConfig+0x2036>
 800b508:	2302      	movs	r3, #2
 800b50a:	e000      	b.n	800b50e <UART_SetConfig+0x2036>
 800b50c:	2301      	movs	r3, #1
 800b50e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	085b      	lsrs	r3, r3, #1
 800b518:	441a      	add	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b522:	b29b      	uxth	r3, r3
 800b524:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b526:	e131      	b.n	800b78c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d043      	beq.n	800b5b8 <UART_SetConfig+0x20e0>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b01      	cmp	r3, #1
 800b536:	d03d      	beq.n	800b5b4 <UART_SetConfig+0x20dc>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d037      	beq.n	800b5b0 <UART_SetConfig+0x20d8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	2b03      	cmp	r3, #3
 800b546:	d031      	beq.n	800b5ac <UART_SetConfig+0x20d4>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d02b      	beq.n	800b5a8 <UART_SetConfig+0x20d0>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	2b05      	cmp	r3, #5
 800b556:	d025      	beq.n	800b5a4 <UART_SetConfig+0x20cc>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	2b06      	cmp	r3, #6
 800b55e:	d01f      	beq.n	800b5a0 <UART_SetConfig+0x20c8>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b564:	2b07      	cmp	r3, #7
 800b566:	d019      	beq.n	800b59c <UART_SetConfig+0x20c4>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d013      	beq.n	800b598 <UART_SetConfig+0x20c0>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	2b09      	cmp	r3, #9
 800b576:	d00d      	beq.n	800b594 <UART_SetConfig+0x20bc>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	2b0a      	cmp	r3, #10
 800b57e:	d007      	beq.n	800b590 <UART_SetConfig+0x20b8>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	2b0b      	cmp	r3, #11
 800b586:	d101      	bne.n	800b58c <UART_SetConfig+0x20b4>
 800b588:	4b3f      	ldr	r3, [pc, #252]	; (800b688 <UART_SetConfig+0x21b0>)
 800b58a:	e016      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b58c:	4b3d      	ldr	r3, [pc, #244]	; (800b684 <UART_SetConfig+0x21ac>)
 800b58e:	e014      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b590:	4b3e      	ldr	r3, [pc, #248]	; (800b68c <UART_SetConfig+0x21b4>)
 800b592:	e012      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b594:	4b3e      	ldr	r3, [pc, #248]	; (800b690 <UART_SetConfig+0x21b8>)
 800b596:	e010      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b598:	4b3e      	ldr	r3, [pc, #248]	; (800b694 <UART_SetConfig+0x21bc>)
 800b59a:	e00e      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b59c:	4b3e      	ldr	r3, [pc, #248]	; (800b698 <UART_SetConfig+0x21c0>)
 800b59e:	e00c      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5a0:	4b3e      	ldr	r3, [pc, #248]	; (800b69c <UART_SetConfig+0x21c4>)
 800b5a2:	e00a      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5a4:	4b3e      	ldr	r3, [pc, #248]	; (800b6a0 <UART_SetConfig+0x21c8>)
 800b5a6:	e008      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5a8:	4b3e      	ldr	r3, [pc, #248]	; (800b6a4 <UART_SetConfig+0x21cc>)
 800b5aa:	e006      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5ac:	4b3e      	ldr	r3, [pc, #248]	; (800b6a8 <UART_SetConfig+0x21d0>)
 800b5ae:	e004      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5b0:	4b3e      	ldr	r3, [pc, #248]	; (800b6ac <UART_SetConfig+0x21d4>)
 800b5b2:	e002      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5b4:	4b3e      	ldr	r3, [pc, #248]	; (800b6b0 <UART_SetConfig+0x21d8>)
 800b5b6:	e000      	b.n	800b5ba <UART_SetConfig+0x20e2>
 800b5b8:	4b32      	ldr	r3, [pc, #200]	; (800b684 <UART_SetConfig+0x21ac>)
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	6852      	ldr	r2, [r2, #4]
 800b5be:	0852      	lsrs	r2, r2, #1
 800b5c0:	441a      	add	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ce:	e0dd      	b.n	800b78c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d046      	beq.n	800b666 <UART_SetConfig+0x218e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d040      	beq.n	800b662 <UART_SetConfig+0x218a>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d03a      	beq.n	800b65e <UART_SetConfig+0x2186>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d034      	beq.n	800b65a <UART_SetConfig+0x2182>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d02e      	beq.n	800b656 <UART_SetConfig+0x217e>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	2b05      	cmp	r3, #5
 800b5fe:	d028      	beq.n	800b652 <UART_SetConfig+0x217a>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	2b06      	cmp	r3, #6
 800b606:	d022      	beq.n	800b64e <UART_SetConfig+0x2176>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	2b07      	cmp	r3, #7
 800b60e:	d01c      	beq.n	800b64a <UART_SetConfig+0x2172>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b08      	cmp	r3, #8
 800b616:	d016      	beq.n	800b646 <UART_SetConfig+0x216e>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b09      	cmp	r3, #9
 800b61e:	d00f      	beq.n	800b640 <UART_SetConfig+0x2168>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b0a      	cmp	r3, #10
 800b626:	d008      	beq.n	800b63a <UART_SetConfig+0x2162>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2b0b      	cmp	r3, #11
 800b62e:	d102      	bne.n	800b636 <UART_SetConfig+0x215e>
 800b630:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b634:	e018      	b.n	800b668 <UART_SetConfig+0x2190>
 800b636:	4b18      	ldr	r3, [pc, #96]	; (800b698 <UART_SetConfig+0x21c0>)
 800b638:	e016      	b.n	800b668 <UART_SetConfig+0x2190>
 800b63a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b63e:	e013      	b.n	800b668 <UART_SetConfig+0x2190>
 800b640:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b644:	e010      	b.n	800b668 <UART_SetConfig+0x2190>
 800b646:	4b1b      	ldr	r3, [pc, #108]	; (800b6b4 <UART_SetConfig+0x21dc>)
 800b648:	e00e      	b.n	800b668 <UART_SetConfig+0x2190>
 800b64a:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <UART_SetConfig+0x21b0>)
 800b64c:	e00c      	b.n	800b668 <UART_SetConfig+0x2190>
 800b64e:	4b1a      	ldr	r3, [pc, #104]	; (800b6b8 <UART_SetConfig+0x21e0>)
 800b650:	e00a      	b.n	800b668 <UART_SetConfig+0x2190>
 800b652:	4b1a      	ldr	r3, [pc, #104]	; (800b6bc <UART_SetConfig+0x21e4>)
 800b654:	e008      	b.n	800b668 <UART_SetConfig+0x2190>
 800b656:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <UART_SetConfig+0x21b4>)
 800b658:	e006      	b.n	800b668 <UART_SetConfig+0x2190>
 800b65a:	4b19      	ldr	r3, [pc, #100]	; (800b6c0 <UART_SetConfig+0x21e8>)
 800b65c:	e004      	b.n	800b668 <UART_SetConfig+0x2190>
 800b65e:	4b0c      	ldr	r3, [pc, #48]	; (800b690 <UART_SetConfig+0x21b8>)
 800b660:	e002      	b.n	800b668 <UART_SetConfig+0x2190>
 800b662:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <UART_SetConfig+0x21bc>)
 800b664:	e000      	b.n	800b668 <UART_SetConfig+0x2190>
 800b666:	4b0c      	ldr	r3, [pc, #48]	; (800b698 <UART_SetConfig+0x21c0>)
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	6852      	ldr	r2, [r2, #4]
 800b66c:	0852      	lsrs	r2, r2, #1
 800b66e:	441a      	add	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	fbb2 f3f3 	udiv	r3, r2, r3
 800b678:	b29b      	uxth	r3, r3
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b67c:	e086      	b.n	800b78c <UART_SetConfig+0x22b4>
 800b67e:	bf00      	nop
 800b680:	58024400 	.word	0x58024400
 800b684:	03d09000 	.word	0x03d09000
 800b688:	0003d090 	.word	0x0003d090
 800b68c:	0007a120 	.word	0x0007a120
 800b690:	000f4240 	.word	0x000f4240
 800b694:	001e8480 	.word	0x001e8480
 800b698:	003d0900 	.word	0x003d0900
 800b69c:	00516155 	.word	0x00516155
 800b6a0:	0061a800 	.word	0x0061a800
 800b6a4:	007a1200 	.word	0x007a1200
 800b6a8:	00a2c2aa 	.word	0x00a2c2aa
 800b6ac:	00f42400 	.word	0x00f42400
 800b6b0:	01e84800 	.word	0x01e84800
 800b6b4:	0001e848 	.word	0x0001e848
 800b6b8:	00051615 	.word	0x00051615
 800b6bc:	00061a80 	.word	0x00061a80
 800b6c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d04e      	beq.n	800b76a <UART_SetConfig+0x2292>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d047      	beq.n	800b764 <UART_SetConfig+0x228c>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d040      	beq.n	800b75e <UART_SetConfig+0x2286>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d039      	beq.n	800b758 <UART_SetConfig+0x2280>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d032      	beq.n	800b752 <UART_SetConfig+0x227a>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d02b      	beq.n	800b74c <UART_SetConfig+0x2274>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	d024      	beq.n	800b746 <UART_SetConfig+0x226e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	2b07      	cmp	r3, #7
 800b702:	d01d      	beq.n	800b740 <UART_SetConfig+0x2268>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	2b08      	cmp	r3, #8
 800b70a:	d016      	beq.n	800b73a <UART_SetConfig+0x2262>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b710:	2b09      	cmp	r3, #9
 800b712:	d00f      	beq.n	800b734 <UART_SetConfig+0x225c>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	2b0a      	cmp	r3, #10
 800b71a:	d008      	beq.n	800b72e <UART_SetConfig+0x2256>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b720:	2b0b      	cmp	r3, #11
 800b722:	d101      	bne.n	800b728 <UART_SetConfig+0x2250>
 800b724:	2380      	movs	r3, #128	; 0x80
 800b726:	e022      	b.n	800b76e <UART_SetConfig+0x2296>
 800b728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72c:	e01f      	b.n	800b76e <UART_SetConfig+0x2296>
 800b72e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b732:	e01c      	b.n	800b76e <UART_SetConfig+0x2296>
 800b734:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b738:	e019      	b.n	800b76e <UART_SetConfig+0x2296>
 800b73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b73e:	e016      	b.n	800b76e <UART_SetConfig+0x2296>
 800b740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b744:	e013      	b.n	800b76e <UART_SetConfig+0x2296>
 800b746:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b74a:	e010      	b.n	800b76e <UART_SetConfig+0x2296>
 800b74c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b750:	e00d      	b.n	800b76e <UART_SetConfig+0x2296>
 800b752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b756:	e00a      	b.n	800b76e <UART_SetConfig+0x2296>
 800b758:	f241 5355 	movw	r3, #5461	; 0x1555
 800b75c:	e007      	b.n	800b76e <UART_SetConfig+0x2296>
 800b75e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b762:	e004      	b.n	800b76e <UART_SetConfig+0x2296>
 800b764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b768:	e001      	b.n	800b76e <UART_SetConfig+0x2296>
 800b76a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	6852      	ldr	r2, [r2, #4]
 800b772:	0852      	lsrs	r2, r2, #1
 800b774:	441a      	add	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77e:	b29b      	uxth	r3, r3
 800b780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b782:	e003      	b.n	800b78c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b78a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78e:	2b0f      	cmp	r3, #15
 800b790:	d908      	bls.n	800b7a4 <UART_SetConfig+0x22cc>
 800b792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b798:	d204      	bcs.n	800b7a4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7a0:	60da      	str	r2, [r3, #12]
 800b7a2:	e002      	b.n	800b7aa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b7c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3740      	adds	r7, #64	; 0x40
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	430a      	orrs	r2, r1
 800b81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	430a      	orrs	r2, r1
 800b840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01a      	beq.n	800b8ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8d2:	d10a      	bne.n	800b8ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	605a      	str	r2, [r3, #4]
  }
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b928:	f7f6 fcfc 	bl	8002324 <HAL_GetTick>
 800b92c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0308 	and.w	r3, r3, #8
 800b938:	2b08      	cmp	r3, #8
 800b93a:	d10e      	bne.n	800b95a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b93c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f82c 	bl	800b9a8 <UART_WaitOnFlagUntilTimeout>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e022      	b.n	800b9a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b04      	cmp	r3, #4
 800b966:	d10e      	bne.n	800b986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f816 	bl	800b9a8 <UART_WaitOnFlagUntilTimeout>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e00c      	b.n	800b9a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9b8:	e062      	b.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d05e      	beq.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9c2:	f7f6 fcaf 	bl	8002324 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d302      	bcc.n	800b9d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11d      	bne.n	800ba14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 0201 	bic.w	r2, r2, #1
 800b9f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e045      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0304 	and.w	r3, r3, #4
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d02e      	beq.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba30:	d126      	bne.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba3a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e00f      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	69da      	ldr	r2, [r3, #28]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	4013      	ands	r3, r2
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	bf0c      	ite	eq
 800ba90:	2301      	moveq	r3, #1
 800ba92:	2300      	movne	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	461a      	mov	r2, r3
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d08d      	beq.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d101      	bne.n	800babe <HAL_UARTEx_DisableFifoMode+0x16>
 800baba:	2302      	movs	r3, #2
 800babc:	e027      	b.n	800bb0e <HAL_UARTEx_DisableFifoMode+0x66>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2224      	movs	r2, #36	; 0x24
 800baca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f022 0201 	bic.w	r2, r2, #1
 800bae4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800baec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d101      	bne.n	800bb32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e02d      	b.n	800bb8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2224      	movs	r2, #36	; 0x24
 800bb3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 0201 	bic.w	r2, r2, #1
 800bb58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f850 	bl	800bc14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2220      	movs	r2, #32
 800bb80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d101      	bne.n	800bbae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	e02d      	b.n	800bc0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2224      	movs	r2, #36	; 0x24
 800bbba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f022 0201 	bic.w	r2, r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f812 	bl	800bc14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b089      	sub	sp, #36	; 0x24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bc1c:	4a2f      	ldr	r2, [pc, #188]	; (800bcdc <UARTEx_SetNbDataToProcess+0xc8>)
 800bc1e:	f107 0314 	add.w	r3, r7, #20
 800bc22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc26:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bc2a:	4a2d      	ldr	r2, [pc, #180]	; (800bce0 <UARTEx_SetNbDataToProcess+0xcc>)
 800bc2c:	f107 030c 	add.w	r3, r7, #12
 800bc30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc34:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d108      	bne.n	800bc52 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc50:	e03d      	b.n	800bcce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc52:	2308      	movs	r3, #8
 800bc54:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc56:	2308      	movs	r3, #8
 800bc58:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	0e5b      	lsrs	r3, r3, #25
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	f003 0307 	and.w	r3, r3, #7
 800bc68:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	0f5b      	lsrs	r3, r3, #29
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	f003 0307 	and.w	r3, r3, #7
 800bc78:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc7a:	7fbb      	ldrb	r3, [r7, #30]
 800bc7c:	7f3a      	ldrb	r2, [r7, #28]
 800bc7e:	f107 0120 	add.w	r1, r7, #32
 800bc82:	440a      	add	r2, r1
 800bc84:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bc88:	fb02 f303 	mul.w	r3, r2, r3
 800bc8c:	7f3a      	ldrb	r2, [r7, #28]
 800bc8e:	f107 0120 	add.w	r1, r7, #32
 800bc92:	440a      	add	r2, r1
 800bc94:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bc98:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bca4:	7ffb      	ldrb	r3, [r7, #31]
 800bca6:	7f7a      	ldrb	r2, [r7, #29]
 800bca8:	f107 0120 	add.w	r1, r7, #32
 800bcac:	440a      	add	r2, r1
 800bcae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bcb2:	fb02 f303 	mul.w	r3, r2, r3
 800bcb6:	7f7a      	ldrb	r2, [r7, #29]
 800bcb8:	f107 0120 	add.w	r1, r7, #32
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bcc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcce:	bf00      	nop
 800bcd0:	3724      	adds	r7, #36	; 0x24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	0800d054 	.word	0x0800d054
 800bce0:	0800d05c 	.word	0x0800d05c

0800bce4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	6812      	ldr	r2, [r2, #0]
 800bcfc:	f023 0101 	bic.w	r1, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	2b08      	cmp	r3, #8
 800bd0c:	d102      	bne.n	800bd14 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bd0e:	2340      	movs	r3, #64	; 0x40
 800bd10:	60fb      	str	r3, [r7, #12]
 800bd12:	e001      	b.n	800bd18 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank],
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd22:	4b2b      	ldr	r3, [pc, #172]	; (800bdd0 <FMC_NORSRAM_Init+0xec>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	6851      	ldr	r1, [r2, #4]
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	4311      	orrs	r1, r2
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	6892      	ldr	r2, [r2, #8]
 800bd32:	4311      	orrs	r1, r2
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	68d2      	ldr	r2, [r2, #12]
 800bd38:	4311      	orrs	r1, r2
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	6912      	ldr	r2, [r2, #16]
 800bd3e:	4311      	orrs	r1, r2
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	6952      	ldr	r2, [r2, #20]
 800bd44:	4311      	orrs	r1, r2
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	6992      	ldr	r2, [r2, #24]
 800bd4a:	4311      	orrs	r1, r2
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	69d2      	ldr	r2, [r2, #28]
 800bd50:	4311      	orrs	r1, r2
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	6a12      	ldr	r2, [r2, #32]
 800bd56:	4311      	orrs	r1, r2
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd5c:	4311      	orrs	r1, r2
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bd62:	4311      	orrs	r1, r2
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bd68:	4311      	orrs	r1, r2
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd6e:	4311      	orrs	r1, r2
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bd74:	4311      	orrs	r1, r2
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd7a:	4311      	orrs	r1, r2
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	4319      	orrs	r1, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              Init->ContinuousClock         |
              Init->WriteFifo               |
              Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd90:	d10c      	bne.n	800bdac <FMC_NORSRAM_Init+0xc8>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda6:	431a      	orrs	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d006      	beq.n	800bdc2 <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	ffc00480 	.word	0xffc00480

0800bdd4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdea:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	011b      	lsls	r3, r3, #4
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	021b      	lsls	r3, r3, #8
 800be00:	431a      	orrs	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	041b      	lsls	r3, r3, #16
 800be08:	431a      	orrs	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	3b01      	subs	r3, #1
 800be10:	051b      	lsls	r3, r3, #20
 800be12:	431a      	orrs	r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	3b02      	subs	r3, #2
 800be1a:	061b      	lsls	r3, r3, #24
 800be1c:	431a      	orrs	r2, r3
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	4313      	orrs	r3, r2
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	3201      	adds	r2, #1
 800be28:	4319      	orrs	r1, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be3c:	d113      	bne.n	800be66 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be46:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	051b      	lsls	r3, r3, #20
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	431a      	orrs	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be88:	d11d      	bne.n	800bec6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be92:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800be94:	4013      	ands	r3, r2
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	6811      	ldr	r1, [r2, #0]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	6852      	ldr	r2, [r2, #4]
 800be9e:	0112      	lsls	r2, r2, #4
 800bea0:	4311      	orrs	r1, r2
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	6892      	ldr	r2, [r2, #8]
 800bea6:	0212      	lsls	r2, r2, #8
 800bea8:	4311      	orrs	r1, r2
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	6992      	ldr	r2, [r2, #24]
 800beae:	4311      	orrs	r1, r2
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	68d2      	ldr	r2, [r2, #12]
 800beb4:	0412      	lsls	r2, r2, #16
 800beb6:	430a      	orrs	r2, r1
 800beb8:	ea43 0102 	orr.w	r1, r3, r2
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bec4:	e005      	b.n	800bed2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	cff00000 	.word	0xcff00000

0800bee4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d121      	bne.n	800bf3a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	4b27      	ldr	r3, [pc, #156]	; (800bf98 <FMC_SDRAM_Init+0xb4>)
 800befc:	4013      	ands	r3, r2
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	6851      	ldr	r1, [r2, #4]
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	6892      	ldr	r2, [r2, #8]
 800bf06:	4311      	orrs	r1, r2
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	68d2      	ldr	r2, [r2, #12]
 800bf0c:	4311      	orrs	r1, r2
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	6912      	ldr	r2, [r2, #16]
 800bf12:	4311      	orrs	r1, r2
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	6952      	ldr	r2, [r2, #20]
 800bf18:	4311      	orrs	r1, r2
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	6992      	ldr	r2, [r2, #24]
 800bf1e:	4311      	orrs	r1, r2
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	69d2      	ldr	r2, [r2, #28]
 800bf24:	4311      	orrs	r1, r2
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	6a12      	ldr	r2, [r2, #32]
 800bf2a:	4311      	orrs	r1, r2
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf30:	430a      	orrs	r2, r1
 800bf32:	431a      	orrs	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	e026      	b.n	800bf88 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	69d9      	ldr	r1, [r3, #28]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	4319      	orrs	r1, r3
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	430b      	orrs	r3, r1
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	4b0e      	ldr	r3, [pc, #56]	; (800bf98 <FMC_SDRAM_Init+0xb4>)
 800bf5e:	4013      	ands	r3, r2
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	6851      	ldr	r1, [r2, #4]
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	6892      	ldr	r2, [r2, #8]
 800bf68:	4311      	orrs	r1, r2
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	68d2      	ldr	r2, [r2, #12]
 800bf6e:	4311      	orrs	r1, r2
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	6912      	ldr	r2, [r2, #16]
 800bf74:	4311      	orrs	r1, r2
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	6952      	ldr	r2, [r2, #20]
 800bf7a:	4311      	orrs	r1, r2
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	6992      	ldr	r2, [r2, #24]
 800bf80:	430a      	orrs	r2, r1
 800bf82:	431a      	orrs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	ffff8000 	.word	0xffff8000

0800bf9c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d128      	bne.n	800c000 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	1e59      	subs	r1, r3, #1
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	011b      	lsls	r3, r3, #4
 800bfc4:	4319      	orrs	r1, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	021b      	lsls	r3, r3, #8
 800bfce:	4319      	orrs	r1, r3
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	031b      	lsls	r3, r3, #12
 800bfd8:	4319      	orrs	r1, r3
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	041b      	lsls	r3, r3, #16
 800bfe2:	4319      	orrs	r1, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	051b      	lsls	r3, r3, #20
 800bfec:	4319      	orrs	r1, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	061b      	lsls	r3, r3, #24
 800bff6:	430b      	orrs	r3, r1
 800bff8:	431a      	orrs	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	609a      	str	r2, [r3, #8]
 800bffe:	e02d      	b.n	800c05c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	4b19      	ldr	r3, [pc, #100]	; (800c06c <FMC_SDRAM_Timing_Init+0xd0>)
 800c006:	4013      	ands	r3, r2
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	68d2      	ldr	r2, [r2, #12]
 800c00c:	3a01      	subs	r2, #1
 800c00e:	0311      	lsls	r1, r2, #12
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	6952      	ldr	r2, [r2, #20]
 800c014:	3a01      	subs	r2, #1
 800c016:	0512      	lsls	r2, r2, #20
 800c018:	430a      	orrs	r2, r1
 800c01a:	431a      	orrs	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	1e59      	subs	r1, r3, #1
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	3b01      	subs	r3, #1
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	4319      	orrs	r1, r3
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	4319      	orrs	r1, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	3b01      	subs	r3, #1
 800c048:	041b      	lsls	r3, r3, #16
 800c04a:	4319      	orrs	r1, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	699b      	ldr	r3, [r3, #24]
 800c050:	3b01      	subs	r3, #1
 800c052:	061b      	lsls	r3, r3, #24
 800c054:	430b      	orrs	r3, r1
 800c056:	431a      	orrs	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	ff0f0fff 	.word	0xff0f0fff

0800c070 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c070:	b084      	sub	sp, #16
 800c072:	b480      	push	{r7}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	f107 001c 	add.w	r0, r7, #28
 800c07e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c086:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c088:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c08a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c08e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c092:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c096:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <SDMMC_Init+0x50>)
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	b004      	add	sp, #16
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	ffc02c00 	.word	0xffc02c00

0800c0c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f043 0203 	orr.w	r2, r3, #3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0303 	and.w	r3, r3, #3
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c13a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c140:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c146:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	4b06      	ldr	r3, [pc, #24]	; (800c16c <SDMMC_SendCommand+0x50>)
 800c154:	4013      	ands	r3, r2
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	fffee0c0 	.word	0xfffee0c0

0800c170 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	b2db      	uxtb	r3, r3
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3314      	adds	r3, #20
 800c198:	461a      	mov	r2, r3
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	4413      	add	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c1dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0

}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c216:	2310      	movs	r3, #16
 800c218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c21a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c21e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c220:	2300      	movs	r3, #0
 800c222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c228:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c22a:	f107 0308 	add.w	r3, r7, #8
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ff73 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c236:	f241 3288 	movw	r2, #5000	; 0x1388
 800c23a:	2110      	movs	r1, #16
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9e3 	bl	800c608 <SDMMC_GetCmdResp1>
 800c242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c244:	69fb      	ldr	r3, [r7, #28]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b08a      	sub	sp, #40	; 0x28
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c25e:	2307      	movs	r3, #7
 800c260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c262:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c266:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c268:	2300      	movs	r3, #0
 800c26a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c26c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c270:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c272:	f107 0310 	add.w	r3, r7, #16
 800c276:	4619      	mov	r1, r3
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f7ff ff4f 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c282:	2107      	movs	r1, #7
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f9bf 	bl	800c608 <SDMMC_GetCmdResp1>
 800c28a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3728      	adds	r7, #40	; 0x28
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b088      	sub	sp, #32
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b4:	f107 0308 	add.w	r3, r7, #8
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ff2e 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f977 	bl	800c5b4 <SDMMC_GetCmdError>
 800c2c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b088      	sub	sp, #32
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c2da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c2de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c2e0:	2308      	movs	r3, #8
 800c2e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff ff0e 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fb6b 	bl	800c9dc <SDMMC_GetCmdResp7>
 800c306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c308:	69fb      	ldr	r3, [r7, #28]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b088      	sub	sp, #32
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c320:	2337      	movs	r3, #55	; 0x37
 800c322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c324:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c32a:	2300      	movs	r3, #0
 800c32c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c32e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff feee 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c340:	f241 3288 	movw	r2, #5000	; 0x1388
 800c344:	2137      	movs	r1, #55	; 0x37
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f95e 	bl	800c608 <SDMMC_GetCmdResp1>
 800c34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34e:	69fb      	ldr	r3, [r7, #28]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c366:	2329      	movs	r3, #41	; 0x29
 800c368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c37a:	f107 0308 	add.w	r3, r7, #8
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff fecb 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fa76 	bl	800c878 <SDMMC_GetCmdResp3>
 800c38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c38e:	69fb      	ldr	r3, [r7, #28]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c3a6:	2306      	movs	r3, #6
 800c3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ba:	f107 0308 	add.w	r3, r7, #8
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff feab 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ca:	2106      	movs	r1, #6
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f91b 	bl	800c608 <SDMMC_GetCmdResp1>
 800c3d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b088      	sub	sp, #32
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c3ea:	2333      	movs	r3, #51	; 0x33
 800c3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff fe89 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c40a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c40e:	2133      	movs	r1, #51	; 0x33
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f8f9 	bl	800c608 <SDMMC_GetCmdResp1>
 800c416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c418:	69fb      	ldr	r3, [r7, #28]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b088      	sub	sp, #32
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c42e:	2302      	movs	r3, #2
 800c430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c432:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c440:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c442:	f107 0308 	add.w	r3, r7, #8
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fe67 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f9ca 	bl	800c7e8 <SDMMC_GetCmdResp2>
 800c454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c456:	69fb      	ldr	r3, [r7, #28]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c46e:	2309      	movs	r3, #9
 800c470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c472:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c47c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c480:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c482:	f107 0308 	add.w	r3, r7, #8
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff fe47 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f9aa 	bl	800c7e8 <SDMMC_GetCmdResp2>
 800c494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c496:	69fb      	ldr	r3, [r7, #28]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3720      	adds	r7, #32
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4c2:	f107 0308 	add.w	r3, r7, #8
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff fe27 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	2103      	movs	r1, #3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa0c 	bl	800c8f0 <SDMMC_GetCmdResp6>
 800c4d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4da:	69fb      	ldr	r3, [r7, #28]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3720      	adds	r7, #32
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b088      	sub	sp, #32
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c4f2:	230d      	movs	r3, #13
 800c4f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c504:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff fe05 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c512:	f241 3288 	movw	r2, #5000	; 0x1388
 800c516:	210d      	movs	r1, #13
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f875 	bl	800c608 <SDMMC_GetCmdResp1>
 800c51e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c520:	69fb      	ldr	r3, [r7, #28]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3720      	adds	r7, #32
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b088      	sub	sp, #32
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c536:	230d      	movs	r3, #13
 800c538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c53a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c53e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c540:	2300      	movs	r3, #0
 800c542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c54a:	f107 0308 	add.w	r3, r7, #8
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff fde3 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c556:	f241 3288 	movw	r2, #5000	; 0x1388
 800c55a:	210d      	movs	r1, #13
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f853 	bl	800c608 <SDMMC_GetCmdResp1>
 800c562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c564:	69fb      	ldr	r3, [r7, #28]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3720      	adds	r7, #32
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b088      	sub	sp, #32
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c576:	2300      	movs	r3, #0
 800c578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c57a:	230b      	movs	r3, #11
 800c57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c57e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c58e:	f107 0308 	add.w	r3, r7, #8
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff fdc1 	bl	800c11c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59e:	210b      	movs	r1, #11
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f831 	bl	800c608 <SDMMC_GetCmdResp1>
 800c5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3720      	adds	r7, #32
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c5b4:	b490      	push	{r4, r7}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5bc:	4b0f      	ldr	r3, [pc, #60]	; (800c5fc <SDMMC_GetCmdError+0x48>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	; (800c600 <SDMMC_GetCmdError+0x4c>)
 800c5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c6:	0a5b      	lsrs	r3, r3, #9
 800c5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5cc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	1e5c      	subs	r4, r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d102      	bne.n	800c5de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5dc:	e009      	b.n	800c5f2 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0f2      	beq.n	800c5d0 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a05      	ldr	r2, [pc, #20]	; (800c604 <SDMMC_GetCmdError+0x50>)
 800c5ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc90      	pop	{r4, r7}
 800c5fa:	4770      	bx	lr
 800c5fc:	24000000 	.word	0x24000000
 800c600:	10624dd3 	.word	0x10624dd3
 800c604:	002000c5 	.word	0x002000c5

0800c608 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c608:	b590      	push	{r4, r7, lr}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	460b      	mov	r3, r1
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c616:	4b6f      	ldr	r3, [pc, #444]	; (800c7d4 <SDMMC_GetCmdResp1+0x1cc>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a6f      	ldr	r2, [pc, #444]	; (800c7d8 <SDMMC_GetCmdResp1+0x1d0>)
 800c61c:	fba2 2303 	umull	r2, r3, r2, r3
 800c620:	0a5b      	lsrs	r3, r3, #9
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c628:	4623      	mov	r3, r4
 800c62a:	1e5c      	subs	r4, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c634:	e0c9      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	4b67      	ldr	r3, [pc, #412]	; (800c7dc <SDMMC_GetCmdResp1+0x1d4>)
 800c640:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0f0      	beq.n	800c628 <SDMMC_GetCmdResp1+0x20>
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1eb      	bne.n	800c628 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c654:	f003 0304 	and.w	r3, r3, #4
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2204      	movs	r2, #4
 800c660:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c662:	2304      	movs	r3, #4
 800c664:	e0b1      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d004      	beq.n	800c67c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c678:	2301      	movs	r3, #1
 800c67a:	e0a6      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4a58      	ldr	r2, [pc, #352]	; (800c7e0 <SDMMC_GetCmdResp1+0x1d8>)
 800c680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f7ff fd74 	bl	800c170 <SDMMC_GetCommandResponse>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	7afb      	ldrb	r3, [r7, #11]
 800c68e:	4293      	cmp	r3, r2
 800c690:	d001      	beq.n	800c696 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c692:	2301      	movs	r3, #1
 800c694:	e099      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c696:	2100      	movs	r1, #0
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7ff fd76 	bl	800c18a <SDMMC_GetResponse>
 800c69e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	4b50      	ldr	r3, [pc, #320]	; (800c7e4 <SDMMC_GetCmdResp1+0x1dc>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e08d      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da02      	bge.n	800c6ba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c6b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6b8:	e087      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c6c4:	2340      	movs	r3, #64	; 0x40
 800c6c6:	e080      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c6d2:	2380      	movs	r3, #128	; 0x80
 800c6d4:	e079      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c6e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6e4:	e071      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c6f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6f4:	e069      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c704:	e061      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c714:	e059      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c724:	e051      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c734:	e049      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c744:	e041      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c754:	e039      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c764:	e031      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c770:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c774:	e029      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c784:	e021      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c790:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c794:	e019      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c7a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c7a4:	e011      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c7b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c7b4:	e009      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f003 0308 	and.w	r3, r3, #8
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c7c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c7c4:	e001      	b.n	800c7ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c7c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd90      	pop	{r4, r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	24000000 	.word	0x24000000
 800c7d8:	10624dd3 	.word	0x10624dd3
 800c7dc:	00200045 	.word	0x00200045
 800c7e0:	002000c5 	.word	0x002000c5
 800c7e4:	fdffe008 	.word	0xfdffe008

0800c7e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c7e8:	b490      	push	{r4, r7}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7f0:	4b1e      	ldr	r3, [pc, #120]	; (800c86c <SDMMC_GetCmdResp2+0x84>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a1e      	ldr	r2, [pc, #120]	; (800c870 <SDMMC_GetCmdResp2+0x88>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	0a5b      	lsrs	r3, r3, #9
 800c7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c800:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c804:	4623      	mov	r3, r4
 800c806:	1e5c      	subs	r4, r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c80c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c810:	e026      	b.n	800c860 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c816:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f0      	beq.n	800c804 <SDMMC_GetCmdResp2+0x1c>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1eb      	bne.n	800c804 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2204      	movs	r2, #4
 800c83c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c83e:	2304      	movs	r3, #4
 800c840:	e00e      	b.n	800c860 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c854:	2301      	movs	r3, #1
 800c856:	e003      	b.n	800c860 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a06      	ldr	r2, [pc, #24]	; (800c874 <SDMMC_GetCmdResp2+0x8c>)
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bc90      	pop	{r4, r7}
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	24000000 	.word	0x24000000
 800c870:	10624dd3 	.word	0x10624dd3
 800c874:	002000c5 	.word	0x002000c5

0800c878 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c878:	b490      	push	{r4, r7}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c880:	4b18      	ldr	r3, [pc, #96]	; (800c8e4 <SDMMC_GetCmdResp3+0x6c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a18      	ldr	r2, [pc, #96]	; (800c8e8 <SDMMC_GetCmdResp3+0x70>)
 800c886:	fba2 2303 	umull	r2, r3, r2, r3
 800c88a:	0a5b      	lsrs	r3, r3, #9
 800c88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c890:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c894:	4623      	mov	r3, r4
 800c896:	1e5c      	subs	r4, r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d102      	bne.n	800c8a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c89c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8a0:	e01b      	b.n	800c8da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f0      	beq.n	800c894 <SDMMC_GetCmdResp3+0x1c>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1eb      	bne.n	800c894 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2204      	movs	r2, #4
 800c8cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8ce:	2304      	movs	r3, #4
 800c8d0:	e003      	b.n	800c8da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a05      	ldr	r2, [pc, #20]	; (800c8ec <SDMMC_GetCmdResp3+0x74>)
 800c8d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bc90      	pop	{r4, r7}
 800c8e2:	4770      	bx	lr
 800c8e4:	24000000 	.word	0x24000000
 800c8e8:	10624dd3 	.word	0x10624dd3
 800c8ec:	002000c5 	.word	0x002000c5

0800c8f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c8f0:	b590      	push	{r4, r7, lr}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8fe:	4b34      	ldr	r3, [pc, #208]	; (800c9d0 <SDMMC_GetCmdResp6+0xe0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a34      	ldr	r2, [pc, #208]	; (800c9d4 <SDMMC_GetCmdResp6+0xe4>)
 800c904:	fba2 2303 	umull	r2, r3, r2, r3
 800c908:	0a5b      	lsrs	r3, r3, #9
 800c90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c90e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c912:	4623      	mov	r3, r4
 800c914:	1e5c      	subs	r4, r3, #1
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c91a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c91e:	e052      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c924:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0f0      	beq.n	800c912 <SDMMC_GetCmdResp6+0x22>
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1eb      	bne.n	800c912 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d004      	beq.n	800c950 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2204      	movs	r2, #4
 800c94a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c94c:	2304      	movs	r3, #4
 800c94e:	e03a      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2201      	movs	r2, #1
 800c960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c962:	2301      	movs	r3, #1
 800c964:	e02f      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7ff fc02 	bl	800c170 <SDMMC_GetCommandResponse>
 800c96c:	4603      	mov	r3, r0
 800c96e:	461a      	mov	r2, r3
 800c970:	7afb      	ldrb	r3, [r7, #11]
 800c972:	4293      	cmp	r3, r2
 800c974:	d001      	beq.n	800c97a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c976:	2301      	movs	r3, #1
 800c978:	e025      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	4a16      	ldr	r2, [pc, #88]	; (800c9d8 <SDMMC_GetCmdResp6+0xe8>)
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c980:	2100      	movs	r1, #0
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff fc01 	bl	800c18a <SDMMC_GetResponse>
 800c988:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	0c1b      	lsrs	r3, r3, #16
 800c998:	b29a      	uxth	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e011      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9b0:	e009      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c9bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9c0:	e001      	b.n	800c9c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	371c      	adds	r7, #28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd90      	pop	{r4, r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	24000000 	.word	0x24000000
 800c9d4:	10624dd3 	.word	0x10624dd3
 800c9d8:	002000c5 	.word	0x002000c5

0800c9dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c9dc:	b490      	push	{r4, r7}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9e4:	4b21      	ldr	r3, [pc, #132]	; (800ca6c <SDMMC_GetCmdResp7+0x90>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a21      	ldr	r2, [pc, #132]	; (800ca70 <SDMMC_GetCmdResp7+0x94>)
 800c9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ee:	0a5b      	lsrs	r3, r3, #9
 800c9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	1e5c      	subs	r4, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca04:	e02c      	b.n	800ca60 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0f0      	beq.n	800c9f8 <SDMMC_GetCmdResp7+0x1c>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1eb      	bne.n	800c9f8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca24:	f003 0304 	and.w	r3, r3, #4
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2204      	movs	r2, #4
 800ca30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca32:	2304      	movs	r3, #4
 800ca34:	e014      	b.n	800ca60 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e009      	b.n	800ca60 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2240      	movs	r2, #64	; 0x40
 800ca5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca5e:	2300      	movs	r3, #0

}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bc90      	pop	{r4, r7}
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	24000000 	.word	0x24000000
 800ca70:	10624dd3 	.word	0x10624dd3

0800ca74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca74:	b084      	sub	sp, #16
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	f107 001c 	add.w	r0, r7, #28
 800ca82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d120      	bne.n	800cace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <USB_CoreInit+0xc0>)
 800ca9e:	4013      	ands	r3, r2
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d105      	bne.n	800cac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa5a 	bl	800cf7c <USB_CoreReset>
 800cac8:	4603      	mov	r3, r0
 800caca:	73fb      	strb	r3, [r7, #15]
 800cacc:	e01a      	b.n	800cb04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fa4e 	bl	800cf7c <USB_CoreReset>
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d106      	bne.n	800caf8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	639a      	str	r2, [r3, #56]	; 0x38
 800caf6:	e005      	b.n	800cb04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d10b      	bne.n	800cb22 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	f043 0208 	orr.w	r2, r3, #8
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f043 0220 	orr.w	r2, r3, #32
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb2e:	b004      	add	sp, #16
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	ffbdffbf 	.word	0xffbdffbf

0800cb38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f023 0201 	bic.w	r2, r3, #1
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	460b      	mov	r3, r1
 800cb64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb72:	78fb      	ldrb	r3, [r7, #3]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d106      	bne.n	800cb86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	60da      	str	r2, [r3, #12]
 800cb84:	e00b      	b.n	800cb9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60da      	str	r2, [r3, #12]
 800cb98:	e001      	b.n	800cb9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e003      	b.n	800cba6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cb9e:	2032      	movs	r0, #50	; 0x32
 800cba0:	f7f5 fbcc 	bl	800233c <HAL_Delay>

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b086      	sub	sp, #24
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cbbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cbca:	2300      	movs	r3, #0
 800cbcc:	613b      	str	r3, [r7, #16]
 800cbce:	e009      	b.n	800cbe4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	3340      	adds	r3, #64	; 0x40
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	2200      	movs	r2, #0
 800cbdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	613b      	str	r3, [r7, #16]
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	2b0e      	cmp	r3, #14
 800cbe8:	d9f2      	bls.n	800cbd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d112      	bne.n	800cc16 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	e005      	b.n	800cc22 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc28:	461a      	mov	r2, r3
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc34:	4619      	mov	r1, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	680b      	ldr	r3, [r1, #0]
 800cc40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d10c      	bne.n	800cc62 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d104      	bne.n	800cc58 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc4e:	2100      	movs	r1, #0
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f961 	bl	800cf18 <USB_SetDevSpeed>
 800cc56:	e008      	b.n	800cc6a <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc58:	2101      	movs	r1, #1
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f95c 	bl	800cf18 <USB_SetDevSpeed>
 800cc60:	e003      	b.n	800cc6a <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc62:	2103      	movs	r1, #3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f957 	bl	800cf18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc6a:	2110      	movs	r1, #16
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f90b 	bl	800ce88 <USB_FlushTxFifo>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f929 	bl	800ced4 <USB_FlushRxFifo>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc92:	461a      	mov	r2, r3
 800cc94:	2300      	movs	r3, #0
 800cc96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc9e:	461a      	mov	r2, r3
 800cca0:	2300      	movs	r3, #0
 800cca2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccaa:	461a      	mov	r2, r3
 800ccac:	2300      	movs	r3, #0
 800ccae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	613b      	str	r3, [r7, #16]
 800ccb4:	e043      	b.n	800cd3e <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cccc:	d118      	bne.n	800cd00 <USB_DevInit+0x150>
    {
      if (i == 0U)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce0:	461a      	mov	r2, r3
 800cce2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	e013      	b.n	800cd12 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	015a      	lsls	r2, r3, #5
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	e008      	b.n	800cd12 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1e:	461a      	mov	r2, r3
 800cd20:	2300      	movs	r3, #0
 800cd22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd30:	461a      	mov	r2, r3
 800cd32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	613b      	str	r3, [r7, #16]
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d3b7      	bcc.n	800ccb6 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
 800cd4a:	e043      	b.n	800cdd4 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd62:	d118      	bne.n	800cd96 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	015a      	lsls	r2, r3, #5
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd76:	461a      	mov	r2, r3
 800cd78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	e013      	b.n	800cda8 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	015a      	lsls	r2, r3, #5
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	4413      	add	r3, r2
 800cd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	e008      	b.n	800cda8 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda2:	461a      	mov	r2, r3
 800cda4:	2300      	movs	r3, #0
 800cda6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	015a      	lsls	r2, r3, #5
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4413      	add	r3, r2
 800cdb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d3b7      	bcc.n	800cd4c <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdee:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d110      	bne.n	800ce18 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4b1e      	ldr	r3, [pc, #120]	; (800ce78 <USB_DevInit+0x2c8>)
 800ce00:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce10:	4619      	mov	r1, r3
 800ce12:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <USB_DevInit+0x2cc>)
 800ce14:	4313      	orrs	r3, r2
 800ce16:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ce24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d105      	bne.n	800ce38 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	f043 0210 	orr.w	r2, r3, #16
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	699a      	ldr	r2, [r3, #24]
 800ce3c:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <USB_DevInit+0x2d0>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ce44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d005      	beq.n	800ce56 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	f043 0208 	orr.w	r2, r3, #8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d105      	bne.n	800ce68 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	699a      	ldr	r2, [r3, #24]
 800ce60:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <USB_DevInit+0x2d4>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce74:	b004      	add	sp, #16
 800ce76:	4770      	bx	lr
 800ce78:	00800100 	.word	0x00800100
 800ce7c:	00010003 	.word	0x00010003
 800ce80:	803c3800 	.word	0x803c3800
 800ce84:	40000004 	.word	0x40000004

0800ce88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	019b      	lsls	r3, r3, #6
 800ce9a:	f043 0220 	orr.w	r2, r3, #32
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <USB_FlushTxFifo+0x48>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d901      	bls.n	800ceb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e006      	b.n	800cec2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	d0f0      	beq.n	800cea2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	00030d40 	.word	0x00030d40

0800ced4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2210      	movs	r2, #16
 800cee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4a09      	ldr	r2, [pc, #36]	; (800cf14 <USB_FlushRxFifo+0x40>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d901      	bls.n	800cef8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e006      	b.n	800cf06 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	f003 0310 	and.w	r3, r3, #16
 800cf00:	2b10      	cmp	r3, #16
 800cf02:	d0f0      	beq.n	800cee6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	00030d40 	.word	0x00030d40

0800cf18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	68f9      	ldr	r1, [r7, #12]
 800cf34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf64:	f043 0302 	orr.w	r3, r3, #2
 800cf68:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cf6a:	2003      	movs	r0, #3
 800cf6c:	f7f5 f9e6 	bl	800233c <HAL_Delay>

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4a13      	ldr	r2, [pc, #76]	; (800cfe0 <USB_CoreReset+0x64>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d901      	bls.n	800cf9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e01b      	b.n	800cfd2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	daf2      	bge.n	800cf88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	f043 0201 	orr.w	r2, r3, #1
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4a09      	ldr	r2, [pc, #36]	; (800cfe0 <USB_CoreReset+0x64>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d901      	bls.n	800cfc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e006      	b.n	800cfd2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d0f0      	beq.n	800cfb2 <USB_CoreReset+0x36>

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	00030d40 	.word	0x00030d40

0800cfe4 <__libc_init_array>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	4e0d      	ldr	r6, [pc, #52]	; (800d01c <__libc_init_array+0x38>)
 800cfe8:	4c0d      	ldr	r4, [pc, #52]	; (800d020 <__libc_init_array+0x3c>)
 800cfea:	1ba4      	subs	r4, r4, r6
 800cfec:	10a4      	asrs	r4, r4, #2
 800cfee:	2500      	movs	r5, #0
 800cff0:	42a5      	cmp	r5, r4
 800cff2:	d109      	bne.n	800d008 <__libc_init_array+0x24>
 800cff4:	4e0b      	ldr	r6, [pc, #44]	; (800d024 <__libc_init_array+0x40>)
 800cff6:	4c0c      	ldr	r4, [pc, #48]	; (800d028 <__libc_init_array+0x44>)
 800cff8:	f000 f820 	bl	800d03c <_init>
 800cffc:	1ba4      	subs	r4, r4, r6
 800cffe:	10a4      	asrs	r4, r4, #2
 800d000:	2500      	movs	r5, #0
 800d002:	42a5      	cmp	r5, r4
 800d004:	d105      	bne.n	800d012 <__libc_init_array+0x2e>
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d00c:	4798      	blx	r3
 800d00e:	3501      	adds	r5, #1
 800d010:	e7ee      	b.n	800cff0 <__libc_init_array+0xc>
 800d012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d016:	4798      	blx	r3
 800d018:	3501      	adds	r5, #1
 800d01a:	e7f2      	b.n	800d002 <__libc_init_array+0x1e>
 800d01c:	0800d07c 	.word	0x0800d07c
 800d020:	0800d07c 	.word	0x0800d07c
 800d024:	0800d07c 	.word	0x0800d07c
 800d028:	0800d080 	.word	0x0800d080

0800d02c <memset>:
 800d02c:	4402      	add	r2, r0
 800d02e:	4603      	mov	r3, r0
 800d030:	4293      	cmp	r3, r2
 800d032:	d100      	bne.n	800d036 <memset+0xa>
 800d034:	4770      	bx	lr
 800d036:	f803 1b01 	strb.w	r1, [r3], #1
 800d03a:	e7f9      	b.n	800d030 <memset+0x4>

0800d03c <_init>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	bf00      	nop
 800d040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d042:	bc08      	pop	{r3}
 800d044:	469e      	mov	lr, r3
 800d046:	4770      	bx	lr

0800d048 <_fini>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr
